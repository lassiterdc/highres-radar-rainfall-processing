/*!
 * jQuery Cookie Plugin v1.3.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals.
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function raw(s) {
		return s;
	}

	function decoded(s) {
		return decodeURIComponent(s.replace(pluses, ' '));
	}

	function converted(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}
		try {
			return config.json ? JSON.parse(s) : s;
		} catch(er) {}
	}

	var config = $.cookie = function (key, value, options) {

		// write
		if (value !== undefined) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setDate(t.getDate() + days);
			}

			value = config.json ? JSON.stringify(value) : String(value);

			return (document.cookie = [
				config.raw ? key : encodeURIComponent(key),
				'=',
				config.raw ? value : encodeURIComponent(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// read
		var decode = config.raw ? raw : decoded;
		var cookies = document.cookie.split('; ');
		var result = key ? undefined : {};
		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = decode(parts.join('='));

			if (key && key === name) {
				result = converted(cookie);
				break;
			}

			if (!key) {
				result[name] = converted(cookie);
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) !== undefined) {
			$.cookie(key, '', $.extend(options, { expires: -1 }));
			return true;
		}
		return false;
	};

}));
/*
 * jQuery plugin created from this stackoverflow.com answer:
 * http://stackoverflow.com/questions/673153/html-table-with-fixed-headers?rq=1
 * --ems 4/9/2013
 */

jQuery.fn.scrollify = function(height){
	var oTbl = $(this);
	if(!($(this).attr('scrollified') == 'scrollified')){
	    // for very large tables you can remove the four lines below
	    // and wrap the table with <div> in the mark-up and assign
	    // height and overflow property  
	    var oTblDiv = $("<div/>");
	    oTblDiv.css('height', height);
	    oTblDiv.css('overflow-y','scroll');               
	    oTbl.wrap(oTblDiv);
	
	    // save original width
	    oTbl.attr("data-item-original-width", oTbl.width());
	    oTbl.find('thead tr th').each(function(){
	        $(this).attr("data-item-original-width",$(this).width());
	    }); 
	    oTbl.find('tbody tr:eq(0) td').each(function(){
	        $(this).attr("data-item-original-width",$(this).width());
	    });                 
	
	
	    // clone the original table
	    var newTbl = oTbl.clone();
	
	    // remove table header from original table
	    oTbl.find('thead tr').remove();                 
	    // remove table body from new table
	    newTbl.find('tbody tr').remove();   
	
	    oTbl.parent().parent().prepend(newTbl);
	    newTbl.wrap("<div/>");
	
	    // replace ORIGINAL COLUMN width                
	    newTbl.width(newTbl.attr('data-item-original-width'));
	    newTbl.attr('scrollified', 'scrollified');
	//    newTbl.width('100%');
	    newTbl.find('thead tr th').each(function(){
	        $(this).width($(this).attr("data-item-original-width"));
	    });     
	    oTbl.width(oTbl.attr('data-item-original-width'));
	    oTbl.attr('scrollified', 'scrollified');
	//    oTbl.width('100%');      
	    oTbl.find('tbody tr:eq(0) td').each(function(){
	        $(this).width($(this).attr("data-item-original-width"));
	    });
	}
};

/* qTip2 v2.2.0 modal | qtip2.com | Licensed MIT, GPL | Mon Mar 24 2014 07:24:16 */

!function(a,b,c){!function(a){"use strict";"function"==typeof define&&define.amd?define(["jquery"],a):jQuery&&!jQuery.fn.qtip&&a(jQuery)}(function(d){"use strict";function e(a,b,c,e){this.id=c,this.target=a,this.tooltip=B,this.elements={target:a},this._id=K+"-"+c,this.timers={img:{}},this.options=b,this.plugins={},this.cache={event:{},target:d(),disabled:A,attr:e,onTooltip:A,lastClass:""},this.rendered=this.destroyed=this.disabled=this.waiting=this.hiddenDuringWait=this.positioning=this.triggering=A}function f(a){return a===B||"object"!==d.type(a)}function g(a){return!(d.isFunction(a)||a&&a.attr||a.length||"object"===d.type(a)&&(a.jquery||a.then))}function h(a){var b,c,e,h;return f(a)?A:(f(a.metadata)&&(a.metadata={type:a.metadata}),"content"in a&&(b=a.content,f(b)||b.jquery||b.done?b=a.content={text:c=g(b)?A:b}:c=b.text,"ajax"in b&&(e=b.ajax,h=e&&e.once!==A,delete b.ajax,b.text=function(a,b){var f=c||d(this).attr(b.options.content.attr)||"Loading...",g=d.ajax(d.extend({},e,{context:b})).then(e.success,B,e.error).then(function(a){return a&&h&&b.set("content.text",a),a},function(a,c,d){b.destroyed||0===a.status||b.set("content.text",c+": "+d)});return h?f:(b.set("content.text",f),g)}),"title"in b&&(f(b.title)||(b.button=b.title.button,b.title=b.title.text),g(b.title||A)&&(b.title=A))),"position"in a&&f(a.position)&&(a.position={my:a.position,at:a.position}),"show"in a&&f(a.show)&&(a.show=a.show.jquery?{target:a.show}:a.show===z?{ready:z}:{event:a.show}),"hide"in a&&f(a.hide)&&(a.hide=a.hide.jquery?{target:a.hide}:{event:a.hide}),"style"in a&&f(a.style)&&(a.style={classes:a.style}),d.each(J,function(){this.sanitize&&this.sanitize(a)}),a)}function i(a,b){for(var c,d=0,e=a,f=b.split(".");e=e[f[d++]];)d<f.length&&(c=e);return[c||a,f.pop()]}function j(a,b){var c,d,e;for(c in this.checks)for(d in this.checks[c])(e=new RegExp(d,"i").exec(a))&&(b.push(e),("builtin"===c||this.plugins[c])&&this.checks[c][d].apply(this.plugins[c]||this,b))}function k(a){return N.concat("").join(a?"-"+a+" ":" ")}function l(c){return c&&{type:c.type,pageX:c.pageX,pageY:c.pageY,target:c.target,relatedTarget:c.relatedTarget,scrollX:c.scrollX||a.pageXOffset||b.body.scrollLeft||b.documentElement.scrollLeft,scrollY:c.scrollY||a.pageYOffset||b.body.scrollTop||b.documentElement.scrollTop}||{}}function m(a,b){return b>0?setTimeout(d.proxy(a,this),b):(a.call(this),void 0)}function n(a){return this.tooltip.hasClass(U)?A:(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this.timers.show=m.call(this,function(){this.toggle(z,a)},this.options.show.delay),void 0)}function o(a){if(this.tooltip.hasClass(U))return A;var b=d(a.relatedTarget),c=b.closest(O)[0]===this.tooltip[0],e=b[0]===this.options.show.target[0];if(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this!==b[0]&&"mouse"===this.options.position.target&&c||this.options.hide.fixed&&/mouse(out|leave|move)/.test(a.type)&&(c||e))try{a.preventDefault(),a.stopImmediatePropagation()}catch(f){}else this.timers.hide=m.call(this,function(){this.toggle(A,a)},this.options.hide.delay,this)}function p(a){return this.tooltip.hasClass(U)||!this.options.hide.inactive?A:(clearTimeout(this.timers.inactive),this.timers.inactive=m.call(this,function(){this.hide(a)},this.options.hide.inactive),void 0)}function q(a){this.rendered&&this.tooltip[0].offsetWidth>0&&this.reposition(a)}function r(a,c,e){d(b.body).delegate(a,(c.split?c:c.join(_+" "))+_,function(){var a=u.api[d.attr(this,M)];a&&!a.disabled&&e.apply(a,arguments)})}function s(a,c,f){var g,i,j,k,l,m=d(b.body),n=a[0]===b?m:a,o=a.metadata?a.metadata(f.metadata):B,p="html5"===f.metadata.type&&o?o[f.metadata.name]:B,q=a.data(f.metadata.name||"qtipopts");try{q="string"==typeof q?d.parseJSON(q):q}catch(r){}if(k=d.extend(z,{},u.defaults,f,"object"==typeof q?h(q):B,h(p||o)),i=k.position,k.id=c,"boolean"==typeof k.content.text){if(j=a.attr(k.content.attr),k.content.attr===A||!j)return A;k.content.text=j}if(i.container.length||(i.container=m),i.target===A&&(i.target=n),k.show.target===A&&(k.show.target=n),k.show.solo===z&&(k.show.solo=i.container.closest("body")),k.hide.target===A&&(k.hide.target=n),k.position.viewport===z&&(k.position.viewport=i.container),i.container=i.container.eq(0),i.at=new w(i.at,z),i.my=new w(i.my),a.data(K))if(k.overwrite)a.qtip("destroy",!0);else if(k.overwrite===A)return A;return a.attr(L,c),k.suppress&&(l=a.attr("title"))&&a.removeAttr("title").attr(W,l).attr("title",""),g=new e(a,k,c,!!j),a.data(K,g),a.one("remove.qtip-"+c+" removeqtip.qtip-"+c,function(){var a;(a=d(this).data(K))&&a.destroy(!0)}),g}function t(a,b){this.options=b,this._ns="-modal",this.init(this.qtip=a)}var u,v,w,x,y,z=!0,A=!1,B=null,C="x",D="y",E="top",F="left",G="bottom",H="right",I="center",J={},K="qtip",L="data-hasqtip",M="data-qtip-id",N=["ui-widget","ui-tooltip"],O="."+K,P="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),Q=K+"-fixed",R=K+"-default",S=K+"-focus",T=K+"-hover",U=K+"-disabled",V="_replacedByqTip",W="oldtitle",X={ie:function(){for(var a=3,c=b.createElement("div");(c.innerHTML="<!--[if gt IE "+ ++a+"]><i></i><![endif]-->")&&c.getElementsByTagName("i")[0];);return a>4?a:0/0}(),iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||A};v=e.prototype,v._when=function(a){return d.when.apply(d,a)},v.render=function(a){if(this.rendered||this.destroyed)return this;var b,c=this,e=this.options,f=this.cache,g=this.elements,h=e.content.text,i=e.content.title,j=e.content.button,k=e.position,l=("."+this._id+" ",[]);return d.attr(this.target[0],"aria-describedby",this._id),this.tooltip=g.tooltip=b=d("<div/>",{id:this._id,"class":[K,R,e.style.classes,K+"-pos-"+e.position.my.abbrev()].join(" "),width:e.style.width||"",height:e.style.height||"",tracking:"mouse"===k.target&&k.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":A,"aria-describedby":this._id+"-content","aria-hidden":z}).toggleClass(U,this.disabled).attr(M,this.id).data(K,this).appendTo(k.container).append(g.content=d("<div />",{"class":K+"-content",id:this._id+"-content","aria-atomic":z})),this.rendered=-1,this.positioning=z,i&&(this._createTitle(),d.isFunction(i)||l.push(this._updateTitle(i,A))),j&&this._createButton(),d.isFunction(h)||l.push(this._updateContent(h,A)),this.rendered=z,this._setWidget(),d.each(J,function(a){var b;"render"===this.initialize&&(b=this(c))&&(c.plugins[a]=b)}),this._unassignEvents(),this._assignEvents(),this._when(l).then(function(){c._trigger("render"),c.positioning=A,c.hiddenDuringWait||!e.show.ready&&!a||c.toggle(z,f.event,A),c.hiddenDuringWait=A}),u.api[this.id]=this,this},v.destroy=function(a){function b(){if(!this.destroyed){this.destroyed=z;var a=this.target,b=a.attr(W);this.rendered&&this.tooltip.stop(1,0).find("*").remove().end().remove(),d.each(this.plugins,function(){this.destroy&&this.destroy()}),clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this._unassignEvents(),a.removeData(K).removeAttr(M).removeAttr(L).removeAttr("aria-describedby"),this.options.suppress&&b&&a.attr("title",b).removeAttr(W),this._unbind(a),this.options=this.elements=this.cache=this.timers=this.plugins=this.mouse=B,delete u.api[this.id]}}return this.destroyed?this.target:(a===z&&"hide"!==this.triggering||!this.rendered?b.call(this):(this.tooltip.one("tooltiphidden",d.proxy(b,this)),!this.triggering&&this.hide()),this.target)},x=v.checks={builtin:{"^id$":function(a,b,c,e){var f=c===z?u.nextid:c,g=K+"-"+f;f!==A&&f.length>0&&!d("#"+g).length?(this._id=g,this.rendered&&(this.tooltip[0].id=this._id,this.elements.content[0].id=this._id+"-content",this.elements.title[0].id=this._id+"-title")):a[b]=e},"^prerender":function(a,b,c){c&&!this.rendered&&this.render(this.options.show.ready)},"^content.text$":function(a,b,c){this._updateContent(c)},"^content.attr$":function(a,b,c,d){this.options.content.text===this.target.attr(d)&&this._updateContent(this.target.attr(c))},"^content.title$":function(a,b,c){return c?(c&&!this.elements.title&&this._createTitle(),this._updateTitle(c),void 0):this._removeTitle()},"^content.button$":function(a,b,c){this._updateButton(c)},"^content.title.(text|button)$":function(a,b,c){this.set("content."+b,c)},"^position.(my|at)$":function(a,b,c){"string"==typeof c&&(a[b]=new w(c,"at"===b))},"^position.container$":function(a,b,c){this.rendered&&this.tooltip.appendTo(c)},"^show.ready$":function(a,b,c){c&&(!this.rendered&&this.render(z)||this.toggle(z))},"^style.classes$":function(a,b,c,d){this.rendered&&this.tooltip.removeClass(d).addClass(c)},"^style.(width|height)":function(a,b,c){this.rendered&&this.tooltip.css(b,c)},"^style.widget|content.title":function(){this.rendered&&this._setWidget()},"^style.def":function(a,b,c){this.rendered&&this.tooltip.toggleClass(R,!!c)},"^events.(render|show|move|hide|focus|blur)$":function(a,b,c){this.rendered&&this.tooltip[(d.isFunction(c)?"":"un")+"bind"]("tooltip"+b,c)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){if(this.rendered){var a=this.options.position;this.tooltip.attr("tracking","mouse"===a.target&&a.adjust.mouse),this._unassignEvents(),this._assignEvents()}}}},v.get=function(a){if(this.destroyed)return this;var b=i(this.options,a.toLowerCase()),c=b[0][b[1]];return c.precedance?c.string():c};var Y=/^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,Z=/^prerender|show\.ready/i;v.set=function(a,b){if(this.destroyed)return this;{var c,e=this.rendered,f=A,g=this.options;this.checks}return"string"==typeof a?(c=a,a={},a[c]=b):a=d.extend({},a),d.each(a,function(b,c){if(e&&Z.test(b))return delete a[b],void 0;var h,j=i(g,b.toLowerCase());h=j[0][j[1]],j[0][j[1]]=c&&c.nodeType?d(c):c,f=Y.test(b)||f,a[b]=[j[0],j[1],c,h]}),h(g),this.positioning=z,d.each(a,d.proxy(j,this)),this.positioning=A,this.rendered&&this.tooltip[0].offsetWidth>0&&f&&this.reposition("mouse"===g.position.target?B:this.cache.event),this},v._update=function(a,b){var c=this,e=this.cache;return this.rendered&&a?(d.isFunction(a)&&(a=a.call(this.elements.target,e.event,this)||""),d.isFunction(a.then)?(e.waiting=z,a.then(function(a){return e.waiting=A,c._update(a,b)},B,function(a){return c._update(a,b)})):a===A||!a&&""!==a?A:(a.jquery&&a.length>0?b.empty().append(a.css({display:"block",visibility:"visible"})):b.html(a),this._waitForContent(b).then(function(a){a.images&&a.images.length&&c.rendered&&c.tooltip[0].offsetWidth>0&&c.reposition(e.event,!a.length)}))):A},v._waitForContent=function(a){var b=this.cache;return b.waiting=z,(d.fn.imagesLoaded?a.imagesLoaded():d.Deferred().resolve([])).done(function(){b.waiting=A}).promise()},v._updateContent=function(a,b){this._update(a,this.elements.content,b)},v._updateTitle=function(a,b){this._update(a,this.elements.title,b)===A&&this._removeTitle(A)},v._createTitle=function(){var a=this.elements,b=this._id+"-title";a.titlebar&&this._removeTitle(),a.titlebar=d("<div />",{"class":K+"-titlebar "+(this.options.style.widget?k("header"):"")}).append(a.title=d("<div />",{id:b,"class":K+"-title","aria-atomic":z})).insertBefore(a.content).delegate(".qtip-close","mousedown keydown mouseup keyup mouseout",function(a){d(this).toggleClass("ui-state-active ui-state-focus","down"===a.type.substr(-4))}).delegate(".qtip-close","mouseover mouseout",function(a){d(this).toggleClass("ui-state-hover","mouseover"===a.type)}),this.options.content.button&&this._createButton()},v._removeTitle=function(a){var b=this.elements;b.title&&(b.titlebar.remove(),b.titlebar=b.title=b.button=B,a!==A&&this.reposition())},v.reposition=function(c,e){if(!this.rendered||this.positioning||this.destroyed)return this;this.positioning=z;var f,g,h=this.cache,i=this.tooltip,j=this.options.position,k=j.target,l=j.my,m=j.at,n=j.viewport,o=j.container,p=j.adjust,q=p.method.split(" "),r=i.outerWidth(A),s=i.outerHeight(A),t=0,u=0,v=i.css("position"),w={left:0,top:0},x=i[0].offsetWidth>0,y=c&&"scroll"===c.type,B=d(a),C=o[0].ownerDocument,D=this.mouse;if(d.isArray(k)&&2===k.length)m={x:F,y:E},w={left:k[0],top:k[1]};else if("mouse"===k)m={x:F,y:E},!D||!D.pageX||!p.mouse&&c&&c.pageX?c&&c.pageX||((!p.mouse||this.options.show.distance)&&h.origin&&h.origin.pageX?c=h.origin:(!c||c&&("resize"===c.type||"scroll"===c.type))&&(c=h.event)):c=D,"static"!==v&&(w=o.offset()),C.body.offsetWidth!==(a.innerWidth||C.documentElement.clientWidth)&&(g=d(b.body).offset()),w={left:c.pageX-w.left+(g&&g.left||0),top:c.pageY-w.top+(g&&g.top||0)},p.mouse&&y&&D&&(w.left-=(D.scrollX||0)-B.scrollLeft(),w.top-=(D.scrollY||0)-B.scrollTop());else{if("event"===k?c&&c.target&&"scroll"!==c.type&&"resize"!==c.type?h.target=d(c.target):c.target||(h.target=this.elements.target):"event"!==k&&(h.target=d(k.jquery?k:this.elements.target)),k=h.target,k=d(k).eq(0),0===k.length)return this;k[0]===b||k[0]===a?(t=X.iOS?a.innerWidth:k.width(),u=X.iOS?a.innerHeight:k.height(),k[0]===a&&(w={top:(n||k).scrollTop(),left:(n||k).scrollLeft()})):J.imagemap&&k.is("area")?f=J.imagemap(this,k,m,J.viewport?q:A):J.svg&&k&&k[0].ownerSVGElement?f=J.svg(this,k,m,J.viewport?q:A):(t=k.outerWidth(A),u=k.outerHeight(A),w=k.offset()),f&&(t=f.width,u=f.height,g=f.offset,w=f.position),w=this.reposition.offset(k,w,o),(X.iOS>3.1&&X.iOS<4.1||X.iOS>=4.3&&X.iOS<4.33||!X.iOS&&"fixed"===v)&&(w.left-=B.scrollLeft(),w.top-=B.scrollTop()),(!f||f&&f.adjustable!==A)&&(w.left+=m.x===H?t:m.x===I?t/2:0,w.top+=m.y===G?u:m.y===I?u/2:0)}return w.left+=p.x+(l.x===H?-r:l.x===I?-r/2:0),w.top+=p.y+(l.y===G?-s:l.y===I?-s/2:0),J.viewport?(w.adjusted=J.viewport(this,w,j,t,u,r,s),g&&w.adjusted.left&&(w.left+=g.left),g&&w.adjusted.top&&(w.top+=g.top)):w.adjusted={left:0,top:0},this._trigger("move",[w,n.elem||n],c)?(delete w.adjusted,e===A||!x||isNaN(w.left)||isNaN(w.top)||"mouse"===k||!d.isFunction(j.effect)?i.css(w):d.isFunction(j.effect)&&(j.effect.call(i,this,d.extend({},w)),i.queue(function(a){d(this).css({opacity:"",height:""}),X.ie&&this.style.removeAttribute("filter"),a()})),this.positioning=A,this):this},v.reposition.offset=function(a,c,e){function f(a,b){c.left+=b*a.scrollLeft(),c.top+=b*a.scrollTop()}if(!e[0])return c;var g,h,i,j,k=d(a[0].ownerDocument),l=!!X.ie&&"CSS1Compat"!==b.compatMode,m=e[0];do"static"!==(h=d.css(m,"position"))&&("fixed"===h?(i=m.getBoundingClientRect(),f(k,-1)):(i=d(m).position(),i.left+=parseFloat(d.css(m,"borderLeftWidth"))||0,i.top+=parseFloat(d.css(m,"borderTopWidth"))||0),c.left-=i.left+(parseFloat(d.css(m,"marginLeft"))||0),c.top-=i.top+(parseFloat(d.css(m,"marginTop"))||0),g||"hidden"===(j=d.css(m,"overflow"))||"visible"===j||(g=d(m)));while(m=m.offsetParent);return g&&(g[0]!==k[0]||l)&&f(g,1),c};var $=(w=v.reposition.Corner=function(a,b){a=(""+a).replace(/([A-Z])/," $1").replace(/middle/gi,I).toLowerCase(),this.x=(a.match(/left|right/i)||a.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(a.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase(),this.forceY=!!b;var c=a.charAt(0);this.precedance="t"===c||"b"===c?D:C}).prototype;$.invert=function(a,b){this[a]=this[a]===F?H:this[a]===H?F:b||this[a]},$.string=function(){var a=this.x,b=this.y;return a===b?a:this.precedance===D||this.forceY&&"center"!==b?b+" "+a:a+" "+b},$.abbrev=function(){var a=this.string().split(" ");return a[0].charAt(0)+(a[1]&&a[1].charAt(0)||"")},$.clone=function(){return new w(this.string(),this.forceY)},v.toggle=function(a,c){var e=this.cache,f=this.options,g=this.tooltip;if(c){if(/over|enter/.test(c.type)&&/out|leave/.test(e.event.type)&&f.show.target.add(c.target).length===f.show.target.length&&g.has(c.relatedTarget).length)return this;e.event=l(c)}if(this.waiting&&!a&&(this.hiddenDuringWait=z),!this.rendered)return a?this.render(1):this;if(this.destroyed||this.disabled)return this;var h,i,j,k=a?"show":"hide",m=this.options[k],n=(this.options[a?"hide":"show"],this.options.position),o=this.options.content,p=this.tooltip.css("width"),q=this.tooltip.is(":visible"),r=a||1===m.target.length,s=!c||m.target.length<2||e.target[0]===c.target;return(typeof a).search("boolean|number")&&(a=!q),h=!g.is(":animated")&&q===a&&s,i=h?B:!!this._trigger(k,[90]),this.destroyed?this:(i!==A&&a&&this.focus(c),!i||h?this:(d.attr(g[0],"aria-hidden",!a),a?(e.origin=l(this.mouse),d.isFunction(o.text)&&this._updateContent(o.text,A),d.isFunction(o.title)&&this._updateTitle(o.title,A),!y&&"mouse"===n.target&&n.adjust.mouse&&(d(b).bind("mousemove."+K,this._storeMouse),y=z),p||g.css("width",g.outerWidth(A)),this.reposition(c,arguments[2]),p||g.css("width",""),m.solo&&("string"==typeof m.solo?d(m.solo):d(O,m.solo)).not(g).not(m.target).qtip("hide",d.Event("tooltipsolo"))):(clearTimeout(this.timers.show),delete e.origin,y&&!d(O+'[tracking="true"]:visible',m.solo).not(g).length&&(d(b).unbind("mousemove."+K),y=A),this.blur(c)),j=d.proxy(function(){a?(X.ie&&g[0].style.removeAttribute("filter"),g.css("overflow",""),"string"==typeof m.autofocus&&d(this.options.show.autofocus,g).focus(),this.options.show.target.trigger("qtip-"+this.id+"-inactive")):g.css({display:"",visibility:"",opacity:"",left:"",top:""}),this._trigger(a?"visible":"hidden")},this),m.effect===A||r===A?(g[k](),j()):d.isFunction(m.effect)?(g.stop(1,1),m.effect.call(g,this),g.queue("fx",function(a){j(),a()})):g.fadeTo(90,a?1:0,j),a&&m.target.trigger("qtip-"+this.id+"-inactive"),this))},v.show=function(a){return this.toggle(z,a)},v.hide=function(a){return this.toggle(A,a)},v.focus=function(a){if(!this.rendered||this.destroyed)return this;var b=d(O),c=this.tooltip,e=parseInt(c[0].style.zIndex,10),f=u.zindex+b.length;return c.hasClass(S)||this._trigger("focus",[f],a)&&(e!==f&&(b.each(function(){this.style.zIndex>e&&(this.style.zIndex=this.style.zIndex-1)}),b.filter("."+S).qtip("blur",a)),c.addClass(S)[0].style.zIndex=f),this},v.blur=function(a){return!this.rendered||this.destroyed?this:(this.tooltip.removeClass(S),this._trigger("blur",[this.tooltip.css("zIndex")],a),this)},v.disable=function(a){return this.destroyed?this:("toggle"===a?a=!(this.rendered?this.tooltip.hasClass(U):this.disabled):"boolean"!=typeof a&&(a=z),this.rendered&&this.tooltip.toggleClass(U,a).attr("aria-disabled",a),this.disabled=!!a,this)},v.enable=function(){return this.disable(A)},v._createButton=function(){var a=this,b=this.elements,c=b.tooltip,e=this.options.content.button,f="string"==typeof e,g=f?e:"Close tooltip";b.button&&b.button.remove(),b.button=e.jquery?e:d("<a />",{"class":"qtip-close "+(this.options.style.widget?"":K+"-icon"),title:g,"aria-label":g}).prepend(d("<span />",{"class":"ui-icon ui-icon-close",html:"&times;"})),b.button.appendTo(b.titlebar||c).attr("role","button").click(function(b){return c.hasClass(U)||a.hide(b),A})},v._updateButton=function(a){if(!this.rendered)return A;var b=this.elements.button;a?this._createButton():b.remove()},v._setWidget=function(){var a=this.options.style.widget,b=this.elements,c=b.tooltip,d=c.hasClass(U);c.removeClass(U),U=a?"ui-state-disabled":"qtip-disabled",c.toggleClass(U,d),c.toggleClass("ui-helper-reset "+k(),a).toggleClass(R,this.options.style.def&&!a),b.content&&b.content.toggleClass(k("content"),a),b.titlebar&&b.titlebar.toggleClass(k("header"),a),b.button&&b.button.toggleClass(K+"-icon",!a)},v._storeMouse=function(a){(this.mouse=l(a)).type="mousemove"},v._bind=function(a,b,c,e,f){var g="."+this._id+(e?"-"+e:"");b.length&&d(a).bind((b.split?b:b.join(g+" "))+g,d.proxy(c,f||this))},v._unbind=function(a,b){d(a).unbind("."+this._id+(b?"-"+b:""))};var _="."+K;d(function(){r(O,["mouseenter","mouseleave"],function(a){var b="mouseenter"===a.type,c=d(a.currentTarget),e=d(a.relatedTarget||a.target),f=this.options;b?(this.focus(a),c.hasClass(Q)&&!c.hasClass(U)&&clearTimeout(this.timers.hide)):"mouse"===f.position.target&&f.hide.event&&f.show.target&&!e.closest(f.show.target[0]).length&&this.hide(a),c.toggleClass(T,b)}),r("["+M+"]",P,p)}),v._trigger=function(a,b,c){var e=d.Event("tooltip"+a);return e.originalEvent=c&&d.extend({},c)||this.cache.event||B,this.triggering=a,this.tooltip.trigger(e,[this].concat(b||[])),this.triggering=A,!e.isDefaultPrevented()},v._bindEvents=function(a,b,c,e,f,g){if(e.add(c).length===e.length){var h=[];b=d.map(b,function(b){var c=d.inArray(b,a);return c>-1?(h.push(a.splice(c,1)[0]),void 0):b}),h.length&&this._bind(c,h,function(a){var b=this.rendered?this.tooltip[0].offsetWidth>0:!1;(b?g:f).call(this,a)})}this._bind(c,a,f),this._bind(e,b,g)},v._assignInitialEvents=function(a){function b(a){return this.disabled||this.destroyed?A:(this.cache.event=l(a),this.cache.target=a?d(a.target):[c],clearTimeout(this.timers.show),this.timers.show=m.call(this,function(){this.render("object"==typeof a||e.show.ready)},e.show.delay),void 0)}var e=this.options,f=e.show.target,g=e.hide.target,h=e.show.event?d.trim(""+e.show.event).split(" "):[],i=e.hide.event?d.trim(""+e.hide.event).split(" "):[];/mouse(over|enter)/i.test(e.show.event)&&!/mouse(out|leave)/i.test(e.hide.event)&&i.push("mouseleave"),this._bind(f,"mousemove",function(a){this._storeMouse(a),this.cache.onTarget=z}),this._bindEvents(h,i,f,g,b,function(){clearTimeout(this.timers.show)}),(e.show.ready||e.prerender)&&b.call(this,a)},v._assignEvents=function(){var c=this,e=this.options,f=e.position,g=this.tooltip,h=e.show.target,i=e.hide.target,j=f.container,k=f.viewport,l=d(b),m=(d(b.body),d(a)),r=e.show.event?d.trim(""+e.show.event).split(" "):[],s=e.hide.event?d.trim(""+e.hide.event).split(" "):[];d.each(e.events,function(a,b){c._bind(g,"toggle"===a?["tooltipshow","tooltiphide"]:["tooltip"+a],b,null,g)}),/mouse(out|leave)/i.test(e.hide.event)&&"window"===e.hide.leave&&this._bind(l,["mouseout","blur"],function(a){/select|option/.test(a.target.nodeName)||a.relatedTarget||this.hide(a)}),e.hide.fixed?i=i.add(g.addClass(Q)):/mouse(over|enter)/i.test(e.show.event)&&this._bind(i,"mouseleave",function(){clearTimeout(this.timers.show)}),(""+e.hide.event).indexOf("unfocus")>-1&&this._bind(j.closest("html"),["mousedown","touchstart"],function(a){var b=d(a.target),c=this.rendered&&!this.tooltip.hasClass(U)&&this.tooltip[0].offsetWidth>0,e=b.parents(O).filter(this.tooltip[0]).length>0;b[0]===this.target[0]||b[0]===this.tooltip[0]||e||this.target.has(b[0]).length||!c||this.hide(a)}),"number"==typeof e.hide.inactive&&(this._bind(h,"qtip-"+this.id+"-inactive",p),this._bind(i.add(g),u.inactiveEvents,p,"-inactive")),this._bindEvents(r,s,h,i,n,o),this._bind(h.add(g),"mousemove",function(a){if("number"==typeof e.hide.distance){var b=this.cache.origin||{},c=this.options.hide.distance,d=Math.abs;(d(a.pageX-b.pageX)>=c||d(a.pageY-b.pageY)>=c)&&this.hide(a)}this._storeMouse(a)}),"mouse"===f.target&&f.adjust.mouse&&(e.hide.event&&this._bind(h,["mouseenter","mouseleave"],function(a){this.cache.onTarget="mouseenter"===a.type}),this._bind(l,"mousemove",function(a){this.rendered&&this.cache.onTarget&&!this.tooltip.hasClass(U)&&this.tooltip[0].offsetWidth>0&&this.reposition(a)})),(f.adjust.resize||k.length)&&this._bind(d.event.special.resize?k:m,"resize",q),f.adjust.scroll&&this._bind(m.add(f.container),"scroll",q)},v._unassignEvents=function(){var c=[this.options.show.target[0],this.options.hide.target[0],this.rendered&&this.tooltip[0],this.options.position.container[0],this.options.position.viewport[0],this.options.position.container.closest("html")[0],a,b];this._unbind(d([]).pushStack(d.grep(c,function(a){return"object"==typeof a})))},u=d.fn.qtip=function(a,b,e){var f=(""+a).toLowerCase(),g=B,i=d.makeArray(arguments).slice(1),j=i[i.length-1],k=this[0]?d.data(this[0],K):B;return!arguments.length&&k||"api"===f?k:"string"==typeof a?(this.each(function(){var a=d.data(this,K);if(!a)return z;if(j&&j.timeStamp&&(a.cache.event=j),!b||"option"!==f&&"options"!==f)a[f]&&a[f].apply(a,i);else{if(e===c&&!d.isPlainObject(b))return g=a.get(b),A;a.set(b,e)}}),g!==B?g:this):"object"!=typeof a&&arguments.length?void 0:(k=h(d.extend(z,{},a)),this.each(function(a){var b,c;return c=d.isArray(k.id)?k.id[a]:k.id,c=!c||c===A||c.length<1||u.api[c]?u.nextid++:c,b=s(d(this),c,k),b===A?z:(u.api[c]=b,d.each(J,function(){"initialize"===this.initialize&&this(b)}),b._assignInitialEvents(j),void 0)}))},d.qtip=e,u.api={},d.each({attr:function(a,b){if(this.length){var c=this[0],e="title",f=d.data(c,"qtip");if(a===e&&f&&"object"==typeof f&&f.options.suppress)return arguments.length<2?d.attr(c,W):(f&&f.options.content.attr===e&&f.cache.attr&&f.set("content.text",b),this.attr(W,b))}return d.fn["attr"+V].apply(this,arguments)},clone:function(a){var b=(d([]),d.fn["clone"+V].apply(this,arguments));return a||b.filter("["+W+"]").attr("title",function(){return d.attr(this,W)}).removeAttr(W),b}},function(a,b){if(!b||d.fn[a+V])return z;var c=d.fn[a+V]=d.fn[a];d.fn[a]=function(){return b.apply(this,arguments)||c.apply(this,arguments)}}),d.ui||(d["cleanData"+V]=d.cleanData,d.cleanData=function(a){for(var b,c=0;(b=d(a[c])).length;c++)if(b.attr(L))try{b.triggerHandler("removeqtip")}catch(e){}d["cleanData"+V].apply(this,arguments)}),u.version="2.2.0",u.nextid=0,u.inactiveEvents=P,u.zindex=15e3,u.defaults={prerender:A,id:A,overwrite:z,suppress:z,content:{text:z,attr:"title",title:A,button:A},position:{my:"top left",at:"bottom right",target:A,container:A,viewport:A,adjust:{x:0,y:0,mouse:z,scroll:z,resize:z,method:"flipinvert flipinvert"},effect:function(a,b){d(this).animate(b,{duration:200,queue:A})}},show:{target:A,event:"mouseenter",effect:z,delay:90,solo:A,ready:A,autofocus:A},hide:{target:A,event:"mouseleave",effect:z,delay:0,fixed:A,inactive:A,leave:"window",distance:A},style:{classes:"",widget:A,width:A,height:A,def:z},events:{render:B,move:B,show:B,hide:B,toggle:B,visible:B,hidden:B,focus:B,blur:B}};var ab,bb,cb="qtip-modal",db="."+cb;bb=function(){function a(a){if(d.expr[":"].focusable)return d.expr[":"].focusable;var b,c,e,f=!isNaN(d.attr(a,"tabindex")),g=a.nodeName&&a.nodeName.toLowerCase();return"area"===g?(b=a.parentNode,c=b.name,a.href&&c&&"map"===b.nodeName.toLowerCase()?(e=d("img[usemap=#"+c+"]")[0],!!e&&e.is(":visible")):!1):/input|select|textarea|button|object/.test(g)?!a.disabled:"a"===g?a.href||f:f}function c(a){k.length<1&&a.length?a.not("body").blur():k.first().focus()}function e(a){if(i.is(":visible")){var b,e=d(a.target),h=f.tooltip,j=e.closest(O);b=j.length<1?A:parseInt(j[0].style.zIndex,10)>parseInt(h[0].style.zIndex,10),b||e.closest(O)[0]===h[0]||c(e),g=a.target===k[k.length-1]}}var f,g,h,i,j=this,k={};d.extend(j,{init:function(){return i=j.elem=d("<div />",{id:"qtip-overlay",html:"<div></div>",mousedown:function(){return A}}).hide(),d(b.body).bind("focusin"+db,e),d(b).bind("keydown"+db,function(a){f&&f.options.show.modal.escape&&27===a.keyCode&&f.hide(a)}),i.bind("click"+db,function(a){f&&f.options.show.modal.blur&&f.hide(a)}),j},update:function(b){f=b,k=b.options.show.modal.stealfocus!==A?b.tooltip.find("*").filter(function(){return a(this)}):[]},toggle:function(a,e,g){var k=(d(b.body),a.tooltip),l=a.options.show.modal,m=l.effect,n=e?"show":"hide",o=i.is(":visible"),p=d(db).filter(":visible:not(:animated)").not(k);return j.update(a),e&&l.stealfocus!==A&&c(d(":focus")),i.toggleClass("blurs",l.blur),e&&i.appendTo(b.body),i.is(":animated")&&o===e&&h!==A||!e&&p.length?j:(i.stop(z,A),d.isFunction(m)?m.call(i,e):m===A?i[n]():i.fadeTo(parseInt(g,10)||90,e?1:0,function(){e||i.hide()}),e||i.queue(function(a){i.css({left:"",top:""}),d(db).length||i.detach(),a()}),h=e,f.destroyed&&(f=B),j)}}),j.init()},bb=new bb,d.extend(t.prototype,{init:function(a){var b=a.tooltip;return this.options.on?(a.elements.overlay=bb.elem,b.addClass(cb).css("z-index",u.modal_zindex+d(db).length),a._bind(b,["tooltipshow","tooltiphide"],function(a,c,e){var f=a.originalEvent;if(a.target===b[0])if(f&&"tooltiphide"===a.type&&/mouse(leave|enter)/.test(f.type)&&d(f.relatedTarget).closest(bb.elem[0]).length)try{a.preventDefault()}catch(g){}else(!f||f&&"tooltipsolo"!==f.type)&&this.toggle(a,"tooltipshow"===a.type,e)},this._ns,this),a._bind(b,"tooltipfocus",function(a,c){if(!a.isDefaultPrevented()&&a.target===b[0]){var e=d(db),f=u.modal_zindex+e.length,g=parseInt(b[0].style.zIndex,10);bb.elem[0].style.zIndex=f-1,e.each(function(){this.style.zIndex>g&&(this.style.zIndex-=1)}),e.filter("."+S).qtip("blur",a.originalEvent),b.addClass(S)[0].style.zIndex=f,bb.update(c);try{a.preventDefault()}catch(h){}}},this._ns,this),a._bind(b,"tooltiphide",function(a){a.target===b[0]&&d(db).filter(":visible").not(b).last().qtip("focus",a)},this._ns,this),void 0):this},toggle:function(a,b,c){return a&&a.isDefaultPrevented()?this:(bb.toggle(this.qtip,!!b,c),void 0)},destroy:function(){this.qtip.tooltip.removeClass(cb),this.qtip._unbind(this.qtip.tooltip,this._ns),bb.toggle(this.qtip,A),delete this.qtip.elements.overlay}}),ab=J.modal=function(a){return new t(a,a.options.show.modal)},ab.sanitize=function(a){a.show&&("object"!=typeof a.show.modal?a.show.modal={on:!!a.show.modal}:"undefined"==typeof a.show.modal.on&&(a.show.modal.on=z))},u.modal_zindex=u.zindex-200,ab.initialize="render",x.modal={"^show.modal.(on|blur)$":function(){this.destroy(),this.init(),this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth>0)}},d.extend(z,u.defaults,{show:{modal:{on:A,effect:z,blur:z,stealfocus:z,escape:z}}})})}(window,document);
!function(){function n(n,t){return t>n?-1:n>t?1:n>=t?0:0/0}function t(n){return null===n?0/0:+n}function e(n){return!isNaN(n)}function r(n){return{left:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n(t[i],e)<0?r=i+1:u=i}return r},right:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n(t[i],e)>0?u=i:r=i+1}return r}}}function u(n){return n.length}function i(n){for(var t=1;n*t%1;)t*=10;return t}function o(n,t){for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}function a(){this._=Object.create(null)}function c(n){return(n+="")===la||n[0]===sa?sa+n:n}function l(n){return(n+="")[0]===sa?n.slice(1):n}function s(n){return c(n)in this._}function f(n){return(n=c(n))in this._&&delete this._[n]}function h(){var n=[];for(var t in this._)n.push(l(t));return n}function g(){var n=0;for(var t in this._)++n;return n}function p(){for(var n in this._)return!1;return!0}function v(){this._=Object.create(null)}function d(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function m(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,r=fa.length;r>e;++e){var u=fa[e]+t;if(u in n)return u}}function y(){}function x(){}function M(n){function t(){for(var t,r=e,u=-1,i=r.length;++u<i;)(t=r[u].on)&&t.apply(this,arguments);return n}var e=[],r=new a;return t.on=function(t,u){var i,o=r.get(t);return arguments.length<2?o&&o.on:(o&&(o.on=null,e=e.slice(0,i=e.indexOf(o)).concat(e.slice(i+1)),r.remove(t)),u&&e.push(r.set(t,{on:u})),n)},t}function _(){Bo.event.preventDefault()}function b(){for(var n,t=Bo.event;n=t.sourceEvent;)t=n;return t}function w(n){for(var t=new x,e=0,r=arguments.length;++e<r;)t[arguments[e]]=M(t);return t.of=function(e,r){return function(u){try{var i=u.sourceEvent=Bo.event;u.target=n,Bo.event=u,t[u.type].apply(e,r)}finally{Bo.event=i}}},t}function S(n){return ga(n,ya),n}function k(n){return"function"==typeof n?n:function(){return pa(n,this)}}function E(n){return"function"==typeof n?n:function(){return va(n,this)}}function A(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function u(){this.setAttribute(n,t)}function i(){this.setAttributeNS(n.space,n.local,t)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=Bo.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?a:o:n.local?i:u}function C(n){return n.trim().replace(/\s+/g," ")}function N(n){return new RegExp("(?:^|\\s+)"+Bo.requote(n)+"(?:\\s+|$)","g")}function z(n){return(n+"").trim().split(/^|\s+/)}function L(n,t){function e(){for(var e=-1;++e<u;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<u;)n[e](this,r)}n=z(n).map(T);var u=n.length;return"function"==typeof t?r:e}function T(n){var t=N(n);return function(e,r){if(u=e.classList)return r?u.add(n):u.remove(n);var u=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(u)||e.setAttribute("class",C(u+" "+n))):e.setAttribute("class",C(u.replace(t," ")))}}function q(n,t,e){function r(){this.style.removeProperty(n)}function u(){this.style.setProperty(n,t,e)}function i(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?i:u}function R(n,t){function e(){delete this[n]}function r(){this[n]=t}function u(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?u:r}function D(n){return"function"==typeof n?n:(n=Bo.ns.qualify(n)).local?function(){return this.ownerDocument.createElementNS(n.space,n.local)}:function(){return this.ownerDocument.createElementNS(this.namespaceURI,n)}}function P(n){return{__data__:n}}function U(n){return function(){return ma(this,n)}}function j(t){return arguments.length||(t=n),function(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}}function F(n,t){for(var e=0,r=n.length;r>e;e++)for(var u,i=n[e],o=0,a=i.length;a>o;o++)(u=i[o])&&t(u,o,e);return n}function H(n){return ga(n,Ma),n}function O(n){var t,e;return function(r,u,i){var o,a=n[i].update,c=a.length;for(i!=e&&(e=i,t=0),u>=t&&(t=u+1);!(o=a[t])&&++t<c;);return o}}function Y(){var n=this.__transition__;n&&++n.active}function I(n,t,e){function r(){var t=this[o];t&&(this.removeEventListener(n,t,t.$),delete this[o])}function u(){var u=c(t,Jo(arguments));r.call(this),this.addEventListener(n,this[o]=u,u.$=e),u._=t}function i(){var t,e=new RegExp("^__on([^.]+)"+Bo.requote(n)+"$");for(var r in this)if(t=r.match(e)){var u=this[r];this.removeEventListener(t[1],u,u.$),delete this[r]}}var o="__on"+n,a=n.indexOf("."),c=Z;a>0&&(n=n.slice(0,a));var l=ba.get(n);return l&&(n=l,c=V),a?t?u:r:t?y:i}function Z(n,t){return function(e){var r=Bo.event;Bo.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{Bo.event=r}}}function V(n,t){var e=Z(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function X(){var n=".dragsuppress-"+ ++Sa,t="click"+n,e=Bo.select(Qo).on("touchmove"+n,_).on("dragstart"+n,_).on("selectstart"+n,_);if(wa){var r=Ko.style,u=r[wa];r[wa]="none"}return function(i){function o(){e.on(t,null)}e.on(n,null),wa&&(r[wa]=u),i&&(e.on(t,function(){_(),o()},!0),setTimeout(o,0))}}function $(n,t){t.changedTouches&&(t=t.changedTouches[0]);var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();if(0>ka&&(Qo.scrollX||Qo.scrollY)){e=Bo.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var u=e[0][0].getScreenCTM();ka=!(u.f||u.e),e.remove()}return ka?(r.x=t.pageX,r.y=t.pageY):(r.x=t.clientX,r.y=t.clientY),r=r.matrixTransform(n.getScreenCTM().inverse()),[r.x,r.y]}var i=n.getBoundingClientRect();return[t.clientX-i.left-n.clientLeft,t.clientY-i.top-n.clientTop]}function B(){return Bo.event.changedTouches[0].identifier}function W(){return Bo.event.target}function J(){return Qo}function G(n){return n>0?1:0>n?-1:0}function K(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}function Q(n){return n>1?0:-1>n?Ea:Math.acos(n)}function nt(n){return n>1?Ca:-1>n?-Ca:Math.asin(n)}function tt(n){return((n=Math.exp(n))-1/n)/2}function et(n){return((n=Math.exp(n))+1/n)/2}function rt(n){return((n=Math.exp(2*n))-1)/(n+1)}function ut(n){return(n=Math.sin(n/2))*n}function it(){}function ot(n,t,e){return this instanceof ot?(this.h=+n,this.s=+t,void(this.l=+e)):arguments.length<2?n instanceof ot?new ot(n.h,n.s,n.l):Mt(""+n,_t,ot):new ot(n,t,e)}function at(n,t,e){function r(n){return n>360?n-=360:0>n&&(n+=360),60>n?i+(o-i)*n/60:180>n?o:240>n?i+(o-i)*(240-n)/60:i}function u(n){return Math.round(255*r(n))}var i,o;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:0>t?0:t>1?1:t,e=0>e?0:e>1?1:e,o=.5>=e?e*(1+t):e+t-e*t,i=2*e-o,new dt(u(n+120),u(n),u(n-120))}function ct(n,t,e){return this instanceof ct?(this.h=+n,this.c=+t,void(this.l=+e)):arguments.length<2?n instanceof ct?new ct(n.h,n.c,n.l):n instanceof st?ht(n.l,n.a,n.b):ht((n=bt((n=Bo.rgb(n)).r,n.g,n.b)).l,n.a,n.b):new ct(n,t,e)}function lt(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),new st(e,Math.cos(n*=La)*t,Math.sin(n)*t)}function st(n,t,e){return this instanceof st?(this.l=+n,this.a=+t,void(this.b=+e)):arguments.length<2?n instanceof st?new st(n.l,n.a,n.b):n instanceof ct?lt(n.h,n.c,n.l):bt((n=dt(n)).r,n.g,n.b):new st(n,t,e)}function ft(n,t,e){var r=(n+16)/116,u=r+t/500,i=r-e/200;return u=gt(u)*Ya,r=gt(r)*Ia,i=gt(i)*Za,new dt(vt(3.2404542*u-1.5371385*r-.4985314*i),vt(-.969266*u+1.8760108*r+.041556*i),vt(.0556434*u-.2040259*r+1.0572252*i))}function ht(n,t,e){return n>0?new ct(Math.atan2(e,t)*Ta,Math.sqrt(t*t+e*e),n):new ct(0/0,0/0,n)}function gt(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function pt(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function vt(n){return Math.round(255*(.00304>=n?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function dt(n,t,e){return this instanceof dt?(this.r=~~n,this.g=~~t,void(this.b=~~e)):arguments.length<2?n instanceof dt?new dt(n.r,n.g,n.b):Mt(""+n,dt,at):new dt(n,t,e)}function mt(n){return new dt(n>>16,255&n>>8,255&n)}function yt(n){return mt(n)+""}function xt(n){return 16>n?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function Mt(n,t,e){var r,u,i,o=0,a=0,c=0;if(r=/([a-z]+)\((.*)\)/i.exec(n))switch(u=r[2].split(","),r[1]){case"hsl":return e(parseFloat(u[0]),parseFloat(u[1])/100,parseFloat(u[2])/100);case"rgb":return t(St(u[0]),St(u[1]),St(u[2]))}return(i=$a.get(n))?t(i.r,i.g,i.b):(null==n||"#"!==n.charAt(0)||isNaN(i=parseInt(n.slice(1),16))||(4===n.length?(o=(3840&i)>>4,o=o>>4|o,a=240&i,a=a>>4|a,c=15&i,c=c<<4|c):7===n.length&&(o=(16711680&i)>>16,a=(65280&i)>>8,c=255&i)),t(o,a,c))}function _t(n,t,e){var r,u,i=Math.min(n/=255,t/=255,e/=255),o=Math.max(n,t,e),a=o-i,c=(o+i)/2;return a?(u=.5>c?a/(o+i):a/(2-o-i),r=n==o?(t-e)/a+(e>t?6:0):t==o?(e-n)/a+2:(n-t)/a+4,r*=60):(r=0/0,u=c>0&&1>c?0:r),new ot(r,u,c)}function bt(n,t,e){n=wt(n),t=wt(t),e=wt(e);var r=pt((.4124564*n+.3575761*t+.1804375*e)/Ya),u=pt((.2126729*n+.7151522*t+.072175*e)/Ia),i=pt((.0193339*n+.119192*t+.9503041*e)/Za);return st(116*u-16,500*(r-u),200*(u-i))}function wt(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function St(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function kt(n){return"function"==typeof n?n:function(){return n}}function Et(n){return n}function At(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),Ct(t,e,n,r)}}function Ct(n,t,e,r){function u(){var n,t=c.status;if(!t&&zt(c)||t>=200&&300>t||304===t){try{n=e.call(i,c)}catch(r){return o.error.call(i,r),void 0}o.load.call(i,n)}else o.error.call(i,c)}var i={},o=Bo.dispatch("beforesend","progress","load","error"),a={},c=new XMLHttpRequest,l=null;return!Qo.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(n)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=u:c.onreadystatechange=function(){c.readyState>3&&u()},c.onprogress=function(n){var t=Bo.event;Bo.event=n;try{o.progress.call(i,c)}finally{Bo.event=t}},i.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?a[n]:(null==t?delete a[n]:a[n]=t+"",i)},i.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",i):t},i.responseType=function(n){return arguments.length?(l=n,i):l},i.response=function(n){return e=n,i},["get","post"].forEach(function(n){i[n]=function(){return i.send.apply(i,[n].concat(Jo(arguments)))}}),i.send=function(e,r,u){if(2===arguments.length&&"function"==typeof r&&(u=r,r=null),c.open(e,n,!0),null==t||"accept"in a||(a.accept=t+",*/*"),c.setRequestHeader)for(var s in a)c.setRequestHeader(s,a[s]);return null!=t&&c.overrideMimeType&&c.overrideMimeType(t),null!=l&&(c.responseType=l),null!=u&&i.on("error",u).on("load",function(n){u(null,n)}),o.beforesend.call(i,c),c.send(null==r?null:r),i},i.abort=function(){return c.abort(),i},Bo.rebind(i,o,"on"),null==r?i:i.get(Nt(r))}function Nt(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function zt(n){var t=n.responseType;return t&&"text"!==t?n.response:n.responseText}function Lt(){var n=Tt(),t=qt()-n;t>24?(isFinite(t)&&(clearTimeout(Ga),Ga=setTimeout(Lt,t)),Ja=0):(Ja=1,Qa(Lt))}function Tt(){var n=Date.now();for(Ka=Ba;Ka;)n>=Ka.t&&(Ka.f=Ka.c(n-Ka.t)),Ka=Ka.n;return n}function qt(){for(var n,t=Ba,e=1/0;t;)t.f?t=n?n.n=t.n:Ba=t.n:(t.t<e&&(e=t.t),t=(n=t).n);return Wa=n,e}function Rt(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function Dt(n,t){var e=Math.pow(10,3*ca(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function Pt(n){var t=n.decimal,e=n.thousands,r=n.grouping,u=n.currency,i=r&&e?function(n,t){for(var u=n.length,i=[],o=0,a=r[0],c=0;u>0&&a>0&&(c+a+1>t&&(a=Math.max(1,t-c)),i.push(n.substring(u-=a,u+a)),!((c+=a+1)>t));)a=r[o=(o+1)%r.length];return i.reverse().join(e)}:Et;return function(n){var e=tc.exec(n),r=e[1]||" ",o=e[2]||">",a=e[3]||"-",c=e[4]||"",l=e[5],s=+e[6],f=e[7],h=e[8],g=e[9],p=1,v="",d="",m=!1,y=!0;switch(h&&(h=+h.substring(1)),(l||"0"===r&&"="===o)&&(l=r="0",o="="),g){case"n":f=!0,g="g";break;case"%":p=100,d="%",g="f";break;case"p":p=100,d="%",g="r";break;case"b":case"o":case"x":case"X":"#"===c&&(v="0"+g.toLowerCase());case"c":y=!1;case"d":m=!0,h=0;break;case"s":p=-1,g="r"}"$"===c&&(v=u[0],d=u[1]),"r"!=g||h||(g="g"),null!=h&&("g"==g?h=Math.max(1,Math.min(21,h)):("e"==g||"f"==g)&&(h=Math.max(0,Math.min(20,h)))),g=ec.get(g)||Ut;var x=l&&f;return function(n){var e=d;if(m&&n%1)return"";var u=0>n||0===n&&0>1/n?(n=-n,"-"):"-"===a?"":a;if(0>p){var c=Bo.formatPrefix(n,h);n=c.scale(n),e=c.symbol+d}else n*=p;n=g(n,h);var M,_,b=n.lastIndexOf(".");if(0>b){var w=y?n.lastIndexOf("e"):-1;0>w?(M=n,_=""):(M=n.substring(0,w),_=n.substring(w))}else M=n.substring(0,b),_=t+n.substring(b+1);!l&&f&&(M=i(M,1/0));var S=v.length+M.length+_.length+(x?0:u.length),k=s>S?new Array(S=s-S+1).join(r):"";return x&&(M=i(k+M,k.length?s-_.length:1/0)),u+=v,n=M+_,("<"===o?u+n+k:">"===o?k+u+n:"^"===o?k.substring(0,S>>=1)+u+n+k.substring(S):u+(x?n:k+n))+e}}}function Ut(n){return n+""}function jt(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Ft(n,t,e){function r(t){var e=n(t),r=i(e,1);return r-t>t-e?e:r}function u(e){return t(e=n(new uc(e-1)),1),e}function i(n,e){return t(n=new uc(+n),e),n}function o(n,r,i){var o=u(n),a=[];if(i>1)for(;r>o;)e(o)%i||a.push(new Date(+o)),t(o,1);else for(;r>o;)a.push(new Date(+o)),t(o,1);return a}function a(n,t,e){try{uc=jt;var r=new jt;return r._=n,o(r,t,e)}finally{uc=Date}}n.floor=n,n.round=r,n.ceil=u,n.offset=i,n.range=o;var c=n.utc=Ht(n);return c.floor=c,c.round=Ht(r),c.ceil=Ht(u),c.offset=Ht(i),c.range=a,n}function Ht(n){return function(t,e){try{uc=jt;var r=new jt;return r._=t,n(r,e)._}finally{uc=Date}}}function Ot(n){function t(n){function t(t){for(var e,u,i,o=[],a=-1,c=0;++a<r;)37===n.charCodeAt(a)&&(o.push(n.slice(c,a)),null!=(u=oc[e=n.charAt(++a)])&&(e=n.charAt(++a)),(i=C[e])&&(e=i(t,null==u?"e"===e?" ":"0":u)),o.push(e),c=a+1);return o.push(n.slice(c,a)),o.join("")}var r=n.length;return t.parse=function(t){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},u=e(r,n,t,0);if(u!=t.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var i=null!=r.Z&&uc!==jt,o=new(i?jt:uc);return"j"in r?o.setFullYear(r.y,0,r.j):"w"in r&&("W"in r||"U"in r)?(o.setFullYear(r.y,0,1),o.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(o.getDay()+5)%7:r.w+7*r.U-(o.getDay()+6)%7)):o.setFullYear(r.y,r.m,r.d),o.setHours(r.H+(0|r.Z/100),r.M+r.Z%100,r.S,r.L),i?o._:o},t.toString=function(){return n},t}function e(n,t,e,r){for(var u,i,o,a=0,c=t.length,l=e.length;c>a;){if(r>=l)return-1;if(u=t.charCodeAt(a++),37===u){if(o=t.charAt(a++),i=N[o in oc?t.charAt(a++):o],!i||(r=i(n,e,r))<0)return-1}else if(u!=e.charCodeAt(r++))return-1}return r}function r(n,t,e){b.lastIndex=0;var r=b.exec(t.slice(e));return r?(n.w=w.get(r[0].toLowerCase()),e+r[0].length):-1}function u(n,t,e){M.lastIndex=0;var r=M.exec(t.slice(e));return r?(n.w=_.get(r[0].toLowerCase()),e+r[0].length):-1}function i(n,t,e){E.lastIndex=0;var r=E.exec(t.slice(e));return r?(n.m=A.get(r[0].toLowerCase()),e+r[0].length):-1}function o(n,t,e){S.lastIndex=0;var r=S.exec(t.slice(e));return r?(n.m=k.get(r[0].toLowerCase()),e+r[0].length):-1}function a(n,t,r){return e(n,C.c.toString(),t,r)}function c(n,t,r){return e(n,C.x.toString(),t,r)}function l(n,t,r){return e(n,C.X.toString(),t,r)}function s(n,t,e){var r=x.get(t.slice(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}var f=n.dateTime,h=n.date,g=n.time,p=n.periods,v=n.days,d=n.shortDays,m=n.months,y=n.shortMonths;t.utc=function(n){function e(n){try{uc=jt;var t=new uc;return t._=n,r(t)}finally{uc=Date}}var r=t(n);return e.parse=function(n){try{uc=jt;var t=r.parse(n);return t&&t._}finally{uc=Date}},e.toString=r.toString,e},t.multi=t.utc.multi=ae;var x=Bo.map(),M=It(v),_=Zt(v),b=It(d),w=Zt(d),S=It(m),k=Zt(m),E=It(y),A=Zt(y);p.forEach(function(n,t){x.set(n.toLowerCase(),t)});var C={a:function(n){return d[n.getDay()]},A:function(n){return v[n.getDay()]},b:function(n){return y[n.getMonth()]},B:function(n){return m[n.getMonth()]},c:t(f),d:function(n,t){return Yt(n.getDate(),t,2)},e:function(n,t){return Yt(n.getDate(),t,2)},H:function(n,t){return Yt(n.getHours(),t,2)},I:function(n,t){return Yt(n.getHours()%12||12,t,2)},j:function(n,t){return Yt(1+rc.dayOfYear(n),t,3)},L:function(n,t){return Yt(n.getMilliseconds(),t,3)},m:function(n,t){return Yt(n.getMonth()+1,t,2)},M:function(n,t){return Yt(n.getMinutes(),t,2)},p:function(n){return p[+(n.getHours()>=12)]},S:function(n,t){return Yt(n.getSeconds(),t,2)},U:function(n,t){return Yt(rc.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return Yt(rc.mondayOfYear(n),t,2)},x:t(h),X:t(g),y:function(n,t){return Yt(n.getFullYear()%100,t,2)},Y:function(n,t){return Yt(n.getFullYear()%1e4,t,4)},Z:ie,"%":function(){return"%"}},N={a:r,A:u,b:i,B:o,c:a,d:Qt,e:Qt,H:te,I:te,j:ne,L:ue,m:Kt,M:ee,p:s,S:re,U:Xt,w:Vt,W:$t,x:c,X:l,y:Wt,Y:Bt,Z:Jt,"%":oe};return t}function Yt(n,t,e){var r=0>n?"-":"",u=(r?-n:n)+"",i=u.length;return r+(e>i?new Array(e-i+1).join(t)+u:u)}function It(n){return new RegExp("^(?:"+n.map(Bo.requote).join("|")+")","i")}function Zt(n){for(var t=new a,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function Vt(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function Xt(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e));return r?(n.U=+r[0],e+r[0].length):-1}function $t(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e));return r?(n.W=+r[0],e+r[0].length):-1}function Bt(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function Wt(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+2));return r?(n.y=Gt(+r[0]),e+r[0].length):-1}function Jt(n,t,e){return/^[+-]\d{4}$/.test(t=t.slice(e,e+5))?(n.Z=-t,e+5):-1}function Gt(n){return n+(n>68?1900:2e3)}function Kt(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function Qt(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function ne(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function te(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function ee(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function re(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function ue(n,t,e){ac.lastIndex=0;var r=ac.exec(t.slice(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function ie(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=0|ca(t)/60,u=ca(t)%60;return e+Yt(r,"0",2)+Yt(u,"0",2)}function oe(n,t,e){cc.lastIndex=0;var r=cc.exec(t.slice(e,e+1));return r?e+r[0].length:-1}function ae(n){for(var t=n.length,e=-1;++e<t;)n[e][0]=this(n[e][0]);return function(t){for(var e=0,r=n[e];!r[1](t);)r=n[++e];return r[0](t)}}function ce(){}function le(n,t,e){var r=e.s=n+t,u=r-n,i=r-u;e.t=n-i+(t-u)}function se(n,t){n&&hc.hasOwnProperty(n.type)&&hc[n.type](n,t)}function fe(n,t,e){var r,u=-1,i=n.length-e;for(t.lineStart();++u<i;)r=n[u],t.point(r[0],r[1],r[2]);t.lineEnd()}function he(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)fe(n[e],t,1);t.polygonEnd()}function ge(){function n(n,t){n*=La,t=t*La/2+Ea/4;var e=n-r,o=e>=0?1:-1,a=o*e,c=Math.cos(t),l=Math.sin(t),s=i*l,f=u*c+s*Math.cos(a),h=s*o*Math.sin(a);pc.add(Math.atan2(h,f)),r=n,u=c,i=l}var t,e,r,u,i;vc.point=function(o,a){vc.point=n,r=(t=o)*La,u=Math.cos(a=(e=a)*La/2+Ea/4),i=Math.sin(a)},vc.lineEnd=function(){n(t,e)}}function pe(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function ve(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function de(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function me(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function ye(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function xe(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function Me(n){return[Math.atan2(n[1],n[0]),nt(n[2])]}function _e(n,t){return ca(n[0]-t[0])<Na&&ca(n[1]-t[1])<Na}function be(n,t){n*=La;var e=Math.cos(t*=La);we(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function we(n,t,e){++dc,yc+=(n-yc)/dc,xc+=(t-xc)/dc,Mc+=(e-Mc)/dc}function Se(){function n(n,u){n*=La;var i=Math.cos(u*=La),o=i*Math.cos(n),a=i*Math.sin(n),c=Math.sin(u),l=Math.atan2(Math.sqrt((l=e*c-r*a)*l+(l=r*o-t*c)*l+(l=t*a-e*o)*l),t*o+e*a+r*c);mc+=l,_c+=l*(t+(t=o)),bc+=l*(e+(e=a)),wc+=l*(r+(r=c)),we(t,e,r)}var t,e,r;Ac.point=function(u,i){u*=La;var o=Math.cos(i*=La);t=o*Math.cos(u),e=o*Math.sin(u),r=Math.sin(i),Ac.point=n,we(t,e,r)}}function ke(){Ac.point=be}function Ee(){function n(n,t){n*=La;var e=Math.cos(t*=La),o=e*Math.cos(n),a=e*Math.sin(n),c=Math.sin(t),l=u*c-i*a,s=i*o-r*c,f=r*a-u*o,h=Math.sqrt(l*l+s*s+f*f),g=r*o+u*a+i*c,p=h&&-Q(g)/h,v=Math.atan2(h,g);Sc+=p*l,kc+=p*s,Ec+=p*f,mc+=v,_c+=v*(r+(r=o)),bc+=v*(u+(u=a)),wc+=v*(i+(i=c)),we(r,u,i)}var t,e,r,u,i;Ac.point=function(o,a){t=o,e=a,Ac.point=n,o*=La;var c=Math.cos(a*=La);r=c*Math.cos(o),u=c*Math.sin(o),i=Math.sin(a),we(r,u,i)},Ac.lineEnd=function(){n(t,e),Ac.lineEnd=ke,Ac.point=be}}function Ae(){return!0}function Ce(n,t,e,r,u){var i=[],o=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(_e(e,r)){u.lineStart();for(var a=0;t>a;++a)u.point((e=n[a])[0],e[1]);return u.lineEnd(),void 0}var c=new ze(e,n,null,!0),l=new ze(e,null,c,!1);c.o=l,i.push(c),o.push(l),c=new ze(r,n,null,!1),l=new ze(r,null,c,!0),c.o=l,i.push(c),o.push(l)}}),o.sort(t),Ne(i),Ne(o),i.length){for(var a=0,c=e,l=o.length;l>a;++a)o[a].e=c=!c;for(var s,f,h=i[0];;){for(var g=h,p=!0;g.v;)if((g=g.n)===h)return;s=g.z,u.lineStart();do{if(g.v=g.o.v=!0,g.e){if(p)for(var a=0,l=s.length;l>a;++a)u.point((f=s[a])[0],f[1]);else r(g.x,g.n.x,1,u);g=g.n}else{if(p){s=g.p.z;for(var a=s.length-1;a>=0;--a)u.point((f=s[a])[0],f[1])}else r(g.x,g.p.x,-1,u);g=g.p}g=g.o,s=g.z,p=!p}while(!g.v);u.lineEnd()}}}function Ne(n){if(t=n.length){for(var t,e,r=0,u=n[0];++r<t;)u.n=e=n[r],e.p=u,u=e;u.n=e=n[0],e.p=u}}function ze(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Le(n,t,e,r){return function(u,i){function o(t,e){var r=u(t,e);n(t=r[0],e=r[1])&&i.point(t,e)}function a(n,t){var e=u(n,t);d.point(e[0],e[1])}function c(){y.point=a,d.lineStart()}function l(){y.point=o,d.lineEnd()}function s(n,t){v.push([n,t]);var e=u(n,t);M.point(e[0],e[1])}function f(){M.lineStart(),v=[]}function h(){s(v[0][0],v[0][1]),M.lineEnd();var n,t=M.clean(),e=x.buffer(),r=e.length;if(v.pop(),p.push(v),v=null,r)if(1&t){n=e[0];var u,r=n.length-1,o=-1;if(r>0){for(_||(i.polygonStart(),_=!0),i.lineStart();++o<r;)i.point((u=n[o])[0],u[1]);i.lineEnd()}}else r>1&&2&t&&e.push(e.pop().concat(e.shift())),g.push(e.filter(Te))}var g,p,v,d=t(i),m=u.invert(r[0],r[1]),y={point:o,lineStart:c,lineEnd:l,polygonStart:function(){y.point=s,y.lineStart=f,y.lineEnd=h,g=[],p=[]},polygonEnd:function(){y.point=o,y.lineStart=c,y.lineEnd=l,g=Bo.merge(g);var n=je(m,p);g.length?(_||(i.polygonStart(),_=!0),Ce(g,Re,n,e,i)):n&&(_||(i.polygonStart(),_=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),_&&(i.polygonEnd(),_=!1),g=p=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}},x=qe(),M=t(x),_=!1;return y}}function Te(n){return n.length>1}function qe(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:y,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function Re(n,t){return((n=n.x)[0]<0?n[1]-Ca-Na:Ca-n[1])-((t=t.x)[0]<0?t[1]-Ca-Na:Ca-t[1])}function De(n){var t,e=0/0,r=0/0,u=0/0;return{lineStart:function(){n.lineStart(),t=1},point:function(i,o){var a=i>0?Ea:-Ea,c=ca(i-e);ca(c-Ea)<Na?(n.point(e,r=(r+o)/2>0?Ca:-Ca),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(a,r),n.point(i,r),t=0):u!==a&&c>=Ea&&(ca(e-u)<Na&&(e-=u*Na),ca(i-a)<Na&&(i-=a*Na),r=Pe(e,r,i,o),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(a,r),t=0),n.point(e=i,r=o),u=a},lineEnd:function(){n.lineEnd(),e=r=0/0},clean:function(){return 2-t}}}function Pe(n,t,e,r){var u,i,o=Math.sin(n-e);return ca(o)>Na?Math.atan((Math.sin(t)*(i=Math.cos(r))*Math.sin(e)-Math.sin(r)*(u=Math.cos(t))*Math.sin(n))/(u*i*o)):(t+r)/2}function Ue(n,t,e,r){var u;if(null==n)u=e*Ca,r.point(-Ea,u),r.point(0,u),r.point(Ea,u),r.point(Ea,0),r.point(Ea,-u),r.point(0,-u),r.point(-Ea,-u),r.point(-Ea,0),r.point(-Ea,u);else if(ca(n[0]-t[0])>Na){var i=n[0]<t[0]?Ea:-Ea;u=e*i/2,r.point(-i,u),r.point(0,u),r.point(i,u)}else r.point(t[0],t[1])}function je(n,t){var e=n[0],r=n[1],u=[Math.sin(e),-Math.cos(e),0],i=0,o=0;pc.reset();for(var a=0,c=t.length;c>a;++a){var l=t[a],s=l.length;if(s)for(var f=l[0],h=f[0],g=f[1]/2+Ea/4,p=Math.sin(g),v=Math.cos(g),d=1;;){d===s&&(d=0),n=l[d];var m=n[0],y=n[1]/2+Ea/4,x=Math.sin(y),M=Math.cos(y),_=m-h,b=_>=0?1:-1,w=b*_,S=w>Ea,k=p*x;if(pc.add(Math.atan2(k*b*Math.sin(w),v*M+k*Math.cos(w))),i+=S?_+b*Aa:_,S^h>=e^m>=e){var E=de(pe(f),pe(n));xe(E);var A=de(u,E);xe(A);var C=(S^_>=0?-1:1)*nt(A[2]);(r>C||r===C&&(E[0]||E[1]))&&(o+=S^_>=0?1:-1)}if(!d++)break;h=m,p=x,v=M,f=n}}return(-Na>i||Na>i&&0>pc)^1&o}function Fe(n){function t(n,t){return Math.cos(n)*Math.cos(t)>i}function e(n){var e,i,c,l,s;return{lineStart:function(){l=c=!1,s=1},point:function(f,h){var g,p=[f,h],v=t(f,h),d=o?v?0:u(f,h):v?u(f+(0>f?Ea:-Ea),h):0;if(!e&&(l=c=v)&&n.lineStart(),v!==c&&(g=r(e,p),(_e(e,g)||_e(p,g))&&(p[0]+=Na,p[1]+=Na,v=t(p[0],p[1]))),v!==c)s=0,v?(n.lineStart(),g=r(p,e),n.point(g[0],g[1])):(g=r(e,p),n.point(g[0],g[1]),n.lineEnd()),e=g;else if(a&&e&&o^v){var m;d&i||!(m=r(p,e,!0))||(s=0,o?(n.lineStart(),n.point(m[0][0],m[0][1]),n.point(m[1][0],m[1][1]),n.lineEnd()):(n.point(m[1][0],m[1][1]),n.lineEnd(),n.lineStart(),n.point(m[0][0],m[0][1])))}!v||e&&_e(e,p)||n.point(p[0],p[1]),e=p,c=v,i=d},lineEnd:function(){c&&n.lineEnd(),e=null},clean:function(){return s|(l&&c)<<1}}}function r(n,t,e){var r=pe(n),u=pe(t),o=[1,0,0],a=de(r,u),c=ve(a,a),l=a[0],s=c-l*l;if(!s)return!e&&n;var f=i*c/s,h=-i*l/s,g=de(o,a),p=ye(o,f),v=ye(a,h);me(p,v);var d=g,m=ve(p,d),y=ve(d,d),x=m*m-y*(ve(p,p)-1);if(!(0>x)){var M=Math.sqrt(x),_=ye(d,(-m-M)/y);if(me(_,p),_=Me(_),!e)return _;var b,w=n[0],S=t[0],k=n[1],E=t[1];w>S&&(b=w,w=S,S=b);var A=S-w,C=ca(A-Ea)<Na,N=C||Na>A;if(!C&&k>E&&(b=k,k=E,E=b),N?C?k+E>0^_[1]<(ca(_[0]-w)<Na?k:E):k<=_[1]&&_[1]<=E:A>Ea^(w<=_[0]&&_[0]<=S)){var z=ye(d,(-m+M)/y);return me(z,p),[_,Me(z)]}}}function u(t,e){var r=o?n:Ea-n,u=0;return-r>t?u|=1:t>r&&(u|=2),-r>e?u|=4:e>r&&(u|=8),u}var i=Math.cos(n),o=i>0,a=ca(i)>Na,c=gr(n,6*La);return Le(t,e,c,o?[0,-n]:[-Ea,n-Ea])}function He(n,t,e,r){return function(u){var i,o=u.a,a=u.b,c=o.x,l=o.y,s=a.x,f=a.y,h=0,g=1,p=s-c,v=f-l;if(i=n-c,p||!(i>0)){if(i/=p,0>p){if(h>i)return;g>i&&(g=i)}else if(p>0){if(i>g)return;i>h&&(h=i)}if(i=e-c,p||!(0>i)){if(i/=p,0>p){if(i>g)return;i>h&&(h=i)}else if(p>0){if(h>i)return;g>i&&(g=i)}if(i=t-l,v||!(i>0)){if(i/=v,0>v){if(h>i)return;g>i&&(g=i)}else if(v>0){if(i>g)return;i>h&&(h=i)}if(i=r-l,v||!(0>i)){if(i/=v,0>v){if(i>g)return;i>h&&(h=i)}else if(v>0){if(h>i)return;g>i&&(g=i)}return h>0&&(u.a={x:c+h*p,y:l+h*v}),1>g&&(u.b={x:c+g*p,y:l+g*v}),u}}}}}}function Oe(n,t,e,r){function u(r,u){return ca(r[0]-n)<Na?u>0?0:3:ca(r[0]-e)<Na?u>0?2:1:ca(r[1]-t)<Na?u>0?1:0:u>0?3:2}function i(n,t){return o(n.x,t.x)}function o(n,t){var e=u(n,1),r=u(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(a){function c(n){for(var t=0,e=d.length,r=n[1],u=0;e>u;++u)for(var i,o=1,a=d[u],c=a.length,l=a[0];c>o;++o)i=a[o],l[1]<=r?i[1]>r&&K(l,i,n)>0&&++t:i[1]<=r&&K(l,i,n)<0&&--t,l=i;return 0!==t}function l(i,a,c,l){var s=0,f=0;if(null==i||(s=u(i,c))!==(f=u(a,c))||o(i,a)<0^c>0){do l.point(0===s||3===s?n:e,s>1?r:t);while((s=(s+c+4)%4)!==f)}else l.point(a[0],a[1])}function s(u,i){return u>=n&&e>=u&&i>=t&&r>=i}function f(n,t){s(n,t)&&a.point(n,t)}function h(){N.point=p,d&&d.push(m=[]),S=!0,w=!1,_=b=0/0}function g(){v&&(p(y,x),M&&w&&A.rejoin(),v.push(A.buffer())),N.point=f,w&&a.lineEnd()}function p(n,t){n=Math.max(-Nc,Math.min(Nc,n)),t=Math.max(-Nc,Math.min(Nc,t));var e=s(n,t);if(d&&m.push([n,t]),S)y=n,x=t,M=e,S=!1,e&&(a.lineStart(),a.point(n,t));else if(e&&w)a.point(n,t);else{var r={a:{x:_,y:b},b:{x:n,y:t}};C(r)?(w||(a.lineStart(),a.point(r.a.x,r.a.y)),a.point(r.b.x,r.b.y),e||a.lineEnd(),k=!1):e&&(a.lineStart(),a.point(n,t),k=!1)}_=n,b=t,w=e}var v,d,m,y,x,M,_,b,w,S,k,E=a,A=qe(),C=He(n,t,e,r),N={point:f,lineStart:h,lineEnd:g,polygonStart:function(){a=A,v=[],d=[],k=!0},polygonEnd:function(){a=E,v=Bo.merge(v);var t=c([n,r]),e=k&&t,u=v.length;(e||u)&&(a.polygonStart(),e&&(a.lineStart(),l(null,null,1,a),a.lineEnd()),u&&Ce(v,i,t,l,a),a.polygonEnd()),v=d=m=null}};return N}}function Ye(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function Ie(n){var t=0,e=Ea/3,r=ir(n),u=r(t,e);return u.parallels=function(n){return arguments.length?r(t=n[0]*Ea/180,e=n[1]*Ea/180):[180*(t/Ea),180*(e/Ea)]},u}function Ze(n,t){function e(n,t){var e=Math.sqrt(i-2*u*Math.sin(t))/u;return[e*Math.sin(n*=u),o-e*Math.cos(n)]}var r=Math.sin(n),u=(r+Math.sin(t))/2,i=1+r*(2*u-r),o=Math.sqrt(i)/u;return e.invert=function(n,t){var e=o-t;return[Math.atan2(n,e)/u,nt((i-(n*n+e*e)*u*u)/(2*u))]},e}function Ve(){function n(n,t){Lc+=u*n-r*t,r=n,u=t}var t,e,r,u;Pc.point=function(i,o){Pc.point=n,t=r=i,e=u=o},Pc.lineEnd=function(){n(t,e)}}function Xe(n,t){Tc>n&&(Tc=n),n>Rc&&(Rc=n),qc>t&&(qc=t),t>Dc&&(Dc=t)}function $e(){function n(n,t){o.push("M",n,",",t,i)}function t(n,t){o.push("M",n,",",t),a.point=e}function e(n,t){o.push("L",n,",",t)}function r(){a.point=n}function u(){o.push("Z")}var i=Be(4.5),o=[],a={point:n,lineStart:function(){a.point=t},lineEnd:r,polygonStart:function(){a.lineEnd=u},polygonEnd:function(){a.lineEnd=r,a.point=n},pointRadius:function(n){return i=Be(n),a},result:function(){if(o.length){var n=o.join("");return o=[],n}}};return a}function Be(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function We(n,t){yc+=n,xc+=t,++Mc}function Je(){function n(n,r){var u=n-t,i=r-e,o=Math.sqrt(u*u+i*i);_c+=o*(t+n)/2,bc+=o*(e+r)/2,wc+=o,We(t=n,e=r)}var t,e;jc.point=function(r,u){jc.point=n,We(t=r,e=u)}}function Ge(){jc.point=We}function Ke(){function n(n,t){var e=n-r,i=t-u,o=Math.sqrt(e*e+i*i);_c+=o*(r+n)/2,bc+=o*(u+t)/2,wc+=o,o=u*n-r*t,Sc+=o*(r+n),kc+=o*(u+t),Ec+=3*o,We(r=n,u=t)}var t,e,r,u;jc.point=function(i,o){jc.point=n,We(t=r=i,e=u=o)},jc.lineEnd=function(){n(t,e)}}function Qe(n){function t(t,e){n.moveTo(t,e),n.arc(t,e,o,0,Aa)}function e(t,e){n.moveTo(t,e),a.point=r}function r(t,e){n.lineTo(t,e)}function u(){a.point=t}function i(){n.closePath()}var o=4.5,a={point:t,lineStart:function(){a.point=e},lineEnd:u,polygonStart:function(){a.lineEnd=i},polygonEnd:function(){a.lineEnd=u,a.point=t},pointRadius:function(n){return o=n,a},result:y};return a}function nr(n){function t(n){return(a?r:e)(n)}function e(t){return rr(t,function(e,r){e=n(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e=n(e,r),t.point(e[0],e[1])}function r(){x=0/0,S.point=i,t.lineStart()}function i(e,r){var i=pe([e,r]),o=n(e,r);u(x,M,y,_,b,w,x=o[0],M=o[1],y=e,_=i[0],b=i[1],w=i[2],a,t),t.point(x,M)}function o(){S.point=e,t.lineEnd()}function c(){r(),S.point=l,S.lineEnd=s}function l(n,t){i(f=n,h=t),g=x,p=M,v=_,d=b,m=w,S.point=i}function s(){u(x,M,y,_,b,w,g,p,f,v,d,m,a,t),S.lineEnd=o,o()}var f,h,g,p,v,d,m,y,x,M,_,b,w,S={point:e,lineStart:r,lineEnd:o,polygonStart:function(){t.polygonStart(),S.lineStart=c},polygonEnd:function(){t.polygonEnd(),S.lineStart=r}};return S}function u(t,e,r,a,c,l,s,f,h,g,p,v,d,m){var y=s-t,x=f-e,M=y*y+x*x;if(M>4*i&&d--){var _=a+g,b=c+p,w=l+v,S=Math.sqrt(_*_+b*b+w*w),k=Math.asin(w/=S),E=ca(ca(w)-1)<Na||ca(r-h)<Na?(r+h)/2:Math.atan2(b,_),A=n(E,k),C=A[0],N=A[1],z=C-t,L=N-e,T=x*z-y*L;
(T*T/M>i||ca((y*z+x*L)/M-.5)>.3||o>a*g+c*p+l*v)&&(u(t,e,r,a,c,l,C,N,E,_/=S,b/=S,w,d,m),m.point(C,N),u(C,N,E,_,b,w,s,f,h,g,p,v,d,m))}}var i=.5,o=Math.cos(30*La),a=16;return t.precision=function(n){return arguments.length?(a=(i=n*n)>0&&16,t):Math.sqrt(i)},t}function tr(n){var t=nr(function(t,e){return n([t*Ta,e*Ta])});return function(n){return or(t(n))}}function er(n){this.stream=n}function rr(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function ur(n){return ir(function(){return n})()}function ir(n){function t(n){return n=a(n[0]*La,n[1]*La),[n[0]*h+c,l-n[1]*h]}function e(n){return n=a.invert((n[0]-c)/h,(l-n[1])/h),n&&[n[0]*Ta,n[1]*Ta]}function r(){a=Ye(o=lr(m,y,x),i);var n=i(v,d);return c=g-n[0]*h,l=p+n[1]*h,u()}function u(){return s&&(s.valid=!1,s=null),t}var i,o,a,c,l,s,f=nr(function(n,t){return n=i(n,t),[n[0]*h+c,l-n[1]*h]}),h=150,g=480,p=250,v=0,d=0,m=0,y=0,x=0,M=Cc,_=Et,b=null,w=null;return t.stream=function(n){return s&&(s.valid=!1),s=or(M(o,f(_(n)))),s.valid=!0,s},t.clipAngle=function(n){return arguments.length?(M=null==n?(b=n,Cc):Fe((b=+n)*La),u()):b},t.clipExtent=function(n){return arguments.length?(w=n,_=n?Oe(n[0][0],n[0][1],n[1][0],n[1][1]):Et,u()):w},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(g=+n[0],p=+n[1],r()):[g,p]},t.center=function(n){return arguments.length?(v=n[0]%360*La,d=n[1]%360*La,r()):[v*Ta,d*Ta]},t.rotate=function(n){return arguments.length?(m=n[0]%360*La,y=n[1]%360*La,x=n.length>2?n[2]%360*La:0,r()):[m*Ta,y*Ta,x*Ta]},Bo.rebind(t,f,"precision"),function(){return i=n.apply(this,arguments),t.invert=i.invert&&e,r()}}function or(n){return rr(n,function(t,e){n.point(t*La,e*La)})}function ar(n,t){return[n,t]}function cr(n,t){return[n>Ea?n-Aa:-Ea>n?n+Aa:n,t]}function lr(n,t,e){return n?t||e?Ye(fr(n),hr(t,e)):fr(n):t||e?hr(t,e):cr}function sr(n){return function(t,e){return t+=n,[t>Ea?t-Aa:-Ea>t?t+Aa:t,e]}}function fr(n){var t=sr(n);return t.invert=sr(-n),t}function hr(n,t){function e(n,t){var e=Math.cos(t),a=Math.cos(n)*e,c=Math.sin(n)*e,l=Math.sin(t),s=l*r+a*u;return[Math.atan2(c*i-s*o,a*r-l*u),nt(s*i+c*o)]}var r=Math.cos(n),u=Math.sin(n),i=Math.cos(t),o=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),a=Math.cos(n)*e,c=Math.sin(n)*e,l=Math.sin(t),s=l*i-c*o;return[Math.atan2(c*i+l*o,a*r+s*u),nt(s*r-a*u)]},e}function gr(n,t){var e=Math.cos(n),r=Math.sin(n);return function(u,i,o,a){var c=o*t;null!=u?(u=pr(e,u),i=pr(e,i),(o>0?i>u:u>i)&&(u+=o*Aa)):(u=n+o*Aa,i=n-.5*c);for(var l,s=u;o>0?s>i:i>s;s-=c)a.point((l=Me([e,-r*Math.cos(s),-r*Math.sin(s)]))[0],l[1])}}function pr(n,t){var e=pe(t);e[0]-=n,xe(e);var r=Q(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Na)%(2*Math.PI)}function vr(n,t,e){var r=Bo.range(n,t-Na,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function dr(n,t,e){var r=Bo.range(n,t-Na,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function mr(n){return n.source}function yr(n){return n.target}function xr(n,t,e,r){var u=Math.cos(t),i=Math.sin(t),o=Math.cos(r),a=Math.sin(r),c=u*Math.cos(n),l=u*Math.sin(n),s=o*Math.cos(e),f=o*Math.sin(e),h=2*Math.asin(Math.sqrt(ut(r-t)+u*o*ut(e-n))),g=1/Math.sin(h),p=h?function(n){var t=Math.sin(n*=h)*g,e=Math.sin(h-n)*g,r=e*c+t*s,u=e*l+t*f,o=e*i+t*a;return[Math.atan2(u,r)*Ta,Math.atan2(o,Math.sqrt(r*r+u*u))*Ta]}:function(){return[n*Ta,t*Ta]};return p.distance=h,p}function Mr(){function n(n,u){var i=Math.sin(u*=La),o=Math.cos(u),a=ca((n*=La)-t),c=Math.cos(a);Fc+=Math.atan2(Math.sqrt((a=o*Math.sin(a))*a+(a=r*i-e*o*c)*a),e*i+r*o*c),t=n,e=i,r=o}var t,e,r;Hc.point=function(u,i){t=u*La,e=Math.sin(i*=La),r=Math.cos(i),Hc.point=n},Hc.lineEnd=function(){Hc.point=Hc.lineEnd=y}}function _r(n,t){function e(t,e){var r=Math.cos(t),u=Math.cos(e),i=n(r*u);return[i*u*Math.sin(t),i*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),u=t(r),i=Math.sin(u),o=Math.cos(u);return[Math.atan2(n*i,r*o),Math.asin(r&&e*i/r)]},e}function br(n,t){function e(n,t){o>0?-Ca+Na>t&&(t=-Ca+Na):t>Ca-Na&&(t=Ca-Na);var e=o/Math.pow(u(t),i);return[e*Math.sin(i*n),o-e*Math.cos(i*n)]}var r=Math.cos(n),u=function(n){return Math.tan(Ea/4+n/2)},i=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(u(t)/u(n)),o=r*Math.pow(u(n),i)/i;return i?(e.invert=function(n,t){var e=o-t,r=G(i)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/i,2*Math.atan(Math.pow(o/r,1/i))-Ca]},e):Sr}function wr(n,t){function e(n,t){var e=i-t;return[e*Math.sin(u*n),i-e*Math.cos(u*n)]}var r=Math.cos(n),u=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),i=r/u+n;return ca(u)<Na?ar:(e.invert=function(n,t){var e=i-t;return[Math.atan2(n,e)/u,i-G(u)*Math.sqrt(n*n+e*e)]},e)}function Sr(n,t){return[n,Math.log(Math.tan(Ea/4+t/2))]}function kr(n){var t,e=ur(n),r=e.scale,u=e.translate,i=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=u.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var o=i.apply(e,arguments);if(o===e){if(t=null==n){var a=Ea*r(),c=u();i([[c[0]-a,c[1]-a],[c[0]+a,c[1]+a]])}}else t&&(o=null);return o},e.clipExtent(null)}function Er(n,t){return[Math.log(Math.tan(Ea/4+t/2)),-n]}function Ar(n){return n[0]}function Cr(n){return n[1]}function Nr(n){for(var t=n.length,e=[0,1],r=2,u=2;t>u;u++){for(;r>1&&K(n[e[r-2]],n[e[r-1]],n[u])<=0;)--r;e[r++]=u}return e.slice(0,r)}function zr(n,t){return n[0]-t[0]||n[1]-t[1]}function Lr(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function Tr(n,t,e,r){var u=n[0],i=e[0],o=t[0]-u,a=r[0]-i,c=n[1],l=e[1],s=t[1]-c,f=r[1]-l,h=(a*(c-l)-f*(u-i))/(f*o-a*s);return[u+h*o,c+h*s]}function qr(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function Rr(){tu(this),this.edge=this.site=this.circle=null}function Dr(n){var t=Kc.pop()||new Rr;return t.site=n,t}function Pr(n){Xr(n),Wc.remove(n),Kc.push(n),tu(n)}function Ur(n){var t=n.circle,e=t.x,r=t.cy,u={x:e,y:r},i=n.P,o=n.N,a=[n];Pr(n);for(var c=i;c.circle&&ca(e-c.circle.x)<Na&&ca(r-c.circle.cy)<Na;)i=c.P,a.unshift(c),Pr(c),c=i;a.unshift(c),Xr(c);for(var l=o;l.circle&&ca(e-l.circle.x)<Na&&ca(r-l.circle.cy)<Na;)o=l.N,a.push(l),Pr(l),l=o;a.push(l),Xr(l);var s,f=a.length;for(s=1;f>s;++s)l=a[s],c=a[s-1],Kr(l.edge,c.site,l.site,u);c=a[0],l=a[f-1],l.edge=Jr(c.site,l.site,null,u),Vr(c),Vr(l)}function jr(n){for(var t,e,r,u,i=n.x,o=n.y,a=Wc._;a;)if(r=Fr(a,o)-i,r>Na)a=a.L;else{if(u=i-Hr(a,o),!(u>Na)){r>-Na?(t=a.P,e=a):u>-Na?(t=a,e=a.N):t=e=a;break}if(!a.R){t=a;break}a=a.R}var c=Dr(n);if(Wc.insert(t,c),t||e){if(t===e)return Xr(t),e=Dr(t.site),Wc.insert(c,e),c.edge=e.edge=Jr(t.site,c.site),Vr(t),Vr(e),void 0;if(!e)return c.edge=Jr(t.site,c.site),void 0;Xr(t),Xr(e);var l=t.site,s=l.x,f=l.y,h=n.x-s,g=n.y-f,p=e.site,v=p.x-s,d=p.y-f,m=2*(h*d-g*v),y=h*h+g*g,x=v*v+d*d,M={x:(d*y-g*x)/m+s,y:(h*x-v*y)/m+f};Kr(e.edge,l,p,M),c.edge=Jr(l,n,null,M),e.edge=Jr(n,p,null,M),Vr(t),Vr(e)}}function Fr(n,t){var e=n.site,r=e.x,u=e.y,i=u-t;if(!i)return r;var o=n.P;if(!o)return-1/0;e=o.site;var a=e.x,c=e.y,l=c-t;if(!l)return a;var s=a-r,f=1/i-1/l,h=s/l;return f?(-h+Math.sqrt(h*h-2*f*(s*s/(-2*l)-c+l/2+u-i/2)))/f+r:(r+a)/2}function Hr(n,t){var e=n.N;if(e)return Fr(e,t);var r=n.site;return r.y===t?r.x:1/0}function Or(n){this.site=n,this.edges=[]}function Yr(n){for(var t,e,r,u,i,o,a,c,l,s,f=n[0][0],h=n[1][0],g=n[0][1],p=n[1][1],v=Bc,d=v.length;d--;)if(i=v[d],i&&i.prepare())for(a=i.edges,c=a.length,o=0;c>o;)s=a[o].end(),r=s.x,u=s.y,l=a[++o%c].start(),t=l.x,e=l.y,(ca(r-t)>Na||ca(u-e)>Na)&&(a.splice(o,0,new Qr(Gr(i.site,s,ca(r-f)<Na&&p-u>Na?{x:f,y:ca(t-f)<Na?e:p}:ca(u-p)<Na&&h-r>Na?{x:ca(e-p)<Na?t:h,y:p}:ca(r-h)<Na&&u-g>Na?{x:h,y:ca(t-h)<Na?e:g}:ca(u-g)<Na&&r-f>Na?{x:ca(e-g)<Na?t:f,y:g}:null),i.site,null)),++c)}function Ir(n,t){return t.angle-n.angle}function Zr(){tu(this),this.x=this.y=this.arc=this.site=this.cy=null}function Vr(n){var t=n.P,e=n.N;if(t&&e){var r=t.site,u=n.site,i=e.site;if(r!==i){var o=u.x,a=u.y,c=r.x-o,l=r.y-a,s=i.x-o,f=i.y-a,h=2*(c*f-l*s);if(!(h>=-za)){var g=c*c+l*l,p=s*s+f*f,v=(f*g-l*p)/h,d=(c*p-s*g)/h,f=d+a,m=Qc.pop()||new Zr;m.arc=n,m.site=u,m.x=v+o,m.y=f+Math.sqrt(v*v+d*d),m.cy=f,n.circle=m;for(var y=null,x=Gc._;x;)if(m.y<x.y||m.y===x.y&&m.x<=x.x){if(!x.L){y=x.P;break}x=x.L}else{if(!x.R){y=x;break}x=x.R}Gc.insert(y,m),y||(Jc=m)}}}}function Xr(n){var t=n.circle;t&&(t.P||(Jc=t.N),Gc.remove(t),Qc.push(t),tu(t),n.circle=null)}function $r(n){for(var t,e=$c,r=He(n[0][0],n[0][1],n[1][0],n[1][1]),u=e.length;u--;)t=e[u],(!Br(t,n)||!r(t)||ca(t.a.x-t.b.x)<Na&&ca(t.a.y-t.b.y)<Na)&&(t.a=t.b=null,e.splice(u,1))}function Br(n,t){var e=n.b;if(e)return!0;var r,u,i=n.a,o=t[0][0],a=t[1][0],c=t[0][1],l=t[1][1],s=n.l,f=n.r,h=s.x,g=s.y,p=f.x,v=f.y,d=(h+p)/2,m=(g+v)/2;if(v===g){if(o>d||d>=a)return;if(h>p){if(i){if(i.y>=l)return}else i={x:d,y:c};e={x:d,y:l}}else{if(i){if(i.y<c)return}else i={x:d,y:l};e={x:d,y:c}}}else if(r=(h-p)/(v-g),u=m-r*d,-1>r||r>1)if(h>p){if(i){if(i.y>=l)return}else i={x:(c-u)/r,y:c};e={x:(l-u)/r,y:l}}else{if(i){if(i.y<c)return}else i={x:(l-u)/r,y:l};e={x:(c-u)/r,y:c}}else if(v>g){if(i){if(i.x>=a)return}else i={x:o,y:r*o+u};e={x:a,y:r*a+u}}else{if(i){if(i.x<o)return}else i={x:a,y:r*a+u};e={x:o,y:r*o+u}}return n.a=i,n.b=e,!0}function Wr(n,t){this.l=n,this.r=t,this.a=this.b=null}function Jr(n,t,e,r){var u=new Wr(n,t);return $c.push(u),e&&Kr(u,n,t,e),r&&Kr(u,t,n,r),Bc[n.i].edges.push(new Qr(u,n,t)),Bc[t.i].edges.push(new Qr(u,t,n)),u}function Gr(n,t,e){var r=new Wr(n,null);return r.a=t,r.b=e,$c.push(r),r}function Kr(n,t,e,r){n.a||n.b?n.l===e?n.b=r:n.a=r:(n.a=r,n.l=t,n.r=e)}function Qr(n,t,e){var r=n.a,u=n.b;this.edge=n,this.site=t,this.angle=e?Math.atan2(e.y-t.y,e.x-t.x):n.l===t?Math.atan2(u.x-r.x,r.y-u.y):Math.atan2(r.x-u.x,u.y-r.y)}function nu(){this._=null}function tu(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function eu(n,t){var e=t,r=t.R,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function ru(n,t){var e=t,r=t.L,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function uu(n){for(;n.L;)n=n.L;return n}function iu(n,t){var e,r,u,i=n.sort(ou).pop();for($c=[],Bc=new Array(n.length),Wc=new nu,Gc=new nu;;)if(u=Jc,i&&(!u||i.y<u.y||i.y===u.y&&i.x<u.x))(i.x!==e||i.y!==r)&&(Bc[i.i]=new Or(i),jr(i),e=i.x,r=i.y),i=n.pop();else{if(!u)break;Ur(u.arc)}t&&($r(t),Yr(t));var o={cells:Bc,edges:$c};return Wc=Gc=$c=Bc=null,o}function ou(n,t){return t.y-n.y||t.x-n.x}function au(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function cu(n){return n.x}function lu(n){return n.y}function su(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function fu(n,t,e,r,u,i){if(!n(t,e,r,u,i)){var o=.5*(e+u),a=.5*(r+i),c=t.nodes;c[0]&&fu(n,c[0],e,r,o,a),c[1]&&fu(n,c[1],o,r,u,a),c[2]&&fu(n,c[2],e,a,o,i),c[3]&&fu(n,c[3],o,a,u,i)}}function hu(n,t){n=Bo.rgb(n),t=Bo.rgb(t);var e=n.r,r=n.g,u=n.b,i=t.r-e,o=t.g-r,a=t.b-u;return function(n){return"#"+xt(Math.round(e+i*n))+xt(Math.round(r+o*n))+xt(Math.round(u+a*n))}}function gu(n,t){var e,r={},u={};for(e in n)e in t?r[e]=du(n[e],t[e]):u[e]=n[e];for(e in t)e in n||(u[e]=t[e]);return function(n){for(e in r)u[e]=r[e](n);return u}}function pu(n,t){return n=+n,t=+t,function(e){return n*(1-e)+t*e}}function vu(n,t){var e,r,u,i=tl.lastIndex=el.lastIndex=0,o=-1,a=[],c=[];for(n+="",t+="";(e=tl.exec(n))&&(r=el.exec(t));)(u=r.index)>i&&(u=t.slice(i,u),a[o]?a[o]+=u:a[++o]=u),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,c.push({i:o,x:pu(e,r)})),i=el.lastIndex;return i<t.length&&(u=t.slice(i),a[o]?a[o]+=u:a[++o]=u),a.length<2?c[0]?(t=c[0].x,function(n){return t(n)+""}):function(){return t}:(t=c.length,function(n){for(var e,r=0;t>r;++r)a[(e=c[r]).i]=e.x(n);return a.join("")})}function du(n,t){for(var e,r=Bo.interpolators.length;--r>=0&&!(e=Bo.interpolators[r](n,t)););return e}function mu(n,t){var e,r=[],u=[],i=n.length,o=t.length,a=Math.min(n.length,t.length);for(e=0;a>e;++e)r.push(du(n[e],t[e]));for(;i>e;++e)u[e]=n[e];for(;o>e;++e)u[e]=t[e];return function(n){for(e=0;a>e;++e)u[e]=r[e](n);return u}}function yu(n){return function(t){return 0>=t?0:t>=1?1:n(t)}}function xu(n){return function(t){return 1-n(1-t)}}function Mu(n){return function(t){return.5*(.5>t?n(2*t):2-n(2-2*t))}}function _u(n){return n*n}function bu(n){return n*n*n}function wu(n){if(0>=n)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(.5>n?e:3*(n-t)+e-.75)}function Su(n){return function(t){return Math.pow(t,n)}}function ku(n){return 1-Math.cos(n*Ca)}function Eu(n){return Math.pow(2,10*(n-1))}function Au(n){return 1-Math.sqrt(1-n*n)}function Cu(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/Aa*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*Aa/t)}}function Nu(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function zu(n){return 1/2.75>n?7.5625*n*n:2/2.75>n?7.5625*(n-=1.5/2.75)*n+.75:2.5/2.75>n?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Lu(n,t){n=Bo.hcl(n),t=Bo.hcl(t);var e=n.h,r=n.c,u=n.l,i=t.h-e,o=t.c-r,a=t.l-u;return isNaN(o)&&(o=0,r=isNaN(r)?t.c:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return lt(e+i*n,r+o*n,u+a*n)+""}}function Tu(n,t){n=Bo.hsl(n),t=Bo.hsl(t);var e=n.h,r=n.s,u=n.l,i=t.h-e,o=t.s-r,a=t.l-u;return isNaN(o)&&(o=0,r=isNaN(r)?t.s:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return at(e+i*n,r+o*n,u+a*n)+""}}function qu(n,t){n=Bo.lab(n),t=Bo.lab(t);var e=n.l,r=n.a,u=n.b,i=t.l-e,o=t.a-r,a=t.b-u;return function(n){return ft(e+i*n,r+o*n,u+a*n)+""}}function Ru(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function Du(n){var t=[n.a,n.b],e=[n.c,n.d],r=Uu(t),u=Pu(t,e),i=Uu(ju(e,t,-u))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,u*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*Ta,this.translate=[n.e,n.f],this.scale=[r,i],this.skew=i?Math.atan2(u,i)*Ta:0}function Pu(n,t){return n[0]*t[0]+n[1]*t[1]}function Uu(n){var t=Math.sqrt(Pu(n,n));return t&&(n[0]/=t,n[1]/=t),t}function ju(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function Fu(n,t){var e,r=[],u=[],i=Bo.transform(n),o=Bo.transform(t),a=i.translate,c=o.translate,l=i.rotate,s=o.rotate,f=i.skew,h=o.skew,g=i.scale,p=o.scale;return a[0]!=c[0]||a[1]!=c[1]?(r.push("translate(",null,",",null,")"),u.push({i:1,x:pu(a[0],c[0])},{i:3,x:pu(a[1],c[1])})):c[0]||c[1]?r.push("translate("+c+")"):r.push(""),l!=s?(l-s>180?s+=360:s-l>180&&(l+=360),u.push({i:r.push(r.pop()+"rotate(",null,")")-2,x:pu(l,s)})):s&&r.push(r.pop()+"rotate("+s+")"),f!=h?u.push({i:r.push(r.pop()+"skewX(",null,")")-2,x:pu(f,h)}):h&&r.push(r.pop()+"skewX("+h+")"),g[0]!=p[0]||g[1]!=p[1]?(e=r.push(r.pop()+"scale(",null,",",null,")"),u.push({i:e-4,x:pu(g[0],p[0])},{i:e-2,x:pu(g[1],p[1])})):(1!=p[0]||1!=p[1])&&r.push(r.pop()+"scale("+p+")"),e=u.length,function(n){for(var t,i=-1;++i<e;)r[(t=u[i]).i]=t.x(n);return r.join("")}}function Hu(n,t){return t=(t-=n=+n)||1/t,function(e){return(e-n)/t}}function Ou(n,t){return t=(t-=n=+n)||1/t,function(e){return Math.max(0,Math.min(1,(e-n)/t))}}function Yu(n){for(var t=n.source,e=n.target,r=Zu(t,e),u=[t];t!==r;)t=t.parent,u.push(t);for(var i=u.length;e!==r;)u.splice(i,0,e),e=e.parent;return u}function Iu(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function Zu(n,t){if(n===t)return n;for(var e=Iu(n),r=Iu(t),u=e.pop(),i=r.pop(),o=null;u===i;)o=u,u=e.pop(),i=r.pop();return o}function Vu(n){n.fixed|=2}function Xu(n){n.fixed&=-7}function $u(n){n.fixed|=4,n.px=n.x,n.py=n.y}function Bu(n){n.fixed&=-5}function Wu(n,t,e){var r=0,u=0;if(n.charge=0,!n.leaf)for(var i,o=n.nodes,a=o.length,c=-1;++c<a;)i=o[c],null!=i&&(Wu(i,t,e),n.charge+=i.charge,r+=i.charge*i.cx,u+=i.charge*i.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var l=t*e[n.point.index];n.charge+=n.pointCharge=l,r+=l*n.point.x,u+=l*n.point.y}n.cx=r/n.charge,n.cy=u/n.charge}function Ju(n,t){return Bo.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=ei,n}function Gu(n,t){for(var e=[n];null!=(n=e.pop());)if(t(n),(u=n.children)&&(r=u.length))for(var r,u;--r>=0;)e.push(u[r])}function Ku(n,t){for(var e=[n],r=[];null!=(n=e.pop());)if(r.push(n),(i=n.children)&&(u=i.length))for(var u,i,o=-1;++o<u;)e.push(i[o]);for(;null!=(n=r.pop());)t(n)}function Qu(n){return n.children}function ni(n){return n.value}function ti(n,t){return t.value-n.value}function ei(n){return Bo.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function ri(n){return n.x}function ui(n){return n.y}function ii(n,t,e){n.y0=t,n.y=e}function oi(n){return Bo.range(n.length)}function ai(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function ci(n){for(var t,e=1,r=0,u=n[0][1],i=n.length;i>e;++e)(t=n[e][1])>u&&(r=e,u=t);return r}function li(n){return n.reduce(si,0)}function si(n,t){return n+t[1]}function fi(n,t){return hi(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function hi(n,t){for(var e=-1,r=+n[0],u=(n[1]-r)/t,i=[];++e<=t;)i[e]=u*e+r;return i}function gi(n){return[Bo.min(n),Bo.max(n)]}function pi(n,t){return n.value-t.value}function vi(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function di(n,t){n._pack_next=t,t._pack_prev=n}function mi(n,t){var e=t.x-n.x,r=t.y-n.y,u=n.r+t.r;return.999*u*u>e*e+r*r}function yi(n){function t(n){s=Math.min(n.x-n.r,s),f=Math.max(n.x+n.r,f),h=Math.min(n.y-n.r,h),g=Math.max(n.y+n.r,g)}if((e=n.children)&&(l=e.length)){var e,r,u,i,o,a,c,l,s=1/0,f=-1/0,h=1/0,g=-1/0;if(e.forEach(xi),r=e[0],r.x=-r.r,r.y=0,t(r),l>1&&(u=e[1],u.x=u.r,u.y=0,t(u),l>2))for(i=e[2],bi(r,u,i),t(i),vi(r,i),r._pack_prev=i,vi(i,u),u=r._pack_next,o=3;l>o;o++){bi(r,u,i=e[o]);var p=0,v=1,d=1;for(a=u._pack_next;a!==u;a=a._pack_next,v++)if(mi(a,i)){p=1;break}if(1==p)for(c=r._pack_prev;c!==a._pack_prev&&!mi(c,i);c=c._pack_prev,d++);p?(d>v||v==d&&u.r<r.r?di(r,u=a):di(r=c,u),o--):(vi(r,i),u=i,t(i))}var m=(s+f)/2,y=(h+g)/2,x=0;for(o=0;l>o;o++)i=e[o],i.x-=m,i.y-=y,x=Math.max(x,i.r+Math.sqrt(i.x*i.x+i.y*i.y));n.r=x,e.forEach(Mi)}}function xi(n){n._pack_next=n._pack_prev=n}function Mi(n){delete n._pack_next,delete n._pack_prev}function _i(n,t,e,r){var u=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,u)for(var i=-1,o=u.length;++i<o;)_i(u[i],t,e,r)}function bi(n,t,e){var r=n.r+e.r,u=t.x-n.x,i=t.y-n.y;if(r&&(u||i)){var o=t.r+e.r,a=u*u+i*i;o*=o,r*=r;var c=.5+(r-o)/(2*a),l=Math.sqrt(Math.max(0,2*o*(r+a)-(r-=a)*r-o*o))/(2*a);e.x=n.x+c*u+l*i,e.y=n.y+c*i-l*u}else e.x=n.x+r,e.y=n.y}function wi(n,t){return n.parent==t.parent?1:2}function Si(n){var t=n.children;return t.length?t[0]:n.t}function ki(n){var t,e=n.children;return(t=e.length)?e[t-1]:n.t}function Ei(n,t,e){var r=e/(t.i-n.i);t.c-=r,t.s+=e,n.c+=r,t.z+=e,t.m+=e}function Ai(n){for(var t,e=0,r=0,u=n.children,i=u.length;--i>=0;)t=u[i],t.z+=e,t.m+=e,e+=t.s+(r+=t.c)}function Ci(n,t,e){return n.a.parent===t.parent?n.a:e}function Ni(n){return 1+Bo.max(n,function(n){return n.y})}function zi(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Li(n){var t=n.children;return t&&t.length?Li(t[0]):n}function Ti(n){var t,e=n.children;return e&&(t=e.length)?Ti(e[t-1]):n}function qi(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function Ri(n,t){var e=n.x+t[3],r=n.y+t[0],u=n.dx-t[1]-t[3],i=n.dy-t[0]-t[2];return 0>u&&(e+=u/2,u=0),0>i&&(r+=i/2,i=0),{x:e,y:r,dx:u,dy:i}}function Di(n){var t=n[0],e=n[n.length-1];return e>t?[t,e]:[e,t]}function Pi(n){return n.rangeExtent?n.rangeExtent():Di(n.range())}function Ui(n,t,e,r){var u=e(n[0],n[1]),i=r(t[0],t[1]);return function(n){return i(u(n))}}function ji(n,t){var e,r=0,u=n.length-1,i=n[r],o=n[u];return i>o&&(e=r,r=u,u=e,e=i,i=o,o=e),n[r]=t.floor(i),n[u]=t.ceil(o),n}function Fi(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:gl}function Hi(n,t,e,r){var u=[],i=[],o=0,a=Math.min(n.length,t.length)-1;for(n[a]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++o<=a;)u.push(e(n[o-1],n[o])),i.push(r(t[o-1],t[o]));return function(t){var e=Bo.bisect(n,t,1,a)-1;return i[e](u[e](t))}}function Oi(n,t,e,r){function u(){var u=Math.min(n.length,t.length)>2?Hi:Ui,c=r?Ou:Hu;return o=u(n,t,c,e),a=u(t,n,c,du),i}function i(n){return o(n)}var o,a;return i.invert=function(n){return a(n)},i.domain=function(t){return arguments.length?(n=t.map(Number),u()):n},i.range=function(n){return arguments.length?(t=n,u()):t},i.rangeRound=function(n){return i.range(n).interpolate(Ru)},i.clamp=function(n){return arguments.length?(r=n,u()):r},i.interpolate=function(n){return arguments.length?(e=n,u()):e},i.ticks=function(t){return Vi(n,t)},i.tickFormat=function(t,e){return Xi(n,t,e)},i.nice=function(t){return Ii(n,t),u()},i.copy=function(){return Oi(n,t,e,r)},u()}function Yi(n,t){return Bo.rebind(n,t,"range","rangeRound","interpolate","clamp")}function Ii(n,t){return ji(n,Fi(Zi(n,t)[2]))}function Zi(n,t){null==t&&(t=10);var e=Di(n),r=e[1]-e[0],u=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),i=t/r*u;return.15>=i?u*=10:.35>=i?u*=5:.75>=i&&(u*=2),e[0]=Math.ceil(e[0]/u)*u,e[1]=Math.floor(e[1]/u)*u+.5*u,e[2]=u,e}function Vi(n,t){return Bo.range.apply(Bo,Zi(n,t))}function Xi(n,t,e){var r=Zi(n,t);if(e){var u=tc.exec(e);if(u.shift(),"s"===u[8]){var i=Bo.formatPrefix(Math.max(ca(r[0]),ca(r[1])));return u[7]||(u[7]="."+$i(i.scale(r[2]))),u[8]="f",e=Bo.format(u.join("")),function(n){return e(i.scale(n))+i.symbol}}u[7]||(u[7]="."+Bi(u[8],r)),e=u.join("")}else e=",."+$i(r[2])+"f";return Bo.format(e)}function $i(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function Bi(n,t){var e=$i(t[2]);return n in pl?Math.abs(e-$i(Math.max(ca(t[0]),ca(t[1]))))+ +("e"!==n):e-2*("%"===n)}function Wi(n,t,e,r){function u(n){return(e?Math.log(0>n?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function i(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function o(t){return n(u(t))}return o.invert=function(t){return i(n.invert(t))},o.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(u)),o):r},o.base=function(e){return arguments.length?(t=+e,n.domain(r.map(u)),o):t},o.nice=function(){var t=ji(r.map(u),e?Math:dl);return n.domain(t),r=t.map(i),o},o.ticks=function(){var n=Di(r),o=[],a=n[0],c=n[1],l=Math.floor(u(a)),s=Math.ceil(u(c)),f=t%1?2:t;if(isFinite(s-l)){if(e){for(;s>l;l++)for(var h=1;f>h;h++)o.push(i(l)*h);o.push(i(l))}else for(o.push(i(l));l++<s;)for(var h=f-1;h>0;h--)o.push(i(l)*h);for(l=0;o[l]<a;l++);for(s=o.length;o[s-1]>c;s--);o=o.slice(l,s)}return o},o.tickFormat=function(n,t){if(!arguments.length)return vl;arguments.length<2?t=vl:"function"!=typeof t&&(t=Bo.format(t));var r,a=Math.max(.1,n/o.ticks().length),c=e?(r=1e-12,Math.ceil):(r=-1e-12,Math.floor);return function(n){return n/i(c(u(n)+r))<=a?t(n):""}},o.copy=function(){return Wi(n.copy(),t,e,r)},Yi(o,n)}function Ji(n,t,e){function r(t){return n(u(t))}var u=Gi(t),i=Gi(1/t);return r.invert=function(t){return i(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(u)),r):e},r.ticks=function(n){return Vi(e,n)},r.tickFormat=function(n,t){return Xi(e,n,t)},r.nice=function(n){return r.domain(Ii(e,n))},r.exponent=function(o){return arguments.length?(u=Gi(t=o),i=Gi(1/t),n.domain(e.map(u)),r):t},r.copy=function(){return Ji(n.copy(),t,e)},Yi(r,n)}function Gi(n){return function(t){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}}function Ki(n,t){function e(e){return i[((u.get(e)||("range"===t.t?u.set(e,n.push(e)):0/0))-1)%i.length]}function r(t,e){return Bo.range(n.length).map(function(n){return t+e*n})}var u,i,o;return e.domain=function(r){if(!arguments.length)return n;n=[],u=new a;for(var i,o=-1,c=r.length;++o<c;)u.has(i=r[o])||u.set(i,n.push(i));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(i=n,o=0,t={t:"range",a:arguments},e):i},e.rangePoints=function(u,a){arguments.length<2&&(a=0);var c=u[0],l=u[1],s=(l-c)/(Math.max(1,n.length-1)+a);return i=r(n.length<2?(c+l)/2:c+s*a/2,s),o=0,t={t:"rangePoints",a:arguments},e},e.rangeBands=function(u,a,c){arguments.length<2&&(a=0),arguments.length<3&&(c=a);var l=u[1]<u[0],s=u[l-0],f=u[1-l],h=(f-s)/(n.length-a+2*c);return i=r(s+h*c,h),l&&i.reverse(),o=h*(1-a),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(u,a,c){arguments.length<2&&(a=0),arguments.length<3&&(c=a);var l=u[1]<u[0],s=u[l-0],f=u[1-l],h=Math.floor((f-s)/(n.length-a+2*c)),g=f-s-(n.length-a)*h;return i=r(s+Math.round(g/2),h),l&&i.reverse(),o=Math.round(h*(1-a)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return o},e.rangeExtent=function(){return Di(t.a[0])},e.copy=function(){return Ki(n,t)},e.domain(n)}function Qi(r,u){function i(){var n=0,t=u.length;for(a=[];++n<t;)a[n-1]=Bo.quantile(r,n/t);return o}function o(n){return isNaN(n=+n)?void 0:u[Bo.bisect(a,n)]}var a;return o.domain=function(u){return arguments.length?(r=u.map(t).filter(e).sort(n),i()):r},o.range=function(n){return arguments.length?(u=n,i()):u},o.quantiles=function(){return a},o.invertExtent=function(n){return n=u.indexOf(n),0>n?[0/0,0/0]:[n>0?a[n-1]:r[0],n<a.length?a[n]:r[r.length-1]]},o.copy=function(){return Qi(r,u)},i()}function no(n,t,e){function r(t){return e[Math.max(0,Math.min(o,Math.floor(i*(t-n))))]}function u(){return i=e.length/(t-n),o=e.length-1,r}var i,o;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],u()):[n,t]},r.range=function(n){return arguments.length?(e=n,u()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=0>t?0/0:t/i+n,[t,t+1/i]},r.copy=function(){return no(n,t,e)},u()}function to(n,t){function e(e){return e>=e?t[Bo.bisect(n,e)]:void 0}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return to(n,t)},e}function eo(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return Vi(n,t)},t.tickFormat=function(t,e){return Xi(n,t,e)},t.copy=function(){return eo(n)},t}function ro(n){return n.innerRadius}function uo(n){return n.outerRadius}function io(n){return n.startAngle}function oo(n){return n.endAngle}function ao(n){function t(t){function o(){l.push("M",i(n(s),a))}for(var c,l=[],s=[],f=-1,h=t.length,g=kt(e),p=kt(r);++f<h;)u.call(this,c=t[f],f)?s.push([+g.call(this,c,f),+p.call(this,c,f)]):s.length&&(o(),s=[]);return s.length&&o(),l.length?l.join(""):null}var e=Ar,r=Cr,u=Ae,i=co,o=i.key,a=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.defined=function(n){return arguments.length?(u=n,t):u},t.interpolate=function(n){return arguments.length?(o="function"==typeof n?i=n:(i=wl.get(n)||co).key,t):o},t.tension=function(n){return arguments.length?(a=n,t):a},t}function co(n){return n.join("L")}function lo(n){return co(n)+"Z"}function so(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&u.push("H",r[0]),u.join("")}function fo(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("V",(r=n[t])[1],"H",r[0]);return u.join("")}function ho(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r=n[t])[0],"V",r[1]);return u.join("")}function go(n,t){return n.length<4?co(n):n[1]+mo(n.slice(1,n.length-1),yo(n,t))}function po(n,t){return n.length<3?co(n):n[0]+mo((n.push(n[0]),n),yo([n[n.length-2]].concat(n,[n[1]]),t))}function vo(n,t){return n.length<3?co(n):n[0]+mo(n,yo(n,t))}function mo(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return co(n);var e=n.length!=t.length,r="",u=n[0],i=n[1],o=t[0],a=o,c=1;if(e&&(r+="Q"+(i[0]-2*o[0]/3)+","+(i[1]-2*o[1]/3)+","+i[0]+","+i[1],u=n[1],c=2),t.length>1){a=t[1],i=n[c],c++,r+="C"+(u[0]+o[0])+","+(u[1]+o[1])+","+(i[0]-a[0])+","+(i[1]-a[1])+","+i[0]+","+i[1];for(var l=2;l<t.length;l++,c++)i=n[c],a=t[l],r+="S"+(i[0]-a[0])+","+(i[1]-a[1])+","+i[0]+","+i[1]}if(e){var s=n[c];r+="Q"+(i[0]+2*a[0]/3)+","+(i[1]+2*a[1]/3)+","+s[0]+","+s[1]}return r}function yo(n,t){for(var e,r=[],u=(1-t)/2,i=n[0],o=n[1],a=1,c=n.length;++a<c;)e=i,i=o,o=n[a],r.push([u*(o[0]-e[0]),u*(o[1]-e[1])]);return r}function xo(n){if(n.length<3)return co(n);var t=1,e=n.length,r=n[0],u=r[0],i=r[1],o=[u,u,u,(r=n[1])[0]],a=[i,i,i,r[1]],c=[u,",",i,"L",wo(El,o),",",wo(El,a)];for(n.push(n[e-1]);++t<=e;)r=n[t],o.shift(),o.push(r[0]),a.shift(),a.push(r[1]),So(c,o,a);return n.pop(),c.push("L",r),c.join("")}function Mo(n){if(n.length<4)return co(n);for(var t,e=[],r=-1,u=n.length,i=[0],o=[0];++r<3;)t=n[r],i.push(t[0]),o.push(t[1]);for(e.push(wo(El,i)+","+wo(El,o)),--r;++r<u;)t=n[r],i.shift(),i.push(t[0]),o.shift(),o.push(t[1]),So(e,i,o);return e.join("")}function _o(n){for(var t,e,r=-1,u=n.length,i=u+4,o=[],a=[];++r<4;)e=n[r%u],o.push(e[0]),a.push(e[1]);for(t=[wo(El,o),",",wo(El,a)],--r;++r<i;)e=n[r%u],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),So(t,o,a);return t.join("")}function bo(n,t){var e=n.length-1;if(e)for(var r,u,i=n[0][0],o=n[0][1],a=n[e][0]-i,c=n[e][1]-o,l=-1;++l<=e;)r=n[l],u=l/e,r[0]=t*r[0]+(1-t)*(i+u*a),r[1]=t*r[1]+(1-t)*(o+u*c);return xo(n)}function wo(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function So(n,t,e){n.push("C",wo(Sl,t),",",wo(Sl,e),",",wo(kl,t),",",wo(kl,e),",",wo(El,t),",",wo(El,e))}function ko(n,t){return(t[1]-n[1])/(t[0]-n[0])}function Eo(n){for(var t=0,e=n.length-1,r=[],u=n[0],i=n[1],o=r[0]=ko(u,i);++t<e;)r[t]=(o+(o=ko(u=i,i=n[t+1])))/2;return r[t]=o,r}function Ao(n){for(var t,e,r,u,i=[],o=Eo(n),a=-1,c=n.length-1;++a<c;)t=ko(n[a],n[a+1]),ca(t)<Na?o[a]=o[a+1]=0:(e=o[a]/t,r=o[a+1]/t,u=e*e+r*r,u>9&&(u=3*t/Math.sqrt(u),o[a]=u*e,o[a+1]=u*r));for(a=-1;++a<=c;)u=(n[Math.min(c,a+1)][0]-n[Math.max(0,a-1)][0])/(6*(1+o[a]*o[a])),i.push([u||0,o[a]*u||0]);return i}function Co(n){return n.length<3?co(n):n[0]+mo(n,Ao(n))}function No(n){for(var t,e,r,u=-1,i=n.length;++u<i;)t=n[u],e=t[0],r=t[1]+_l,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function zo(n){function t(t){function c(){v.push("M",a(n(m),f),s,l(n(d.reverse()),f),"Z")}for(var h,g,p,v=[],d=[],m=[],y=-1,x=t.length,M=kt(e),_=kt(u),b=e===r?function(){return g}:kt(r),w=u===i?function(){return p}:kt(i);++y<x;)o.call(this,h=t[y],y)?(d.push([g=+M.call(this,h,y),p=+_.call(this,h,y)]),m.push([+b.call(this,h,y),+w.call(this,h,y)])):d.length&&(c(),d=[],m=[]);return d.length&&c(),v.length?v.join(""):null}var e=Ar,r=Ar,u=0,i=Cr,o=Ae,a=co,c=a.key,l=a,s="L",f=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,t):e},t.x1=function(n){return arguments.length?(r=n,t):r},t.y=function(n){return arguments.length?(u=i=n,t):i},t.y0=function(n){return arguments.length?(u=n,t):u},t.y1=function(n){return arguments.length?(i=n,t):i},t.defined=function(n){return arguments.length?(o=n,t):o},t.interpolate=function(n){return arguments.length?(c="function"==typeof n?a=n:(a=wl.get(n)||co).key,l=a.reverse||a,s=a.closed?"M":"L",t):c},t.tension=function(n){return arguments.length?(f=n,t):f},t}function Lo(n){return n.radius}function To(n){return[n.x,n.y]}function qo(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]+_l;return[e*Math.cos(r),e*Math.sin(r)]}}function Ro(){return 64}function Do(){return"circle"}function Po(n){var t=Math.sqrt(n/Ea);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function Uo(n,t){return ga(n,Tl),n.id=t,n}function jo(n,t,e,r){var u=n.id;return F(n,"function"==typeof e?function(n,i,o){n.__transition__[u].tween.set(t,r(e.call(n,n.__data__,i,o)))}:(e=r(e),function(n){n.__transition__[u].tween.set(t,e)}))}function Fo(n){return null==n&&(n=""),function(){this.textContent=n}}function Ho(n,t,e,r){var u=n.__transition__||(n.__transition__={active:0,count:0}),i=u[e];if(!i){var o=r.time;i=u[e]={tween:new a,time:o,ease:r.ease,delay:r.delay,duration:r.duration},++u.count,Bo.timer(function(r){function a(r){return u.active>e?l():(u.active=e,i.event&&i.event.start.call(n,s,t),i.tween.forEach(function(e,r){(r=r.call(n,s,t))&&v.push(r)
}),Bo.timer(function(){return p.c=c(r||1)?Ae:c,1},0,o),void 0)}function c(r){if(u.active!==e)return l();for(var o=r/g,a=f(o),c=v.length;c>0;)v[--c].call(n,a);return o>=1?(i.event&&i.event.end.call(n,s,t),l()):void 0}function l(){return--u.count?delete u[e]:delete n.__transition__,1}var s=n.__data__,f=i.ease,h=i.delay,g=i.duration,p=Ka,v=[];return p.t=h+o,r>=h?a(r-h):(p.c=a,void 0)},0,o)}}function Oo(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate("+(isFinite(r)?r:e(n))+",0)"})}function Yo(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate(0,"+(isFinite(r)?r:e(n))+")"})}function Io(n){return n.toISOString()}function Zo(n,t,e){function r(t){return n(t)}function u(n,e){var r=n[1]-n[0],u=r/e,i=Bo.bisect(Ol,u);return i==Ol.length?[t.year,Zi(n.map(function(n){return n/31536e6}),e)[2]]:i?t[u/Ol[i-1]<Ol[i]/u?i-1:i]:[Zl,Zi(n,e)[2]]}return r.invert=function(t){return Vo(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(Vo)},r.nice=function(n,t){function e(e){return!isNaN(e)&&!n.range(e,Vo(+e+1),t).length}var i=r.domain(),o=Di(i),a=null==n?u(o,10):"number"==typeof n&&u(o,n);return a&&(n=a[0],t=a[1]),r.domain(ji(i,t>1?{floor:function(t){for(;e(t=n.floor(t));)t=Vo(t-1);return t},ceil:function(t){for(;e(t=n.ceil(t));)t=Vo(+t+1);return t}}:n))},r.ticks=function(n,t){var e=Di(r.domain()),i=null==n?u(e,10):"number"==typeof n?u(e,n):!n.range&&[{range:n},t];return i&&(n=i[0],t=i[1]),n.range(e[0],Vo(+e[1]+1),1>t?1:t)},r.tickFormat=function(){return e},r.copy=function(){return Zo(n.copy(),t,e)},Yi(r,n)}function Vo(n){return new Date(n)}function Xo(n){return JSON.parse(n.responseText)}function $o(n){var t=Go.createRange();return t.selectNode(Go.body),t.createContextualFragment(n.responseText)}var Bo={version:"3.4.13"};Date.now||(Date.now=function(){return+new Date});var Wo=[].slice,Jo=function(n){return Wo.call(n)},Go=document,Ko=Go.documentElement,Qo=window;try{Jo(Ko.childNodes)[0].nodeType}catch(na){Jo=function(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}}try{Go.createElement("div").style.setProperty("opacity",0,"")}catch(ta){var ea=Qo.Element.prototype,ra=ea.setAttribute,ua=ea.setAttributeNS,ia=Qo.CSSStyleDeclaration.prototype,oa=ia.setProperty;ea.setAttribute=function(n,t){ra.call(this,n,t+"")},ea.setAttributeNS=function(n,t,e){ua.call(this,n,t,e+"")},ia.setProperty=function(n,t,e){oa.call(this,n,t+"",e)}}Bo.ascending=n,Bo.descending=function(n,t){return n>t?-1:t>n?1:t>=n?0:0/0},Bo.min=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i&&!(null!=(e=n[u])&&e>=e);)e=void 0;for(;++u<i;)null!=(r=n[u])&&e>r&&(e=r)}else{for(;++u<i&&!(null!=(e=t.call(n,n[u],u))&&e>=e);)e=void 0;for(;++u<i;)null!=(r=t.call(n,n[u],u))&&e>r&&(e=r)}return e},Bo.max=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i&&!(null!=(e=n[u])&&e>=e);)e=void 0;for(;++u<i;)null!=(r=n[u])&&r>e&&(e=r)}else{for(;++u<i&&!(null!=(e=t.call(n,n[u],u))&&e>=e);)e=void 0;for(;++u<i;)null!=(r=t.call(n,n[u],u))&&r>e&&(e=r)}return e},Bo.extent=function(n,t){var e,r,u,i=-1,o=n.length;if(1===arguments.length){for(;++i<o&&!(null!=(e=u=n[i])&&e>=e);)e=u=void 0;for(;++i<o;)null!=(r=n[i])&&(e>r&&(e=r),r>u&&(u=r))}else{for(;++i<o&&!(null!=(e=u=t.call(n,n[i],i))&&e>=e);)e=void 0;for(;++i<o;)null!=(r=t.call(n,n[i],i))&&(e>r&&(e=r),r>u&&(u=r))}return[e,u]},Bo.sum=function(n,t){var r,u=0,i=n.length,o=-1;if(1===arguments.length)for(;++o<i;)e(r=+n[o])&&(u+=r);else for(;++o<i;)e(r=+t.call(n,n[o],o))&&(u+=r);return u},Bo.mean=function(n,r){var u,i=0,o=n.length,a=-1,c=o;if(1===arguments.length)for(;++a<o;)e(u=t(n[a]))?i+=u:--c;else for(;++a<o;)e(u=t(r.call(n,n[a],a)))?i+=u:--c;return c?i/c:void 0},Bo.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),u=+n[r-1],i=e-r;return i?u+i*(n[r]-u):u},Bo.median=function(r,u){var i,o=[],a=r.length,c=-1;if(1===arguments.length)for(;++c<a;)e(i=t(r[c]))&&o.push(i);else for(;++c<a;)e(i=t(u.call(r,r[c],c)))&&o.push(i);return o.length?Bo.quantile(o.sort(n),.5):void 0};var aa=r(n);Bo.bisectLeft=aa.left,Bo.bisect=Bo.bisectRight=aa.right,Bo.bisector=function(t){return r(1===t.length?function(e,r){return n(t(e),r)}:t)},Bo.shuffle=function(n){for(var t,e,r=n.length;r;)e=0|Math.random()*r--,t=n[r],n[r]=n[e],n[e]=t;return n},Bo.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},Bo.pairs=function(n){for(var t,e=0,r=n.length-1,u=n[0],i=new Array(0>r?0:r);r>e;)i[e]=[t=u,u=n[++e]];return i},Bo.zip=function(){if(!(r=arguments.length))return[];for(var n=-1,t=Bo.min(arguments,u),e=new Array(t);++n<t;)for(var r,i=-1,o=e[n]=new Array(r);++i<r;)o[i]=arguments[i][n];return e},Bo.transpose=function(n){return Bo.zip.apply(Bo,n)},Bo.keys=function(n){var t=[];for(var e in n)t.push(e);return t},Bo.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},Bo.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},Bo.merge=function(n){for(var t,e,r,u=n.length,i=-1,o=0;++i<u;)o+=n[i].length;for(e=new Array(o);--u>=0;)for(r=n[u],t=r.length;--t>=0;)e[--o]=r[t];return e};var ca=Math.abs;Bo.range=function(n,t,e){if(arguments.length<3&&(e=1,arguments.length<2&&(t=n,n=0)),1/0===(t-n)/e)throw new Error("infinite range");var r,u=[],o=i(ca(e)),a=-1;if(n*=o,t*=o,e*=o,0>e)for(;(r=n+e*++a)>t;)u.push(r/o);else for(;(r=n+e*++a)<t;)u.push(r/o);return u},Bo.map=function(n){var t=new a;if(n instanceof a)n.forEach(function(n,e){t.set(n,e)});else for(var e in n)t.set(e,n[e]);return t};var la="__proto__",sa="\x00";o(a,{has:s,get:function(n){return this._[c(n)]},set:function(n,t){return this._[c(n)]=t},remove:f,keys:h,values:function(){var n=[];for(var t in this._)n.push(this._[t]);return n},entries:function(){var n=[];for(var t in this._)n.push({key:l(t),value:this._[t]});return n},size:g,empty:p,forEach:function(n){for(var t in this._)n.call(this,l(t),this._[t])}}),Bo.nest=function(){function n(t,o,c){if(c>=i.length)return r?r.call(u,o):e?o.sort(e):o;for(var l,s,f,h,g=-1,p=o.length,v=i[c++],d=new a;++g<p;)(h=d.get(l=v(s=o[g])))?h.push(s):d.set(l,[s]);return t?(s=t(),f=function(e,r){s.set(e,n(t,r,c))}):(s={},f=function(e,r){s[e]=n(t,r,c)}),d.forEach(f),s}function t(n,e){if(e>=i.length)return n;var r=[],u=o[e++];return n.forEach(function(n,u){r.push({key:n,values:t(u,e)})}),u?r.sort(function(n,t){return u(n.key,t.key)}):r}var e,r,u={},i=[],o=[];return u.map=function(t,e){return n(e,t,0)},u.entries=function(e){return t(n(Bo.map,e,0),0)},u.key=function(n){return i.push(n),u},u.sortKeys=function(n){return o[i.length-1]=n,u},u.sortValues=function(n){return e=n,u},u.rollup=function(n){return r=n,u},u},Bo.set=function(n){var t=new v;if(n)for(var e=0,r=n.length;r>e;++e)t.add(n[e]);return t},o(v,{has:s,add:function(n){return this._[c(n+="")]=!0,n},remove:f,values:h,size:g,empty:p,forEach:function(n){for(var t in this._)n.call(this,l(t))}}),Bo.behavior={},Bo.rebind=function(n,t){for(var e,r=1,u=arguments.length;++r<u;)n[e=arguments[r]]=d(n,t,t[e]);return n};var fa=["webkit","ms","moz","Moz","o","O"];Bo.dispatch=function(){for(var n=new x,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=M(n);return n},x.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.slice(e+1),n=n.slice(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},Bo.event=null,Bo.requote=function(n){return n.replace(ha,"\\$&")};var ha=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,ga={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},pa=function(n,t){return t.querySelector(n)},va=function(n,t){return t.querySelectorAll(n)},da=Ko.matches||Ko[m(Ko,"matchesSelector")],ma=function(n,t){return da.call(n,t)};"function"==typeof Sizzle&&(pa=function(n,t){return Sizzle(n,t)[0]||null},va=Sizzle,ma=Sizzle.matchesSelector),Bo.selection=function(){return _a};var ya=Bo.selection.prototype=[];ya.select=function(n){var t,e,r,u,i=[];n=k(n);for(var o=-1,a=this.length;++o<a;){i.push(t=[]),t.parentNode=(r=this[o]).parentNode;for(var c=-1,l=r.length;++c<l;)(u=r[c])?(t.push(e=n.call(u,u.__data__,c,o)),e&&"__data__"in u&&(e.__data__=u.__data__)):t.push(null)}return S(i)},ya.selectAll=function(n){var t,e,r=[];n=E(n);for(var u=-1,i=this.length;++u<i;)for(var o=this[u],a=-1,c=o.length;++a<c;)(e=o[a])&&(r.push(t=Jo(n.call(e,e.__data__,a,u))),t.parentNode=e);return S(r)};var xa={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};Bo.ns={prefix:xa,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&(e=n.slice(0,t),n=n.slice(t+1)),xa.hasOwnProperty(e)?{space:xa[e],local:n}:n}},ya.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=Bo.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(A(t,n[t]));return this}return this.each(A(n,t))},ya.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=z(n)).length,u=-1;if(t=e.classList){for(;++u<r;)if(!t.contains(n[u]))return!1}else for(t=e.getAttribute("class");++u<r;)if(!N(n[u]).test(t))return!1;return!0}for(t in n)this.each(L(t,n[t]));return this}return this.each(L(n,t))},ya.style=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t="");for(e in n)this.each(q(e,n[e],t));return this}if(2>r)return Qo.getComputedStyle(this.node(),null).getPropertyValue(n);e=""}return this.each(q(n,t,e))},ya.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(R(t,n[t]));return this}return this.each(R(n,t))},ya.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},ya.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},ya.append=function(n){return n=D(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},ya.insert=function(n,t){return n=D(n),t=k(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},ya.remove=function(){return this.each(function(){var n=this.parentNode;n&&n.removeChild(this)})},ya.data=function(n,t){function e(n,e){var r,u,i,o=n.length,f=e.length,h=Math.min(o,f),g=new Array(f),p=new Array(f),v=new Array(o);if(t){var d,m=new a,y=new Array(o);for(r=-1;++r<o;)m.has(d=t.call(u=n[r],u.__data__,r))?v[r]=u:m.set(d,u),y[r]=d;for(r=-1;++r<f;)(u=m.get(d=t.call(e,i=e[r],r)))?u!==!0&&(g[r]=u,u.__data__=i):p[r]=P(i),m.set(d,!0);for(r=-1;++r<o;)m.get(y[r])!==!0&&(v[r]=n[r])}else{for(r=-1;++r<h;)u=n[r],i=e[r],u?(u.__data__=i,g[r]=u):p[r]=P(i);for(;f>r;++r)p[r]=P(e[r]);for(;o>r;++r)v[r]=n[r]}p.update=g,p.parentNode=g.parentNode=v.parentNode=n.parentNode,c.push(p),l.push(g),s.push(v)}var r,u,i=-1,o=this.length;if(!arguments.length){for(n=new Array(o=(r=this[0]).length);++i<o;)(u=r[i])&&(n[i]=u.__data__);return n}var c=H([]),l=S([]),s=S([]);if("function"==typeof n)for(;++i<o;)e(r=this[i],n.call(r,r.parentNode.__data__,i));else for(;++i<o;)e(r=this[i],n);return l.enter=function(){return c},l.exit=function(){return s},l},ya.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},ya.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=U(n));for(var i=0,o=this.length;o>i;i++){u.push(t=[]),t.parentNode=(e=this[i]).parentNode;for(var a=0,c=e.length;c>a;a++)(r=e[a])&&n.call(r,r.__data__,a,i)&&t.push(r)}return S(u)},ya.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],u=r.length-1,i=r[u];--u>=0;)(e=r[u])&&(i&&i!==e.nextSibling&&i.parentNode.insertBefore(e,i),i=e);return this},ya.sort=function(n){n=j.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},ya.each=function(n){return F(this,function(t,e,r){n.call(t,t.__data__,e,r)})},ya.call=function(n){var t=Jo(arguments);return n.apply(t[0]=this,t),this},ya.empty=function(){return!this.node()},ya.node=function(){for(var n=0,t=this.length;t>n;n++)for(var e=this[n],r=0,u=e.length;u>r;r++){var i=e[r];if(i)return i}return null},ya.size=function(){var n=0;return F(this,function(){++n}),n};var Ma=[];Bo.selection.enter=H,Bo.selection.enter.prototype=Ma,Ma.append=ya.append,Ma.empty=ya.empty,Ma.node=ya.node,Ma.call=ya.call,Ma.size=ya.size,Ma.select=function(n){for(var t,e,r,u,i,o=[],a=-1,c=this.length;++a<c;){r=(u=this[a]).update,o.push(t=[]),t.parentNode=u.parentNode;for(var l=-1,s=u.length;++l<s;)(i=u[l])?(t.push(r[l]=e=n.call(u.parentNode,i.__data__,l,a)),e.__data__=i.__data__):t.push(null)}return S(o)},Ma.insert=function(n,t){return arguments.length<2&&(t=O(this)),ya.insert.call(this,n,t)},ya.transition=function(){for(var n,t,e=Cl||++ql,r=[],u=Nl||{time:Date.now(),ease:wu,delay:0,duration:250},i=-1,o=this.length;++i<o;){r.push(n=[]);for(var a=this[i],c=-1,l=a.length;++c<l;)(t=a[c])&&Ho(t,c,e,u),n.push(t)}return Uo(r,e)},ya.interrupt=function(){return this.each(Y)},Bo.select=function(n){var t=["string"==typeof n?pa(n,Go):n];return t.parentNode=Ko,S([t])},Bo.selectAll=function(n){var t=Jo("string"==typeof n?va(n,Go):n);return t.parentNode=Ko,S([t])};var _a=Bo.select(Ko);ya.on=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t=!1);for(e in n)this.each(I(e,n[e],t));return this}if(2>r)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(I(n,t,e))};var ba=Bo.map({mouseenter:"mouseover",mouseleave:"mouseout"});ba.forEach(function(n){"on"+n in Go&&ba.remove(n)});var wa="onselectstart"in Go?null:m(Ko.style,"userSelect"),Sa=0;Bo.mouse=function(n){return $(n,b())};var ka=/WebKit/.test(Qo.navigator.userAgent)?-1:0;Bo.touch=function(n,t,e){if(arguments.length<3&&(e=t,t=b().changedTouches),t)for(var r,u=0,i=t.length;i>u;++u)if((r=t[u]).identifier===e)return $(n,r)},Bo.behavior.drag=function(){function n(){this.on("mousedown.drag",u).on("touchstart.drag",i)}function t(n,t,u,i,o){return function(){function a(){var n,e,r=t(h,v);r&&(n=r[0]-x[0],e=r[1]-x[1],p|=n|e,x=r,g({type:"drag",x:r[0]+l[0],y:r[1]+l[1],dx:n,dy:e}))}function c(){t(h,v)&&(m.on(i+d,null).on(o+d,null),y(p&&Bo.event.target===f),g({type:"dragend"}))}var l,s=this,f=Bo.event.target,h=s.parentNode,g=e.of(s,arguments),p=0,v=n(),d=".drag"+(null==v?"":"-"+v),m=Bo.select(u()).on(i+d,a).on(o+d,c),y=X(),x=t(h,v);r?(l=r.apply(s,arguments),l=[l.x-x[0],l.y-x[1]]):l=[0,0],g({type:"dragstart"})}}var e=w(n,"drag","dragstart","dragend"),r=null,u=t(y,Bo.mouse,J,"mousemove","mouseup"),i=t(B,Bo.touch,W,"touchmove","touchend");return n.origin=function(t){return arguments.length?(r=t,n):r},Bo.rebind(n,e,"on")},Bo.touches=function(n,t){return arguments.length<2&&(t=b().touches),t?Jo(t).map(function(t){var e=$(n,t);return e.identifier=t.identifier,e}):[]};var Ea=Math.PI,Aa=2*Ea,Ca=Ea/2,Na=1e-6,za=Na*Na,La=Ea/180,Ta=180/Ea,qa=Math.SQRT2,Ra=2,Da=4;Bo.interpolateZoom=function(n,t){function e(n){var t=n*y;if(m){var e=et(v),o=i/(Ra*h)*(e*rt(qa*t+v)-tt(v));return[r+o*l,u+o*s,i*e/et(qa*t+v)]}return[r+n*l,u+n*s,i*Math.exp(qa*t)]}var r=n[0],u=n[1],i=n[2],o=t[0],a=t[1],c=t[2],l=o-r,s=a-u,f=l*l+s*s,h=Math.sqrt(f),g=(c*c-i*i+Da*f)/(2*i*Ra*h),p=(c*c-i*i-Da*f)/(2*c*Ra*h),v=Math.log(Math.sqrt(g*g+1)-g),d=Math.log(Math.sqrt(p*p+1)-p),m=d-v,y=(m||Math.log(c/i))/qa;return e.duration=1e3*y,e},Bo.behavior.zoom=function(){function n(n){n.on(A,l).on(ja+".zoom",f).on("dblclick.zoom",h).on(z,s)}function t(n){return[(n[0]-S.x)/S.k,(n[1]-S.y)/S.k]}function e(n){return[n[0]*S.k+S.x,n[1]*S.k+S.y]}function r(n){S.k=Math.max(E[0],Math.min(E[1],n))}function u(n,t){t=e(t),S.x+=n[0]-t[0],S.y+=n[1]-t[1]}function i(){x&&x.domain(y.range().map(function(n){return(n-S.x)/S.k}).map(y.invert)),b&&b.domain(M.range().map(function(n){return(n-S.y)/S.k}).map(M.invert))}function o(n){n({type:"zoomstart"})}function a(n){i(),n({type:"zoom",scale:S.k,translate:[S.x,S.y]})}function c(n){n({type:"zoomend"})}function l(){function n(){s=1,u(Bo.mouse(r),h),a(l)}function e(){f.on(C,null).on(N,null),g(s&&Bo.event.target===i),c(l)}var r=this,i=Bo.event.target,l=L.of(r,arguments),s=0,f=Bo.select(Qo).on(C,n).on(N,e),h=t(Bo.mouse(r)),g=X();Y.call(r),o(l)}function s(){function n(){var n=Bo.touches(g);return h=S.k,n.forEach(function(n){n.identifier in v&&(v[n.identifier]=t(n))}),n}function e(){var t=Bo.event.target;Bo.select(t).on(x,i).on(M,f),b.push(t);for(var e=Bo.event.changedTouches,o=0,c=e.length;c>o;++o)v[e[o].identifier]=null;var l=n(),s=Date.now();if(1===l.length){if(500>s-m){var h=l[0],g=v[h.identifier];r(2*S.k),u(h,g),_(),a(p)}m=s}else if(l.length>1){var h=l[0],y=l[1],w=h[0]-y[0],k=h[1]-y[1];d=w*w+k*k}}function i(){for(var n,t,e,i,o=Bo.touches(g),c=0,l=o.length;l>c;++c,i=null)if(e=o[c],i=v[e.identifier]){if(t)break;n=e,t=i}if(i){var s=(s=e[0]-n[0])*s+(s=e[1]-n[1])*s,f=d&&Math.sqrt(s/d);n=[(n[0]+e[0])/2,(n[1]+e[1])/2],t=[(t[0]+i[0])/2,(t[1]+i[1])/2],r(f*h)}m=null,u(n,t),a(p)}function f(){if(Bo.event.touches.length){for(var t=Bo.event.changedTouches,e=0,r=t.length;r>e;++e)delete v[t[e].identifier];for(var u in v)return void n()}Bo.selectAll(b).on(y,null),w.on(A,l).on(z,s),k(),c(p)}var h,g=this,p=L.of(g,arguments),v={},d=0,y=".zoom-"+Bo.event.changedTouches[0].identifier,x="touchmove"+y,M="touchend"+y,b=[],w=Bo.select(g),k=X();Y.call(g),e(),o(p),w.on(A,null).on(z,e)}function f(){var n=L.of(this,arguments);d?clearTimeout(d):(g=t(p=v||Bo.mouse(this)),Y.call(this),o(n)),d=setTimeout(function(){d=null,c(n)},50),_(),r(Math.pow(2,.002*Pa())*S.k),u(p,g),a(n)}function h(){var n=L.of(this,arguments),e=Bo.mouse(this),i=t(e),l=Math.log(S.k)/Math.LN2;o(n),r(Math.pow(2,Bo.event.shiftKey?Math.ceil(l)-1:Math.floor(l)+1)),u(e,i),a(n),c(n)}var g,p,v,d,m,y,x,M,b,S={x:0,y:0,k:1},k=[960,500],E=Ua,A="mousedown.zoom",C="mousemove.zoom",N="mouseup.zoom",z="touchstart.zoom",L=w(n,"zoomstart","zoom","zoomend");return n.event=function(n){n.each(function(){var n=L.of(this,arguments),t=S;Cl?Bo.select(this).transition().each("start.zoom",function(){S=this.__chart__||{x:0,y:0,k:1},o(n)}).tween("zoom:zoom",function(){var e=k[0],r=k[1],u=e/2,i=r/2,o=Bo.interpolateZoom([(u-S.x)/S.k,(i-S.y)/S.k,e/S.k],[(u-t.x)/t.k,(i-t.y)/t.k,e/t.k]);return function(t){var r=o(t),c=e/r[2];this.__chart__=S={x:u-r[0]*c,y:i-r[1]*c,k:c},a(n)}}).each("end.zoom",function(){c(n)}):(this.__chart__=S,o(n),a(n),c(n))})},n.translate=function(t){return arguments.length?(S={x:+t[0],y:+t[1],k:S.k},i(),n):[S.x,S.y]},n.scale=function(t){return arguments.length?(S={x:S.x,y:S.y,k:+t},i(),n):S.k},n.scaleExtent=function(t){return arguments.length?(E=null==t?Ua:[+t[0],+t[1]],n):E},n.center=function(t){return arguments.length?(v=t&&[+t[0],+t[1]],n):v},n.size=function(t){return arguments.length?(k=t&&[+t[0],+t[1]],n):k},n.x=function(t){return arguments.length?(x=t,y=t.copy(),S={x:0,y:0,k:1},n):x},n.y=function(t){return arguments.length?(b=t,M=t.copy(),S={x:0,y:0,k:1},n):b},Bo.rebind(n,L,"on")};var Pa,Ua=[0,1/0],ja="onwheel"in Go?(Pa=function(){return-Bo.event.deltaY*(Bo.event.deltaMode?120:1)},"wheel"):"onmousewheel"in Go?(Pa=function(){return Bo.event.wheelDelta},"mousewheel"):(Pa=function(){return-Bo.event.detail},"MozMousePixelScroll");Bo.color=it,it.prototype.toString=function(){return this.rgb()+""},Bo.hsl=ot;var Fa=ot.prototype=new it;Fa.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),new ot(this.h,this.s,this.l/n)},Fa.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new ot(this.h,this.s,n*this.l)},Fa.rgb=function(){return at(this.h,this.s,this.l)},Bo.hcl=ct;var Ha=ct.prototype=new it;Ha.brighter=function(n){return new ct(this.h,this.c,Math.min(100,this.l+Oa*(arguments.length?n:1)))},Ha.darker=function(n){return new ct(this.h,this.c,Math.max(0,this.l-Oa*(arguments.length?n:1)))},Ha.rgb=function(){return lt(this.h,this.c,this.l).rgb()},Bo.lab=st;var Oa=18,Ya=.95047,Ia=1,Za=1.08883,Va=st.prototype=new it;Va.brighter=function(n){return new st(Math.min(100,this.l+Oa*(arguments.length?n:1)),this.a,this.b)},Va.darker=function(n){return new st(Math.max(0,this.l-Oa*(arguments.length?n:1)),this.a,this.b)},Va.rgb=function(){return ft(this.l,this.a,this.b)},Bo.rgb=dt;var Xa=dt.prototype=new it;Xa.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,u=30;return t||e||r?(t&&u>t&&(t=u),e&&u>e&&(e=u),r&&u>r&&(r=u),new dt(Math.min(255,t/n),Math.min(255,e/n),Math.min(255,r/n))):new dt(u,u,u)},Xa.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new dt(n*this.r,n*this.g,n*this.b)},Xa.hsl=function(){return _t(this.r,this.g,this.b)},Xa.toString=function(){return"#"+xt(this.r)+xt(this.g)+xt(this.b)};var $a=Bo.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});$a.forEach(function(n,t){$a.set(n,mt(t))}),Bo.functor=kt,Bo.xhr=At(Et),Bo.dsv=function(n,t){function e(n,e,i){arguments.length<3&&(i=e,e=null);var o=Ct(n,t,null==e?r:u(e),i);return o.row=function(n){return arguments.length?o.response(null==(e=n)?r:u(n)):e},o}function r(n){return e.parse(n.responseText)}function u(n){return function(t){return e.parse(t.responseText,n)}}function i(t){return t.map(o).join(n)}function o(n){return a.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var a=new RegExp('["'+n+"\n]"),c=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var u=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(u(n),e)}:u})},e.parseRows=function(n,t){function e(){if(s>=l)return o;if(u)return u=!1,i;var t=s;if(34===n.charCodeAt(t)){for(var e=t;e++<l;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}s=e+2;var r=n.charCodeAt(e+1);return 13===r?(u=!0,10===n.charCodeAt(e+2)&&++s):10===r&&(u=!0),n.slice(t+1,e).replace(/""/g,'"')}for(;l>s;){var r=n.charCodeAt(s++),a=1;if(10===r)u=!0;else if(13===r)u=!0,10===n.charCodeAt(s)&&(++s,++a);else if(r!==c)continue;return n.slice(t,s-a)}return n.slice(t)}for(var r,u,i={},o={},a=[],l=n.length,s=0,f=0;(r=e())!==o;){for(var h=[];r!==i&&r!==o;)h.push(r),r=e();t&&null==(h=t(h,f++))||a.push(h)}return a},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new v,u=[];return t.forEach(function(n){for(var t in n)r.has(t)||u.push(r.add(t))}),[u.map(o).join(n)].concat(t.map(function(t){return u.map(function(n){return o(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(i).join("\n")},e},Bo.csv=Bo.dsv(",","text/csv"),Bo.tsv=Bo.dsv("	","text/tab-separated-values");var Ba,Wa,Ja,Ga,Ka,Qa=Qo[m(Qo,"requestAnimationFrame")]||function(n){setTimeout(n,17)};Bo.timer=function(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now());var u=e+t,i={c:n,t:u,f:!1,n:null};Wa?Wa.n=i:Ba=i,Wa=i,Ja||(Ga=clearTimeout(Ga),Ja=1,Qa(Lt))},Bo.timer.flush=function(){Tt(),qt()},Bo.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)};var nc=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"].map(Dt);Bo.formatPrefix=function(n,t){var e=0;return n&&(0>n&&(n*=-1),t&&(n=Bo.round(n,Rt(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),nc[8+e/3]};var tc=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,ec=Bo.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=Bo.round(n,Rt(n,t))).toFixed(Math.max(0,Math.min(20,Rt(n*(1+1e-15),t))))}}),rc=Bo.time={},uc=Date;jt.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){ic.setUTCDate.apply(this._,arguments)},setDay:function(){ic.setUTCDay.apply(this._,arguments)},setFullYear:function(){ic.setUTCFullYear.apply(this._,arguments)},setHours:function(){ic.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){ic.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){ic.setUTCMinutes.apply(this._,arguments)},setMonth:function(){ic.setUTCMonth.apply(this._,arguments)},setSeconds:function(){ic.setUTCSeconds.apply(this._,arguments)},setTime:function(){ic.setTime.apply(this._,arguments)}};var ic=Date.prototype;rc.year=Ft(function(n){return n=rc.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),rc.years=rc.year.range,rc.years.utc=rc.year.utc.range,rc.day=Ft(function(n){var t=new uc(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),rc.days=rc.day.range,rc.days.utc=rc.day.utc.range,rc.dayOfYear=function(n){var t=rc.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(n,t){t=7-t;var e=rc[n]=Ft(function(n){return(n=rc.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=rc.year(n).getDay();return Math.floor((rc.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});rc[n+"s"]=e.range,rc[n+"s"].utc=e.utc.range,rc[n+"OfYear"]=function(n){var e=rc.year(n).getDay();return Math.floor((rc.dayOfYear(n)+(e+t)%7)/7)}}),rc.week=rc.sunday,rc.weeks=rc.sunday.range,rc.weeks.utc=rc.sunday.utc.range,rc.weekOfYear=rc.sundayOfYear;var oc={"-":"",_:" ",0:"0"},ac=/^\s*\d+/,cc=/^%/;Bo.locale=function(n){return{numberFormat:Pt(n),timeFormat:Ot(n)}};var lc=Bo.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Bo.format=lc.numberFormat,Bo.geo={},ce.prototype={s:0,t:0,add:function(n){le(n,this.t,sc),le(sc.s,this.s,this),this.s?this.t+=sc.t:this.s=sc.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var sc=new ce;Bo.geo.stream=function(n,t){n&&fc.hasOwnProperty(n.type)?fc[n.type](n,t):se(n,t)};var fc={Feature:function(n,t){se(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,u=e.length;++r<u;)se(e[r].geometry,t)}},hc={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){fe(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)fe(e[r],t,0)},Polygon:function(n,t){he(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)he(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,u=e.length;++r<u;)se(e[r],t)}};Bo.geo.area=function(n){return gc=0,Bo.geo.stream(n,vc),gc};var gc,pc=new ce,vc={sphere:function(){gc+=4*Ea},point:y,lineStart:y,lineEnd:y,polygonStart:function(){pc.reset(),vc.lineStart=ge},polygonEnd:function(){var n=2*pc;gc+=0>n?4*Ea+n:n,vc.lineStart=vc.lineEnd=vc.point=y}};Bo.geo.bounds=function(){function n(n,t){x.push(M=[s=n,h=n]),f>t&&(f=t),t>g&&(g=t)}function t(t,e){var r=pe([t*La,e*La]);if(m){var u=de(m,r),i=[u[1],-u[0],0],o=de(i,u);xe(o),o=Me(o);var c=t-p,l=c>0?1:-1,v=o[0]*Ta*l,d=ca(c)>180;if(d^(v>l*p&&l*t>v)){var y=o[1]*Ta;y>g&&(g=y)}else if(v=(v+360)%360-180,d^(v>l*p&&l*t>v)){var y=-o[1]*Ta;f>y&&(f=y)}else f>e&&(f=e),e>g&&(g=e);d?p>t?a(s,t)>a(s,h)&&(h=t):a(t,h)>a(s,h)&&(s=t):h>=s?(s>t&&(s=t),t>h&&(h=t)):t>p?a(s,t)>a(s,h)&&(h=t):a(t,h)>a(s,h)&&(s=t)}else n(t,e);m=r,p=t}function e(){_.point=t}function r(){M[0]=s,M[1]=h,_.point=n,m=null}function u(n,e){if(m){var r=n-p;y+=ca(r)>180?r+(r>0?360:-360):r}else v=n,d=e;vc.point(n,e),t(n,e)}function i(){vc.lineStart()}function o(){u(v,d),vc.lineEnd(),ca(y)>Na&&(s=-(h=180)),M[0]=s,M[1]=h,m=null}function a(n,t){return(t-=n)<0?t+360:t}function c(n,t){return n[0]-t[0]}function l(n,t){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var s,f,h,g,p,v,d,m,y,x,M,_={point:n,lineStart:e,lineEnd:r,polygonStart:function(){_.point=u,_.lineStart=i,_.lineEnd=o,y=0,vc.polygonStart()},polygonEnd:function(){vc.polygonEnd(),_.point=n,_.lineStart=e,_.lineEnd=r,0>pc?(s=-(h=180),f=-(g=90)):y>Na?g=90:-Na>y&&(f=-90),M[0]=s,M[1]=h}};return function(n){g=h=-(s=f=1/0),x=[],Bo.geo.stream(n,_);
var t=x.length;if(t){x.sort(c);for(var e,r=1,u=x[0],i=[u];t>r;++r)e=x[r],l(e[0],u)||l(e[1],u)?(a(u[0],e[1])>a(u[0],u[1])&&(u[1]=e[1]),a(e[0],u[1])>a(u[0],u[1])&&(u[0]=e[0])):i.push(u=e);for(var o,e,p=-1/0,t=i.length-1,r=0,u=i[t];t>=r;u=e,++r)e=i[r],(o=a(u[1],e[0]))>p&&(p=o,s=e[0],h=u[1])}return x=M=null,1/0===s||1/0===f?[[0/0,0/0],[0/0,0/0]]:[[s,f],[h,g]]}}(),Bo.geo.centroid=function(n){dc=mc=yc=xc=Mc=_c=bc=wc=Sc=kc=Ec=0,Bo.geo.stream(n,Ac);var t=Sc,e=kc,r=Ec,u=t*t+e*e+r*r;return za>u&&(t=_c,e=bc,r=wc,Na>mc&&(t=yc,e=xc,r=Mc),u=t*t+e*e+r*r,za>u)?[0/0,0/0]:[Math.atan2(e,t)*Ta,nt(r/Math.sqrt(u))*Ta]};var dc,mc,yc,xc,Mc,_c,bc,wc,Sc,kc,Ec,Ac={sphere:y,point:be,lineStart:Se,lineEnd:ke,polygonStart:function(){Ac.lineStart=Ee},polygonEnd:function(){Ac.lineStart=Se}},Cc=Le(Ae,De,Ue,[-Ea,-Ea/2]),Nc=1e9;Bo.geo.clipExtent=function(){var n,t,e,r,u,i,o={stream:function(n){return u&&(u.valid=!1),u=i(n),u.valid=!0,u},extent:function(a){return arguments.length?(i=Oe(n=+a[0][0],t=+a[0][1],e=+a[1][0],r=+a[1][1]),u&&(u.valid=!1,u=null),o):[[n,t],[e,r]]}};return o.extent([[0,0],[960,500]])},(Bo.geo.conicEqualArea=function(){return Ie(Ze)}).raw=Ze,Bo.geo.albers=function(){return Bo.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},Bo.geo.albersUsa=function(){function n(n){var i=n[0],o=n[1];return t=null,e(i,o),t||(r(i,o),t)||u(i,o),t}var t,e,r,u,i=Bo.geo.albers(),o=Bo.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),a=Bo.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(n,e){t=[n,e]}};return n.invert=function(n){var t=i.scale(),e=i.translate(),r=(n[0]-e[0])/t,u=(n[1]-e[1])/t;return(u>=.12&&.234>u&&r>=-.425&&-.214>r?o:u>=.166&&.234>u&&r>=-.214&&-.115>r?a:i).invert(n)},n.stream=function(n){var t=i.stream(n),e=o.stream(n),r=a.stream(n);return{point:function(n,u){t.point(n,u),e.point(n,u),r.point(n,u)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision=function(t){return arguments.length?(i.precision(t),o.precision(t),a.precision(t),n):i.precision()},n.scale=function(t){return arguments.length?(i.scale(t),o.scale(.35*t),a.scale(t),n.translate(i.translate())):i.scale()},n.translate=function(t){if(!arguments.length)return i.translate();var l=i.scale(),s=+t[0],f=+t[1];return e=i.translate(t).clipExtent([[s-.455*l,f-.238*l],[s+.455*l,f+.238*l]]).stream(c).point,r=o.translate([s-.307*l,f+.201*l]).clipExtent([[s-.425*l+Na,f+.12*l+Na],[s-.214*l-Na,f+.234*l-Na]]).stream(c).point,u=a.translate([s-.205*l,f+.212*l]).clipExtent([[s-.214*l+Na,f+.166*l+Na],[s-.115*l-Na,f+.234*l-Na]]).stream(c).point,n},n.scale(1070)};var zc,Lc,Tc,qc,Rc,Dc,Pc={point:y,lineStart:y,lineEnd:y,polygonStart:function(){Lc=0,Pc.lineStart=Ve},polygonEnd:function(){Pc.lineStart=Pc.lineEnd=Pc.point=y,zc+=ca(Lc/2)}},Uc={point:Xe,lineStart:y,lineEnd:y,polygonStart:y,polygonEnd:y},jc={point:We,lineStart:Je,lineEnd:Ge,polygonStart:function(){jc.lineStart=Ke},polygonEnd:function(){jc.point=We,jc.lineStart=Je,jc.lineEnd=Ge}};Bo.geo.path=function(){function n(n){return n&&("function"==typeof a&&i.pointRadius(+a.apply(this,arguments)),o&&o.valid||(o=u(i)),Bo.geo.stream(n,o)),i.result()}function t(){return o=null,n}var e,r,u,i,o,a=4.5;return n.area=function(n){return zc=0,Bo.geo.stream(n,u(Pc)),zc},n.centroid=function(n){return yc=xc=Mc=_c=bc=wc=Sc=kc=Ec=0,Bo.geo.stream(n,u(jc)),Ec?[Sc/Ec,kc/Ec]:wc?[_c/wc,bc/wc]:Mc?[yc/Mc,xc/Mc]:[0/0,0/0]},n.bounds=function(n){return Rc=Dc=-(Tc=qc=1/0),Bo.geo.stream(n,u(Uc)),[[Tc,qc],[Rc,Dc]]},n.projection=function(n){return arguments.length?(u=(e=n)?n.stream||tr(n):Et,t()):e},n.context=function(n){return arguments.length?(i=null==(r=n)?new $e:new Qe(n),"function"!=typeof a&&i.pointRadius(a),t()):r},n.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(i.pointRadius(+t),+t),n):a},n.projection(Bo.geo.albersUsa()).context(null)},Bo.geo.transform=function(n){return{stream:function(t){var e=new er(t);for(var r in n)e[r]=n[r];return e}}},er.prototype={point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},Bo.geo.projection=ur,Bo.geo.projectionMutator=ir,(Bo.geo.equirectangular=function(){return ur(ar)}).raw=ar.invert=ar,Bo.geo.rotation=function(n){function t(t){return t=n(t[0]*La,t[1]*La),t[0]*=Ta,t[1]*=Ta,t}return n=lr(n[0]%360*La,n[1]*La,n.length>2?n[2]*La:0),t.invert=function(t){return t=n.invert(t[0]*La,t[1]*La),t[0]*=Ta,t[1]*=Ta,t},t},cr.invert=ar,Bo.geo.circle=function(){function n(){var n="function"==typeof r?r.apply(this,arguments):r,t=lr(-n[0]*La,-n[1]*La,0).invert,u=[];return e(null,null,1,{point:function(n,e){u.push(n=t(n,e)),n[0]*=Ta,n[1]*=Ta}}),{type:"Polygon",coordinates:[u]}}var t,e,r=[0,0],u=6;return n.origin=function(t){return arguments.length?(r=t,n):r},n.angle=function(r){return arguments.length?(e=gr((t=+r)*La,u*La),n):t},n.precision=function(r){return arguments.length?(e=gr(t*La,(u=+r)*La),n):u},n.angle(90)},Bo.geo.distance=function(n,t){var e,r=(t[0]-n[0])*La,u=n[1]*La,i=t[1]*La,o=Math.sin(r),a=Math.cos(r),c=Math.sin(u),l=Math.cos(u),s=Math.sin(i),f=Math.cos(i);return Math.atan2(Math.sqrt((e=f*o)*e+(e=l*s-c*f*a)*e),c*s+l*f*a)},Bo.geo.graticule=function(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return Bo.range(Math.ceil(i/d)*d,u,d).map(h).concat(Bo.range(Math.ceil(l/m)*m,c,m).map(g)).concat(Bo.range(Math.ceil(r/p)*p,e,p).filter(function(n){return ca(n%d)>Na}).map(s)).concat(Bo.range(Math.ceil(a/v)*v,o,v).filter(function(n){return ca(n%m)>Na}).map(f))}var e,r,u,i,o,a,c,l,s,f,h,g,p=10,v=p,d=90,m=360,y=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[h(i).concat(g(c).slice(1),h(u).reverse().slice(1),g(l).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent=function(t){return arguments.length?(i=+t[0][0],u=+t[1][0],l=+t[0][1],c=+t[1][1],i>u&&(t=i,i=u,u=t),l>c&&(t=l,l=c,c=t),n.precision(y)):[[i,l],[u,c]]},n.minorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],o=+t[1][1],r>e&&(t=r,r=e,e=t),a>o&&(t=a,a=o,o=t),n.precision(y)):[[r,a],[e,o]]},n.step=function(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep=function(t){return arguments.length?(d=+t[0],m=+t[1],n):[d,m]},n.minorStep=function(t){return arguments.length?(p=+t[0],v=+t[1],n):[p,v]},n.precision=function(t){return arguments.length?(y=+t,s=vr(a,o,90),f=dr(r,e,y),h=vr(l,c,90),g=dr(i,u,y),n):y},n.majorExtent([[-180,-90+Na],[180,90-Na]]).minorExtent([[-180,-80-Na],[180,80+Na]])},Bo.geo.greatArc=function(){function n(){return{type:"LineString",coordinates:[t||r.apply(this,arguments),e||u.apply(this,arguments)]}}var t,e,r=mr,u=yr;return n.distance=function(){return Bo.geo.distance(t||r.apply(this,arguments),e||u.apply(this,arguments))},n.source=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,n):r},n.target=function(t){return arguments.length?(u=t,e="function"==typeof t?null:t,n):u},n.precision=function(){return arguments.length?n:0},n},Bo.geo.interpolate=function(n,t){return xr(n[0]*La,n[1]*La,t[0]*La,t[1]*La)},Bo.geo.length=function(n){return Fc=0,Bo.geo.stream(n,Hc),Fc};var Fc,Hc={sphere:y,point:y,lineStart:Mr,lineEnd:y,polygonStart:y,polygonEnd:y},Oc=_r(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(Bo.geo.azimuthalEqualArea=function(){return ur(Oc)}).raw=Oc;var Yc=_r(function(n){var t=Math.acos(n);return t&&t/Math.sin(t)},Et);(Bo.geo.azimuthalEquidistant=function(){return ur(Yc)}).raw=Yc,(Bo.geo.conicConformal=function(){return Ie(br)}).raw=br,(Bo.geo.conicEquidistant=function(){return Ie(wr)}).raw=wr;var Ic=_r(function(n){return 1/n},Math.atan);(Bo.geo.gnomonic=function(){return ur(Ic)}).raw=Ic,Sr.invert=function(n,t){return[n,2*Math.atan(Math.exp(t))-Ca]},(Bo.geo.mercator=function(){return kr(Sr)}).raw=Sr;var Zc=_r(function(){return 1},Math.asin);(Bo.geo.orthographic=function(){return ur(Zc)}).raw=Zc;var Vc=_r(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(Bo.geo.stereographic=function(){return ur(Vc)}).raw=Vc,Er.invert=function(n,t){return[-t,2*Math.atan(Math.exp(n))-Ca]},(Bo.geo.transverseMercator=function(){var n=kr(Er),t=n.center,e=n.rotate;return n.center=function(n){return n?t([-n[1],n[0]]):(n=t(),[n[1],-n[0]])},n.rotate=function(n){return n?e([n[0],n[1],n.length>2?n[2]+90:90]):(n=e(),[n[0],n[1],n[2]-90])},e([0,0,90])}).raw=Er,Bo.geom={},Bo.geom.hull=function(n){function t(n){if(n.length<3)return[];var t,u=kt(e),i=kt(r),o=n.length,a=[],c=[];for(t=0;o>t;t++)a.push([+u.call(this,n[t],t),+i.call(this,n[t],t),t]);for(a.sort(zr),t=0;o>t;t++)c.push([a[t][0],-a[t][1]]);var l=Nr(a),s=Nr(c),f=s[0]===l[0],h=s[s.length-1]===l[l.length-1],g=[];for(t=l.length-1;t>=0;--t)g.push(n[a[l[t]][2]]);for(t=+f;t<s.length-h;++t)g.push(n[a[s[t]][2]]);return g}var e=Ar,r=Cr;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t)},Bo.geom.polygon=function(n){return ga(n,Xc),n};var Xc=Bo.geom.polygon.prototype=[];Xc.area=function(){for(var n,t=-1,e=this.length,r=this[e-1],u=0;++t<e;)n=r,r=this[t],u+=n[1]*r[0]-n[0]*r[1];return.5*u},Xc.centroid=function(n){var t,e,r=-1,u=this.length,i=0,o=0,a=this[u-1];for(arguments.length||(n=-1/(6*this.area()));++r<u;)t=a,a=this[r],e=t[0]*a[1]-a[0]*t[1],i+=(t[0]+a[0])*e,o+=(t[1]+a[1])*e;return[i*n,o*n]},Xc.clip=function(n){for(var t,e,r,u,i,o,a=qr(n),c=-1,l=this.length-qr(this),s=this[l-1];++c<l;){for(t=n.slice(),n.length=0,u=this[c],i=t[(r=t.length-a)-1],e=-1;++e<r;)o=t[e],Lr(o,s,u)?(Lr(i,s,u)||n.push(Tr(i,o,s,u)),n.push(o)):Lr(i,s,u)&&n.push(Tr(i,o,s,u)),i=o;a&&n.push(n[0]),s=u}return n};var $c,Bc,Wc,Jc,Gc,Kc=[],Qc=[];Or.prototype.prepare=function(){for(var n,t=this.edges,e=t.length;e--;)n=t[e].edge,n.b&&n.a||t.splice(e,1);return t.sort(Ir),t.length},Qr.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},nu.prototype={insert:function(n,t){var e,r,u;if(n){if(t.P=n,t.N=n.N,n.N&&(n.N.P=t),n.N=t,n.R){for(n=n.R;n.L;)n=n.L;n.L=t}else n.R=t;e=n}else this._?(n=uu(this._),t.P=null,t.N=n,n.P=n.L=t,e=n):(t.P=t.N=null,this._=t,e=null);for(t.L=t.R=null,t.U=e,t.C=!0,n=t;e&&e.C;)r=e.U,e===r.L?(u=r.R,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.R&&(eu(this,e),n=e,e=n.U),e.C=!1,r.C=!0,ru(this,r))):(u=r.L,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.L&&(ru(this,e),n=e,e=n.U),e.C=!1,r.C=!0,eu(this,r))),e=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var t,e,r,u=n.U,i=n.L,o=n.R;if(e=i?o?uu(o):i:o,u?u.L===n?u.L=e:u.R=e:this._=e,i&&o?(r=e.C,e.C=n.C,e.L=i,i.U=e,e!==o?(u=e.U,e.U=n.U,n=e.R,u.L=n,e.R=o,o.U=e):(e.U=u,u=e,n=e.R)):(r=n.C,n=e),n&&(n.U=u),!r){if(n&&n.C)return n.C=!1,void 0;do{if(n===this._)break;if(n===u.L){if(t=u.R,t.C&&(t.C=!1,u.C=!0,eu(this,u),t=u.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,ru(this,t),t=u.R),t.C=u.C,u.C=t.R.C=!1,eu(this,u),n=this._;break}}else if(t=u.L,t.C&&(t.C=!1,u.C=!0,ru(this,u),t=u.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,eu(this,t),t=u.L),t.C=u.C,u.C=t.L.C=!1,ru(this,u),n=this._;break}t.C=!0,n=u,u=u.U}while(!n.C);n&&(n.C=!1)}}},Bo.geom.voronoi=function(n){function t(n){var t=new Array(n.length),r=a[0][0],u=a[0][1],i=a[1][0],o=a[1][1];return iu(e(n),a).cells.forEach(function(e,a){var c=e.edges,l=e.site,s=t[a]=c.length?c.map(function(n){var t=n.start();return[t.x,t.y]}):l.x>=r&&l.x<=i&&l.y>=u&&l.y<=o?[[r,o],[i,o],[i,u],[r,u]]:[];s.point=n[a]}),t}function e(n){return n.map(function(n,t){return{x:Math.round(i(n,t)/Na)*Na,y:Math.round(o(n,t)/Na)*Na,i:t}})}var r=Ar,u=Cr,i=r,o=u,a=nl;return n?t(n):(t.links=function(n){return iu(e(n)).edges.filter(function(n){return n.l&&n.r}).map(function(t){return{source:n[t.l.i],target:n[t.r.i]}})},t.triangles=function(n){var t=[];return iu(e(n)).cells.forEach(function(e,r){for(var u,i,o=e.site,a=e.edges.sort(Ir),c=-1,l=a.length,s=a[l-1].edge,f=s.l===o?s.r:s.l;++c<l;)u=s,i=f,s=a[c].edge,f=s.l===o?s.r:s.l,r<i.i&&r<f.i&&au(o,i,f)<0&&t.push([n[r],n[i.i],n[f.i]])}),t},t.x=function(n){return arguments.length?(i=kt(r=n),t):r},t.y=function(n){return arguments.length?(o=kt(u=n),t):u},t.clipExtent=function(n){return arguments.length?(a=null==n?nl:n,t):a===nl?null:a},t.size=function(n){return arguments.length?t.clipExtent(n&&[[0,0],n]):a===nl?null:a&&a[1]},t)};var nl=[[-1e6,-1e6],[1e6,1e6]];Bo.geom.delaunay=function(n){return Bo.geom.voronoi().triangles(n)},Bo.geom.quadtree=function(n,t,e,r,u){function i(n){function i(n,t,e,r,u,i,o,a){if(!isNaN(e)&&!isNaN(r))if(n.leaf){var c=n.x,s=n.y;if(null!=c)if(ca(c-e)+ca(s-r)<.01)l(n,t,e,r,u,i,o,a);else{var f=n.point;n.x=n.y=n.point=null,l(n,f,c,s,u,i,o,a),l(n,t,e,r,u,i,o,a)}else n.x=e,n.y=r,n.point=t}else l(n,t,e,r,u,i,o,a)}function l(n,t,e,r,u,o,a,c){var l=.5*(u+a),s=.5*(o+c),f=e>=l,h=r>=s,g=(h<<1)+f;n.leaf=!1,n=n.nodes[g]||(n.nodes[g]=su()),f?u=l:a=l,h?o=s:c=s,i(n,t,e,r,u,o,a,c)}var s,f,h,g,p,v,d,m,y,x=kt(a),M=kt(c);if(null!=t)v=t,d=e,m=r,y=u;else if(m=y=-(v=d=1/0),f=[],h=[],p=n.length,o)for(g=0;p>g;++g)s=n[g],s.x<v&&(v=s.x),s.y<d&&(d=s.y),s.x>m&&(m=s.x),s.y>y&&(y=s.y),f.push(s.x),h.push(s.y);else for(g=0;p>g;++g){var _=+x(s=n[g],g),b=+M(s,g);v>_&&(v=_),d>b&&(d=b),_>m&&(m=_),b>y&&(y=b),f.push(_),h.push(b)}var w=m-v,S=y-d;w>S?y=d+w:m=v+S;var k=su();if(k.add=function(n){i(k,n,+x(n,++g),+M(n,g),v,d,m,y)},k.visit=function(n){fu(n,k,v,d,m,y)},g=-1,null==t){for(;++g<p;)i(k,n[g],f[g],h[g],v,d,m,y);--g}else n.forEach(k.add);return f=h=n=s=null,k}var o,a=Ar,c=Cr;return(o=arguments.length)?(a=cu,c=lu,3===o&&(u=e,r=t,e=t=0),i(n)):(i.x=function(n){return arguments.length?(a=n,i):a},i.y=function(n){return arguments.length?(c=n,i):c},i.extent=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=+n[0][0],e=+n[0][1],r=+n[1][0],u=+n[1][1]),i):null==t?null:[[t,e],[r,u]]},i.size=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=e=0,r=+n[0],u=+n[1]),i):null==t?null:[r-t,u-e]},i)},Bo.interpolateRgb=hu,Bo.interpolateObject=gu,Bo.interpolateNumber=pu,Bo.interpolateString=vu;var tl=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,el=new RegExp(tl.source,"g");Bo.interpolate=du,Bo.interpolators=[function(n,t){var e=typeof t;return("string"===e?$a.has(t)||/^(#|rgb\(|hsl\()/.test(t)?hu:vu:t instanceof it?hu:Array.isArray(t)?mu:"object"===e&&isNaN(t)?gu:pu)(n,t)}],Bo.interpolateArray=mu;var rl=function(){return Et},ul=Bo.map({linear:rl,poly:Su,quad:function(){return _u},cubic:function(){return bu},sin:function(){return ku},exp:function(){return Eu},circle:function(){return Au},elastic:Cu,back:Nu,bounce:function(){return zu}}),il=Bo.map({"in":Et,out:xu,"in-out":Mu,"out-in":function(n){return Mu(xu(n))}});Bo.ease=function(n){var t=n.indexOf("-"),e=t>=0?n.slice(0,t):n,r=t>=0?n.slice(t+1):"in";return e=ul.get(e)||rl,r=il.get(r)||Et,yu(r(e.apply(null,Wo.call(arguments,1))))},Bo.interpolateHcl=Lu,Bo.interpolateHsl=Tu,Bo.interpolateLab=qu,Bo.interpolateRound=Ru,Bo.transform=function(n){var t=Go.createElementNS(Bo.ns.prefix.svg,"g");return(Bo.transform=function(n){if(null!=n){t.setAttribute("transform",n);var e=t.transform.baseVal.consolidate()}return new Du(e?e.matrix:ol)})(n)},Du.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var ol={a:1,b:0,c:0,d:1,e:0,f:0};Bo.interpolateTransform=Fu,Bo.layout={},Bo.layout.bundle=function(){return function(n){for(var t=[],e=-1,r=n.length;++e<r;)t.push(Yu(n[e]));return t}},Bo.layout.chord=function(){function n(){var n,l,f,h,g,p={},v=[],d=Bo.range(i),m=[];for(e=[],r=[],n=0,h=-1;++h<i;){for(l=0,g=-1;++g<i;)l+=u[h][g];v.push(l),m.push(Bo.range(i)),n+=l}for(o&&d.sort(function(n,t){return o(v[n],v[t])}),a&&m.forEach(function(n,t){n.sort(function(n,e){return a(u[t][n],u[t][e])})}),n=(Aa-s*i)/n,l=0,h=-1;++h<i;){for(f=l,g=-1;++g<i;){var y=d[h],x=m[y][g],M=u[y][x],_=l,b=l+=M*n;p[y+"-"+x]={index:y,subindex:x,startAngle:_,endAngle:b,value:M}}r[y]={index:y,startAngle:f,endAngle:l,value:(l-f)/n},l+=s}for(h=-1;++h<i;)for(g=h-1;++g<i;){var w=p[h+"-"+g],S=p[g+"-"+h];(w.value||S.value)&&e.push(w.value<S.value?{source:S,target:w}:{source:w,target:S})}c&&t()}function t(){e.sort(function(n,t){return c((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,u,i,o,a,c,l={},s=0;return l.matrix=function(n){return arguments.length?(i=(u=n)&&u.length,e=r=null,l):u},l.padding=function(n){return arguments.length?(s=n,e=r=null,l):s},l.sortGroups=function(n){return arguments.length?(o=n,e=r=null,l):o},l.sortSubgroups=function(n){return arguments.length?(a=n,e=null,l):a},l.sortChords=function(n){return arguments.length?(c=n,e&&t(),l):c},l.chords=function(){return e||n(),e},l.groups=function(){return r||n(),r},l},Bo.layout.force=function(){function n(n){return function(t,e,r,u){if(t.point!==n){var i=t.cx-n.x,o=t.cy-n.y,a=u-e,c=i*i+o*o;if(c>a*a/d){if(p>c){var l=t.charge/c;n.px-=i*l,n.py-=o*l}return!0}if(t.point&&c&&p>c){var l=t.pointCharge/c;n.px-=i*l,n.py-=o*l}}return!t.charge}}function t(n){n.px=Bo.event.x,n.py=Bo.event.y,a.resume()}var e,r,u,i,o,a={},c=Bo.dispatch("start","tick","end"),l=[1,1],s=.9,f=al,h=cl,g=-30,p=ll,v=.1,d=.64,m=[],y=[];return a.tick=function(){if((r*=.99)<.005)return c.end({type:"end",alpha:r=0}),!0;var t,e,a,f,h,p,d,x,M,_=m.length,b=y.length;for(e=0;b>e;++e)a=y[e],f=a.source,h=a.target,x=h.x-f.x,M=h.y-f.y,(p=x*x+M*M)&&(p=r*i[e]*((p=Math.sqrt(p))-u[e])/p,x*=p,M*=p,h.x-=x*(d=f.weight/(h.weight+f.weight)),h.y-=M*d,f.x+=x*(d=1-d),f.y+=M*d);if((d=r*v)&&(x=l[0]/2,M=l[1]/2,e=-1,d))for(;++e<_;)a=m[e],a.x+=(x-a.x)*d,a.y+=(M-a.y)*d;if(g)for(Wu(t=Bo.geom.quadtree(m),r,o),e=-1;++e<_;)(a=m[e]).fixed||t.visit(n(a));for(e=-1;++e<_;)a=m[e],a.fixed?(a.x=a.px,a.y=a.py):(a.x-=(a.px-(a.px=a.x))*s,a.y-=(a.py-(a.py=a.y))*s);c.tick({type:"tick",alpha:r})},a.nodes=function(n){return arguments.length?(m=n,a):m},a.links=function(n){return arguments.length?(y=n,a):y},a.size=function(n){return arguments.length?(l=n,a):l},a.linkDistance=function(n){return arguments.length?(f="function"==typeof n?n:+n,a):f},a.distance=a.linkDistance,a.linkStrength=function(n){return arguments.length?(h="function"==typeof n?n:+n,a):h},a.friction=function(n){return arguments.length?(s=+n,a):s},a.charge=function(n){return arguments.length?(g="function"==typeof n?n:+n,a):g},a.chargeDistance=function(n){return arguments.length?(p=n*n,a):Math.sqrt(p)},a.gravity=function(n){return arguments.length?(v=+n,a):v},a.theta=function(n){return arguments.length?(d=n*n,a):Math.sqrt(d)},a.alpha=function(n){return arguments.length?(n=+n,r?r=n>0?n:0:n>0&&(c.start({type:"start",alpha:r=n}),Bo.timer(a.tick)),a):r},a.start=function(){function n(n,r){if(!e){for(e=new Array(c),a=0;c>a;++a)e[a]=[];for(a=0;l>a;++a){var u=y[a];e[u.source.index].push(u.target),e[u.target.index].push(u.source)}}for(var i,o=e[t],a=-1,l=o.length;++a<l;)if(!isNaN(i=o[a][n]))return i;return Math.random()*r}var t,e,r,c=m.length,s=y.length,p=l[0],v=l[1];for(t=0;c>t;++t)(r=m[t]).index=t,r.weight=0;for(t=0;s>t;++t)r=y[t],"number"==typeof r.source&&(r.source=m[r.source]),"number"==typeof r.target&&(r.target=m[r.target]),++r.source.weight,++r.target.weight;for(t=0;c>t;++t)r=m[t],isNaN(r.x)&&(r.x=n("x",p)),isNaN(r.y)&&(r.y=n("y",v)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(u=[],"function"==typeof f)for(t=0;s>t;++t)u[t]=+f.call(this,y[t],t);else for(t=0;s>t;++t)u[t]=f;if(i=[],"function"==typeof h)for(t=0;s>t;++t)i[t]=+h.call(this,y[t],t);else for(t=0;s>t;++t)i[t]=h;if(o=[],"function"==typeof g)for(t=0;c>t;++t)o[t]=+g.call(this,m[t],t);else for(t=0;c>t;++t)o[t]=g;return a.resume()},a.resume=function(){return a.alpha(.1)},a.stop=function(){return a.alpha(0)},a.drag=function(){return e||(e=Bo.behavior.drag().origin(Et).on("dragstart.force",Vu).on("drag.force",t).on("dragend.force",Xu)),arguments.length?(this.on("mouseover.force",$u).on("mouseout.force",Bu).call(e),void 0):e},Bo.rebind(a,c,"on")};var al=20,cl=1,ll=1/0;Bo.layout.hierarchy=function(){function n(u){var i,o=[u],a=[];for(u.depth=0;null!=(i=o.pop());)if(a.push(i),(l=e.call(n,i,i.depth))&&(c=l.length)){for(var c,l,s;--c>=0;)o.push(s=l[c]),s.parent=i,s.depth=i.depth+1;r&&(i.value=0),i.children=l}else r&&(i.value=+r.call(n,i,i.depth)||0),delete i.children;return Ku(u,function(n){var e,u;t&&(e=n.children)&&e.sort(t),r&&(u=n.parent)&&(u.value+=n.value)}),a}var t=ti,e=Qu,r=ni;return n.sort=function(e){return arguments.length?(t=e,n):t},n.children=function(t){return arguments.length?(e=t,n):e},n.value=function(t){return arguments.length?(r=t,n):r},n.revalue=function(t){return r&&(Gu(t,function(n){n.children&&(n.value=0)}),Ku(t,function(t){var e;t.children||(t.value=+r.call(n,t,t.depth)||0),(e=t.parent)&&(e.value+=t.value)})),t},n},Bo.layout.partition=function(){function n(t,e,r,u){var i=t.children;if(t.x=e,t.y=t.depth*u,t.dx=r,t.dy=u,i&&(o=i.length)){var o,a,c,l=-1;for(r=t.value?r/t.value:0;++l<o;)n(a=i[l],e,c=a.value*r,u),e+=c}}function t(n){var e=n.children,r=0;if(e&&(u=e.length))for(var u,i=-1;++i<u;)r=Math.max(r,t(e[i]));return 1+r}function e(e,i){var o=r.call(this,e,i);return n(o[0],0,u[0],u[1]/t(o[0])),o}var r=Bo.layout.hierarchy(),u=[1,1];return e.size=function(n){return arguments.length?(u=n,e):u},Ju(e,r)},Bo.layout.pie=function(){function n(i){var o=i.map(function(e,r){return+t.call(n,e,r)}),a=+("function"==typeof r?r.apply(this,arguments):r),c=(("function"==typeof u?u.apply(this,arguments):u)-a)/Bo.sum(o),l=Bo.range(i.length);null!=e&&l.sort(e===sl?function(n,t){return o[t]-o[n]}:function(n,t){return e(i[n],i[t])});var s=[];return l.forEach(function(n){var t;s[n]={data:i[n],value:t=o[n],startAngle:a,endAngle:a+=t*c}}),s}var t=Number,e=sl,r=0,u=Aa;return n.value=function(e){return arguments.length?(t=e,n):t},n.sort=function(t){return arguments.length?(e=t,n):e},n.startAngle=function(t){return arguments.length?(r=t,n):r},n.endAngle=function(t){return arguments.length?(u=t,n):u},n};var sl={};Bo.layout.stack=function(){function n(a,c){if(!(h=a.length))return a;var l=a.map(function(e,r){return t.call(n,e,r)}),s=l.map(function(t){return t.map(function(t,e){return[i.call(n,t,e),o.call(n,t,e)]})}),f=e.call(n,s,c);l=Bo.permute(l,f),s=Bo.permute(s,f);var h,g,p,v,d=r.call(n,s,c),m=l[0].length;for(p=0;m>p;++p)for(u.call(n,l[0][p],v=d[p],s[0][p][1]),g=1;h>g;++g)u.call(n,l[g][p],v+=s[g-1][p][1],s[g][p][1]);return a}var t=Et,e=oi,r=ai,u=ii,i=ri,o=ui;return n.values=function(e){return arguments.length?(t=e,n):t},n.order=function(t){return arguments.length?(e="function"==typeof t?t:fl.get(t)||oi,n):e},n.offset=function(t){return arguments.length?(r="function"==typeof t?t:hl.get(t)||ai,n):r},n.x=function(t){return arguments.length?(i=t,n):i},n.y=function(t){return arguments.length?(o=t,n):o},n.out=function(t){return arguments.length?(u=t,n):u},n};var fl=Bo.map({"inside-out":function(n){var t,e,r=n.length,u=n.map(ci),i=n.map(li),o=Bo.range(r).sort(function(n,t){return u[n]-u[t]}),a=0,c=0,l=[],s=[];for(t=0;r>t;++t)e=o[t],c>a?(a+=i[e],l.push(e)):(c+=i[e],s.push(e));return s.reverse().concat(l)},reverse:function(n){return Bo.range(n.length).reverse()},"default":oi}),hl=Bo.map({silhouette:function(n){var t,e,r,u=n.length,i=n[0].length,o=[],a=0,c=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];r>a&&(a=r),o.push(r)}for(e=0;i>e;++e)c[e]=(a-o[e])/2;return c},wiggle:function(n){var t,e,r,u,i,o,a,c,l,s=n.length,f=n[0],h=f.length,g=[];for(g[0]=c=l=0,e=1;h>e;++e){for(t=0,u=0;s>t;++t)u+=n[t][e][1];for(t=0,i=0,a=f[e][0]-f[e-1][0];s>t;++t){for(r=0,o=(n[t][e][1]-n[t][e-1][1])/(2*a);t>r;++r)o+=(n[r][e][1]-n[r][e-1][1])/a;i+=o*n[t][e][1]}g[e]=c-=u?i/u*a:0,l>c&&(l=c)}for(e=0;h>e;++e)g[e]-=l;return g},expand:function(n){var t,e,r,u=n.length,i=n[0].length,o=1/u,a=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];if(r)for(t=0;u>t;t++)n[t][e][1]/=r;else for(t=0;u>t;t++)n[t][e][1]=o}for(e=0;i>e;++e)a[e]=0;return a},zero:ai});Bo.layout.histogram=function(){function n(n,i){for(var o,a,c=[],l=n.map(e,this),s=r.call(this,l,i),f=u.call(this,s,l,i),i=-1,h=l.length,g=f.length-1,p=t?1:1/h;++i<g;)o=c[i]=[],o.dx=f[i+1]-(o.x=f[i]),o.y=0;if(g>0)for(i=-1;++i<h;)a=l[i],a>=s[0]&&a<=s[1]&&(o=c[Bo.bisect(f,a,1,g)-1],o.y+=p,o.push(n[i]));return c}var t=!0,e=Number,r=gi,u=fi;return n.value=function(t){return arguments.length?(e=t,n):e},n.range=function(t){return arguments.length?(r=kt(t),n):r},n.bins=function(t){return arguments.length?(u="number"==typeof t?function(n){return hi(n,t)}:kt(t),n):u},n.frequency=function(e){return arguments.length?(t=!!e,n):t},n},Bo.layout.pack=function(){function n(n,i){var o=e.call(this,n,i),a=o[0],c=u[0],l=u[1],s=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(a.x=a.y=0,Ku(a,function(n){n.r=+s(n.value)}),Ku(a,yi),r){var f=r*(t?1:Math.max(2*a.r/c,2*a.r/l))/2;Ku(a,function(n){n.r+=f}),Ku(a,yi),Ku(a,function(n){n.r-=f})}return _i(a,c/2,l/2,t?1:1/Math.max(2*a.r/c,2*a.r/l)),o}var t,e=Bo.layout.hierarchy().sort(pi),r=0,u=[1,1];return n.size=function(t){return arguments.length?(u=t,n):u},n.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,n):t},n.padding=function(t){return arguments.length?(r=+t,n):r},Ju(n,e)},Bo.layout.tree=function(){function n(n,u){var s=o.call(this,n,u),f=s[0],h=t(f);if(Ku(h,e),h.parent.m=-h.z,Gu(h,r),l)Gu(f,i);else{var g=f,p=f,v=f;Gu(f,function(n){n.x<g.x&&(g=n),n.x>p.x&&(p=n),n.depth>v.depth&&(v=n)});var d=a(g,p)/2-g.x,m=c[0]/(p.x+a(p,g)/2+d),y=c[1]/(v.depth||1);Gu(f,function(n){n.x=(n.x+d)*m,n.y=n.depth*y})}return s}function t(n){for(var t,e={A:null,children:[n]},r=[e];null!=(t=r.pop());)for(var u,i=t.children,o=0,a=i.length;a>o;++o)r.push((i[o]=u={_:i[o],parent:t,children:(u=i[o].children)&&u.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:o}).a=u);return e.children[0]}function e(n){var t=n.children,e=n.parent.children,r=n.i?e[n.i-1]:null;if(t.length){Ai(n);var i=(t[0].z+t[t.length-1].z)/2;r?(n.z=r.z+a(n._,r._),n.m=n.z-i):n.z=i}else r&&(n.z=r.z+a(n._,r._));n.parent.A=u(n,r,n.parent.A||e[0])}function r(n){n._.x=n.z+n.parent.m,n.m+=n.parent.m}function u(n,t,e){if(t){for(var r,u=n,i=n,o=t,c=u.parent.children[0],l=u.m,s=i.m,f=o.m,h=c.m;o=ki(o),u=Si(u),o&&u;)c=Si(c),i=ki(i),i.a=n,r=o.z+f-u.z-l+a(o._,u._),r>0&&(Ei(Ci(o,n,e),n,r),l+=r,s+=r),f+=o.m,l+=u.m,h+=c.m,s+=i.m;o&&!ki(i)&&(i.t=o,i.m+=f-s),u&&!Si(c)&&(c.t=u,c.m+=l-h,e=n)}return e}function i(n){n.x*=c[0],n.y=n.depth*c[1]}var o=Bo.layout.hierarchy().sort(null).value(null),a=wi,c=[1,1],l=null;return n.separation=function(t){return arguments.length?(a=t,n):a},n.size=function(t){return arguments.length?(l=null==(c=t)?i:null,n):l?null:c},n.nodeSize=function(t){return arguments.length?(l=null==(c=t)?null:i,n):l?c:null},Ju(n,o)},Bo.layout.cluster=function(){function n(n,i){var o,a=t.call(this,n,i),c=a[0],l=0;Ku(c,function(n){var t=n.children;t&&t.length?(n.x=zi(t),n.y=Ni(t)):(n.x=o?l+=e(n,o):0,n.y=0,o=n)});var s=Li(c),f=Ti(c),h=s.x-e(s,f)/2,g=f.x+e(f,s)/2;return Ku(c,u?function(n){n.x=(n.x-c.x)*r[0],n.y=(c.y-n.y)*r[1]}:function(n){n.x=(n.x-h)/(g-h)*r[0],n.y=(1-(c.y?n.y/c.y:1))*r[1]}),a}var t=Bo.layout.hierarchy().sort(null).value(null),e=wi,r=[1,1],u=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(u=null==(r=t),n):u?null:r},n.nodeSize=function(t){return arguments.length?(u=null!=(r=t),n):u?r:null},Ju(n,t)},Bo.layout.treemap=function(){function n(n,t){for(var e,r,u=-1,i=n.length;++u<i;)r=(e=n[u]).value*(0>t?0:t),e.area=isNaN(r)||0>=r?0:r}function t(e){var i=e.children;if(i&&i.length){var o,a,c,l=f(e),s=[],h=i.slice(),p=1/0,v="slice"===g?l.dx:"dice"===g?l.dy:"slice-dice"===g?1&e.depth?l.dy:l.dx:Math.min(l.dx,l.dy);for(n(h,l.dx*l.dy/e.value),s.area=0;(c=h.length)>0;)s.push(o=h[c-1]),s.area+=o.area,"squarify"!==g||(a=r(s,v))<=p?(h.pop(),p=a):(s.area-=s.pop().area,u(s,v,l,!1),v=Math.min(l.dx,l.dy),s.length=s.area=0,p=1/0);s.length&&(u(s,v,l,!0),s.length=s.area=0),i.forEach(t)}}function e(t){var r=t.children;if(r&&r.length){var i,o=f(t),a=r.slice(),c=[];for(n(a,o.dx*o.dy/t.value),c.area=0;i=a.pop();)c.push(i),c.area+=i.area,null!=i.z&&(u(c,i.z?o.dx:o.dy,o,!a.length),c.length=c.area=0);r.forEach(e)}}function r(n,t){for(var e,r=n.area,u=0,i=1/0,o=-1,a=n.length;++o<a;)(e=n[o].area)&&(i>e&&(i=e),e>u&&(u=e));return r*=r,t*=t,r?Math.max(t*u*p/r,r/(t*i*p)):1/0}function u(n,t,e,r){var u,i=-1,o=n.length,a=e.x,l=e.y,s=t?c(n.area/t):0;if(t==e.dx){for((r||s>e.dy)&&(s=e.dy);++i<o;)u=n[i],u.x=a,u.y=l,u.dy=s,a+=u.dx=Math.min(e.x+e.dx-a,s?c(u.area/s):0);u.z=!0,u.dx+=e.x+e.dx-a,e.y+=s,e.dy-=s}else{for((r||s>e.dx)&&(s=e.dx);++i<o;)u=n[i],u.x=a,u.y=l,u.dx=s,l+=u.dy=Math.min(e.y+e.dy-l,s?c(u.area/s):0);u.z=!1,u.dy+=e.y+e.dy-l,e.x+=s,e.dx-=s}}function i(r){var u=o||a(r),i=u[0];return i.x=0,i.y=0,i.dx=l[0],i.dy=l[1],o&&a.revalue(i),n([i],i.dx*i.dy/i.value),(o?e:t)(i),h&&(o=u),u}var o,a=Bo.layout.hierarchy(),c=Math.round,l=[1,1],s=null,f=qi,h=!1,g="squarify",p=.5*(1+Math.sqrt(5));return i.size=function(n){return arguments.length?(l=n,i):l},i.padding=function(n){function t(t){var e=n.call(i,t,t.depth);return null==e?qi(t):Ri(t,"number"==typeof e?[e,e,e,e]:e)}function e(t){return Ri(t,n)}if(!arguments.length)return s;var r;return f=null==(s=n)?qi:"function"==(r=typeof n)?t:"number"===r?(n=[n,n,n,n],e):e,i},i.round=function(n){return arguments.length?(c=n?Math.round:Number,i):c!=Number},i.sticky=function(n){return arguments.length?(h=n,o=null,i):h},i.ratio=function(n){return arguments.length?(p=n,i):p},i.mode=function(n){return arguments.length?(g=n+"",i):g},Ju(i,a)},Bo.random={normal:function(n,t){var e=arguments.length;return 2>e&&(t=1),1>e&&(n=0),function(){var e,r,u;do e=2*Math.random()-1,r=2*Math.random()-1,u=e*e+r*r;while(!u||u>1);return n+t*e*Math.sqrt(-2*Math.log(u)/u)}},logNormal:function(){var n=Bo.random.normal.apply(Bo,arguments);return function(){return Math.exp(n())}},bates:function(n){var t=Bo.random.irwinHall(n);return function(){return t()/n}},irwinHall:function(n){return function(){for(var t=0,e=0;n>e;e++)t+=Math.random();return t}}},Bo.scale={};var gl={floor:Et,ceil:Et};Bo.scale.linear=function(){return Oi([0,1],[0,1],du,!1)};var pl={s:1,g:1,p:1,r:1,e:1};Bo.scale.log=function(){return Wi(Bo.scale.linear().domain([0,1]),10,!0,[1,10])};var vl=Bo.format(".0e"),dl={floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};Bo.scale.pow=function(){return Ji(Bo.scale.linear(),1,[0,1])},Bo.scale.sqrt=function(){return Bo.scale.pow().exponent(.5)},Bo.scale.ordinal=function(){return Ki([],{t:"range",a:[[]]})},Bo.scale.category10=function(){return Bo.scale.ordinal().range(ml)},Bo.scale.category20=function(){return Bo.scale.ordinal().range(yl)},Bo.scale.category20b=function(){return Bo.scale.ordinal().range(xl)},Bo.scale.category20c=function(){return Bo.scale.ordinal().range(Ml)};var ml=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(yt),yl=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(yt),xl=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(yt),Ml=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(yt);Bo.scale.quantile=function(){return Qi([],[])
},Bo.scale.quantize=function(){return no(0,1,[0,1])},Bo.scale.threshold=function(){return to([.5],[0,1])},Bo.scale.identity=function(){return eo([0,1])},Bo.svg={},Bo.svg.arc=function(){function n(){var n=t.apply(this,arguments),i=e.apply(this,arguments),o=r.apply(this,arguments)+_l,a=u.apply(this,arguments)+_l,c=(o>a&&(c=o,o=a,a=c),a-o),l=Ea>c?"0":"1",s=Math.cos(o),f=Math.sin(o),h=Math.cos(a),g=Math.sin(a);return c>=bl?n?"M0,"+i+"A"+i+","+i+" 0 1,1 0,"+-i+"A"+i+","+i+" 0 1,1 0,"+i+"M0,"+n+"A"+n+","+n+" 0 1,0 0,"+-n+"A"+n+","+n+" 0 1,0 0,"+n+"Z":"M0,"+i+"A"+i+","+i+" 0 1,1 0,"+-i+"A"+i+","+i+" 0 1,1 0,"+i+"Z":n?"M"+i*s+","+i*f+"A"+i+","+i+" 0 "+l+",1 "+i*h+","+i*g+"L"+n*h+","+n*g+"A"+n+","+n+" 0 "+l+",0 "+n*s+","+n*f+"Z":"M"+i*s+","+i*f+"A"+i+","+i+" 0 "+l+",1 "+i*h+","+i*g+"L0,0"+"Z"}var t=ro,e=uo,r=io,u=oo;return n.innerRadius=function(e){return arguments.length?(t=kt(e),n):t},n.outerRadius=function(t){return arguments.length?(e=kt(t),n):e},n.startAngle=function(t){return arguments.length?(r=kt(t),n):r},n.endAngle=function(t){return arguments.length?(u=kt(t),n):u},n.centroid=function(){var n=(t.apply(this,arguments)+e.apply(this,arguments))/2,i=(r.apply(this,arguments)+u.apply(this,arguments))/2+_l;return[Math.cos(i)*n,Math.sin(i)*n]},n};var _l=-Ca,bl=Aa-Na;Bo.svg.line=function(){return ao(Et)};var wl=Bo.map({linear:co,"linear-closed":lo,step:so,"step-before":fo,"step-after":ho,basis:xo,"basis-open":Mo,"basis-closed":_o,bundle:bo,cardinal:vo,"cardinal-open":go,"cardinal-closed":po,monotone:Co});wl.forEach(function(n,t){t.key=n,t.closed=/-closed$/.test(n)});var Sl=[0,2/3,1/3,0],kl=[0,1/3,2/3,0],El=[0,1/6,2/3,1/6];Bo.svg.line.radial=function(){var n=ao(No);return n.radius=n.x,delete n.x,n.angle=n.y,delete n.y,n},fo.reverse=ho,ho.reverse=fo,Bo.svg.area=function(){return zo(Et)},Bo.svg.area.radial=function(){var n=zo(No);return n.radius=n.x,delete n.x,n.innerRadius=n.x0,delete n.x0,n.outerRadius=n.x1,delete n.x1,n.angle=n.y,delete n.y,n.startAngle=n.y0,delete n.y0,n.endAngle=n.y1,delete n.y1,n},Bo.svg.chord=function(){function n(n,a){var c=t(this,i,n,a),l=t(this,o,n,a);return"M"+c.p0+r(c.r,c.p1,c.a1-c.a0)+(e(c,l)?u(c.r,c.p1,c.r,c.p0):u(c.r,c.p1,l.r,l.p0)+r(l.r,l.p1,l.a1-l.a0)+u(l.r,l.p1,c.r,c.p0))+"Z"}function t(n,t,e,r){var u=t.call(n,e,r),i=a.call(n,u,r),o=c.call(n,u,r)+_l,s=l.call(n,u,r)+_l;return{r:i,a0:o,a1:s,p0:[i*Math.cos(o),i*Math.sin(o)],p1:[i*Math.cos(s),i*Math.sin(s)]}}function e(n,t){return n.a0==t.a0&&n.a1==t.a1}function r(n,t,e){return"A"+n+","+n+" 0 "+ +(e>Ea)+",1 "+t}function u(n,t,e,r){return"Q 0,0 "+r}var i=mr,o=yr,a=Lo,c=io,l=oo;return n.radius=function(t){return arguments.length?(a=kt(t),n):a},n.source=function(t){return arguments.length?(i=kt(t),n):i},n.target=function(t){return arguments.length?(o=kt(t),n):o},n.startAngle=function(t){return arguments.length?(c=kt(t),n):c},n.endAngle=function(t){return arguments.length?(l=kt(t),n):l},n},Bo.svg.diagonal=function(){function n(n,u){var i=t.call(this,n,u),o=e.call(this,n,u),a=(i.y+o.y)/2,c=[i,{x:i.x,y:a},{x:o.x,y:a},o];return c=c.map(r),"M"+c[0]+"C"+c[1]+" "+c[2]+" "+c[3]}var t=mr,e=yr,r=To;return n.source=function(e){return arguments.length?(t=kt(e),n):t},n.target=function(t){return arguments.length?(e=kt(t),n):e},n.projection=function(t){return arguments.length?(r=t,n):r},n},Bo.svg.diagonal.radial=function(){var n=Bo.svg.diagonal(),t=To,e=n.projection;return n.projection=function(n){return arguments.length?e(qo(t=n)):t},n},Bo.svg.symbol=function(){function n(n,r){return(Al.get(t.call(this,n,r))||Po)(e.call(this,n,r))}var t=Do,e=Ro;return n.type=function(e){return arguments.length?(t=kt(e),n):t},n.size=function(t){return arguments.length?(e=kt(t),n):e},n};var Al=Bo.map({circle:Po,cross:function(n){var t=Math.sqrt(n/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(n){var t=Math.sqrt(n/(2*Ll)),e=t*Ll;return"M0,"+-t+"L"+e+",0"+" 0,"+t+" "+-e+",0"+"Z"},square:function(n){var t=Math.sqrt(n)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"},"triangle-down":function(n){var t=Math.sqrt(n/zl),e=t*zl/2;return"M0,"+e+"L"+t+","+-e+" "+-t+","+-e+"Z"},"triangle-up":function(n){var t=Math.sqrt(n/zl),e=t*zl/2;return"M0,"+-e+"L"+t+","+e+" "+-t+","+e+"Z"}});Bo.svg.symbolTypes=Al.keys();var Cl,Nl,zl=Math.sqrt(3),Ll=Math.tan(30*La),Tl=[],ql=0;Tl.call=ya.call,Tl.empty=ya.empty,Tl.node=ya.node,Tl.size=ya.size,Bo.transition=function(n){return arguments.length?Cl?n.transition():n:_a.transition()},Bo.transition.prototype=Tl,Tl.select=function(n){var t,e,r,u=this.id,i=[];n=k(n);for(var o=-1,a=this.length;++o<a;){i.push(t=[]);for(var c=this[o],l=-1,s=c.length;++l<s;)(r=c[l])&&(e=n.call(r,r.__data__,l,o))?("__data__"in r&&(e.__data__=r.__data__),Ho(e,l,u,r.__transition__[u]),t.push(e)):t.push(null)}return Uo(i,u)},Tl.selectAll=function(n){var t,e,r,u,i,o=this.id,a=[];n=E(n);for(var c=-1,l=this.length;++c<l;)for(var s=this[c],f=-1,h=s.length;++f<h;)if(r=s[f]){i=r.__transition__[o],e=n.call(r,r.__data__,f,c),a.push(t=[]);for(var g=-1,p=e.length;++g<p;)(u=e[g])&&Ho(u,g,o,i),t.push(u)}return Uo(a,o)},Tl.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=U(n));for(var i=0,o=this.length;o>i;i++){u.push(t=[]);for(var e=this[i],a=0,c=e.length;c>a;a++)(r=e[a])&&n.call(r,r.__data__,a,i)&&t.push(r)}return Uo(u,this.id)},Tl.tween=function(n,t){var e=this.id;return arguments.length<2?this.node().__transition__[e].tween.get(n):F(this,null==t?function(t){t.__transition__[e].tween.remove(n)}:function(r){r.__transition__[e].tween.set(n,t)})},Tl.attr=function(n,t){function e(){this.removeAttribute(a)}function r(){this.removeAttributeNS(a.space,a.local)}function u(n){return null==n?e:(n+="",function(){var t,e=this.getAttribute(a);return e!==n&&(t=o(e,n),function(n){this.setAttribute(a,t(n))})})}function i(n){return null==n?r:(n+="",function(){var t,e=this.getAttributeNS(a.space,a.local);return e!==n&&(t=o(e,n),function(n){this.setAttributeNS(a.space,a.local,t(n))})})}if(arguments.length<2){for(t in n)this.attr(t,n[t]);return this}var o="transform"==n?Fu:du,a=Bo.ns.qualify(n);return jo(this,"attr."+n,t,a.local?i:u)},Tl.attrTween=function(n,t){function e(n,e){var r=t.call(this,n,e,this.getAttribute(u));return r&&function(n){this.setAttribute(u,r(n))}}function r(n,e){var r=t.call(this,n,e,this.getAttributeNS(u.space,u.local));return r&&function(n){this.setAttributeNS(u.space,u.local,r(n))}}var u=Bo.ns.qualify(n);return this.tween("attr."+n,u.local?r:e)},Tl.style=function(n,t,e){function r(){this.style.removeProperty(n)}function u(t){return null==t?r:(t+="",function(){var r,u=Qo.getComputedStyle(this,null).getPropertyValue(n);return u!==t&&(r=du(u,t),function(t){this.style.setProperty(n,r(t),e)})})}var i=arguments.length;if(3>i){if("string"!=typeof n){2>i&&(t="");for(e in n)this.style(e,n[e],t);return this}e=""}return jo(this,"style."+n,t,u)},Tl.styleTween=function(n,t,e){function r(r,u){var i=t.call(this,r,u,Qo.getComputedStyle(this,null).getPropertyValue(n));return i&&function(t){this.style.setProperty(n,i(t),e)}}return arguments.length<3&&(e=""),this.tween("style."+n,r)},Tl.text=function(n){return jo(this,"text",n,Fo)},Tl.remove=function(){return this.each("end.transition",function(){var n;this.__transition__.count<2&&(n=this.parentNode)&&n.removeChild(this)})},Tl.ease=function(n){var t=this.id;return arguments.length<1?this.node().__transition__[t].ease:("function"!=typeof n&&(n=Bo.ease.apply(Bo,arguments)),F(this,function(e){e.__transition__[t].ease=n}))},Tl.delay=function(n){var t=this.id;return arguments.length<1?this.node().__transition__[t].delay:F(this,"function"==typeof n?function(e,r,u){e.__transition__[t].delay=+n.call(e,e.__data__,r,u)}:(n=+n,function(e){e.__transition__[t].delay=n}))},Tl.duration=function(n){var t=this.id;return arguments.length<1?this.node().__transition__[t].duration:F(this,"function"==typeof n?function(e,r,u){e.__transition__[t].duration=Math.max(1,n.call(e,e.__data__,r,u))}:(n=Math.max(1,n),function(e){e.__transition__[t].duration=n}))},Tl.each=function(n,t){var e=this.id;if(arguments.length<2){var r=Nl,u=Cl;Cl=e,F(this,function(t,r,u){Nl=t.__transition__[e],n.call(t,t.__data__,r,u)}),Nl=r,Cl=u}else F(this,function(r){var u=r.__transition__[e];(u.event||(u.event=Bo.dispatch("start","end"))).on(n,t)});return this},Tl.transition=function(){for(var n,t,e,r,u=this.id,i=++ql,o=[],a=0,c=this.length;c>a;a++){o.push(n=[]);for(var t=this[a],l=0,s=t.length;s>l;l++)(e=t[l])&&(r=Object.create(e.__transition__[u]),r.delay+=r.duration,Ho(e,l,i,r)),n.push(e)}return Uo(o,i)},Bo.svg.axis=function(){function n(n){n.each(function(){var n,l=Bo.select(this),s=this.__chart__||e,f=this.__chart__=e.copy(),h=null==c?f.ticks?f.ticks.apply(f,a):f.domain():c,g=null==t?f.tickFormat?f.tickFormat.apply(f,a):Et:t,p=l.selectAll(".tick").data(h,f),v=p.enter().insert("g",".domain").attr("class","tick").style("opacity",Na),d=Bo.transition(p.exit()).style("opacity",Na).remove(),m=Bo.transition(p.order()).style("opacity",1),y=Math.max(u,0)+o,x=Pi(f),M=l.selectAll(".domain").data([0]),_=(M.enter().append("path").attr("class","domain"),Bo.transition(M));v.append("line"),v.append("text");var b,w,S,k,E=v.select("line"),A=m.select("line"),C=p.select("text").text(g),N=v.select("text"),z=m.select("text"),L="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(n=Oo,b="x",S="y",w="x2",k="y2",C.attr("dy",0>L?"0em":".71em").style("text-anchor","middle"),_.attr("d","M"+x[0]+","+L*i+"V0H"+x[1]+"V"+L*i)):(n=Yo,b="y",S="x",w="y2",k="x2",C.attr("dy",".32em").style("text-anchor",0>L?"end":"start"),_.attr("d","M"+L*i+","+x[0]+"H0V"+x[1]+"H"+L*i)),E.attr(k,L*u),N.attr(S,L*y),A.attr(w,0).attr(k,L*u),z.attr(b,0).attr(S,L*y),f.rangeBand){var T=f,q=T.rangeBand()/2;s=f=function(n){return T(n)+q}}else s.rangeBand?s=f:d.call(n,f,s);v.call(n,s,f),m.call(n,f,f)})}var t,e=Bo.scale.linear(),r=Rl,u=6,i=6,o=3,a=[10],c=null;return n.scale=function(t){return arguments.length?(e=t,n):e},n.orient=function(t){return arguments.length?(r=t in Dl?t+"":Rl,n):r},n.ticks=function(){return arguments.length?(a=arguments,n):a},n.tickValues=function(t){return arguments.length?(c=t,n):c},n.tickFormat=function(e){return arguments.length?(t=e,n):t},n.tickSize=function(t){var e=arguments.length;return e?(u=+t,i=+arguments[e-1],n):u},n.innerTickSize=function(t){return arguments.length?(u=+t,n):u},n.outerTickSize=function(t){return arguments.length?(i=+t,n):i},n.tickPadding=function(t){return arguments.length?(o=+t,n):o},n.tickSubdivide=function(){return arguments.length&&n},n};var Rl="bottom",Dl={top:1,right:1,bottom:1,left:1};Bo.svg.brush=function(){function n(i){i.each(function(){var i=Bo.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",u).on("touchstart.brush",u),o=i.selectAll(".background").data([0]);o.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),i.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var a=i.selectAll(".resize").data(p,Et);a.exit().remove(),a.enter().append("g").attr("class",function(n){return"resize "+n}).style("cursor",function(n){return Pl[n]}).append("rect").attr("x",function(n){return/[ew]$/.test(n)?-3:null}).attr("y",function(n){return/^[ns]/.test(n)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),a.style("display",n.empty()?"none":null);var s,f=Bo.transition(i),h=Bo.transition(o);c&&(s=Pi(c),h.attr("x",s[0]).attr("width",s[1]-s[0]),e(f)),l&&(s=Pi(l),h.attr("y",s[0]).attr("height",s[1]-s[0]),r(f)),t(f)})}function t(n){n.selectAll(".resize").attr("transform",function(n){return"translate("+s[+/e$/.test(n)]+","+f[+/^s/.test(n)]+")"})}function e(n){n.select(".extent").attr("x",s[0]),n.selectAll(".extent,.n>rect,.s>rect").attr("width",s[1]-s[0])}function r(n){n.select(".extent").attr("y",f[0]),n.selectAll(".extent,.e>rect,.w>rect").attr("height",f[1]-f[0])}function u(){function u(){32==Bo.event.keyCode&&(C||(y=null,z[0]-=s[1],z[1]-=f[1],C=2),_())}function p(){32==Bo.event.keyCode&&2==C&&(z[0]+=s[1],z[1]+=f[1],C=0,_())}function v(){var n=Bo.mouse(M),u=!1;x&&(n[0]+=x[0],n[1]+=x[1]),C||(Bo.event.altKey?(y||(y=[(s[0]+s[1])/2,(f[0]+f[1])/2]),z[0]=s[+(n[0]<y[0])],z[1]=f[+(n[1]<y[1])]):y=null),E&&d(n,c,0)&&(e(S),u=!0),A&&d(n,l,1)&&(r(S),u=!0),u&&(t(S),w({type:"brush",mode:C?"move":"resize"}))}function d(n,t,e){var r,u,a=Pi(t),c=a[0],l=a[1],p=z[e],v=e?f:s,d=v[1]-v[0];return C&&(c-=p,l-=d+p),r=(e?g:h)?Math.max(c,Math.min(l,n[e])):n[e],C?u=(r+=p)+d:(y&&(p=Math.max(c,Math.min(l,2*y[e]-r))),r>p?(u=r,r=p):u=p),v[0]!=r||v[1]!=u?(e?o=null:i=null,v[0]=r,v[1]=u,!0):void 0}function m(){v(),S.style("pointer-events","all").selectAll(".resize").style("display",n.empty()?"none":null),Bo.select("body").style("cursor",null),L.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),N(),w({type:"brushend"})}var y,x,M=this,b=Bo.select(Bo.event.target),w=a.of(M,arguments),S=Bo.select(M),k=b.datum(),E=!/^(n|s)$/.test(k)&&c,A=!/^(e|w)$/.test(k)&&l,C=b.classed("extent"),N=X(),z=Bo.mouse(M),L=Bo.select(Qo).on("keydown.brush",u).on("keyup.brush",p);if(Bo.event.changedTouches?L.on("touchmove.brush",v).on("touchend.brush",m):L.on("mousemove.brush",v).on("mouseup.brush",m),S.interrupt().selectAll("*").interrupt(),C)z[0]=s[0]-z[0],z[1]=f[0]-z[1];else if(k){var T=+/w$/.test(k),q=+/^n/.test(k);x=[s[1-T]-z[0],f[1-q]-z[1]],z[0]=s[T],z[1]=f[q]}else Bo.event.altKey&&(y=z.slice());S.style("pointer-events","none").selectAll(".resize").style("display",null),Bo.select("body").style("cursor",b.style("cursor")),w({type:"brushstart"}),v()}var i,o,a=w(n,"brushstart","brush","brushend"),c=null,l=null,s=[0,0],f=[0,0],h=!0,g=!0,p=Ul[0];return n.event=function(n){n.each(function(){var n=a.of(this,arguments),t={x:s,y:f,i:i,j:o},e=this.__chart__||t;this.__chart__=t,Cl?Bo.select(this).transition().each("start.brush",function(){i=e.i,o=e.j,s=e.x,f=e.y,n({type:"brushstart"})}).tween("brush:brush",function(){var e=mu(s,t.x),r=mu(f,t.y);return i=o=null,function(u){s=t.x=e(u),f=t.y=r(u),n({type:"brush",mode:"resize"})}}).each("end.brush",function(){i=t.i,o=t.j,n({type:"brush",mode:"resize"}),n({type:"brushend"})}):(n({type:"brushstart"}),n({type:"brush",mode:"resize"}),n({type:"brushend"}))})},n.x=function(t){return arguments.length?(c=t,p=Ul[!c<<1|!l],n):c},n.y=function(t){return arguments.length?(l=t,p=Ul[!c<<1|!l],n):l},n.clamp=function(t){return arguments.length?(c&&l?(h=!!t[0],g=!!t[1]):c?h=!!t:l&&(g=!!t),n):c&&l?[h,g]:c?h:l?g:null},n.extent=function(t){var e,r,u,a,h;return arguments.length?(c&&(e=t[0],r=t[1],l&&(e=e[0],r=r[0]),i=[e,r],c.invert&&(e=c(e),r=c(r)),e>r&&(h=e,e=r,r=h),(e!=s[0]||r!=s[1])&&(s=[e,r])),l&&(u=t[0],a=t[1],c&&(u=u[1],a=a[1]),o=[u,a],l.invert&&(u=l(u),a=l(a)),u>a&&(h=u,u=a,a=h),(u!=f[0]||a!=f[1])&&(f=[u,a])),n):(c&&(i?(e=i[0],r=i[1]):(e=s[0],r=s[1],c.invert&&(e=c.invert(e),r=c.invert(r)),e>r&&(h=e,e=r,r=h))),l&&(o?(u=o[0],a=o[1]):(u=f[0],a=f[1],l.invert&&(u=l.invert(u),a=l.invert(a)),u>a&&(h=u,u=a,a=h))),c&&l?[[e,u],[r,a]]:c?[e,r]:l&&[u,a])},n.clear=function(){return n.empty()||(s=[0,0],f=[0,0],i=o=null),n},n.empty=function(){return!!c&&s[0]==s[1]||!!l&&f[0]==f[1]},Bo.rebind(n,a,"on")};var Pl={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ul=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],jl=rc.format=lc.timeFormat,Fl=jl.utc,Hl=Fl("%Y-%m-%dT%H:%M:%S.%LZ");jl.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?Io:Hl,Io.parse=function(n){var t=new Date(n);return isNaN(t)?null:t},Io.toString=Hl.toString,rc.second=Ft(function(n){return new uc(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),rc.seconds=rc.second.range,rc.seconds.utc=rc.second.utc.range,rc.minute=Ft(function(n){return new uc(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),rc.minutes=rc.minute.range,rc.minutes.utc=rc.minute.utc.range,rc.hour=Ft(function(n){var t=n.getTimezoneOffset()/60;return new uc(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),rc.hours=rc.hour.range,rc.hours.utc=rc.hour.utc.range,rc.month=Ft(function(n){return n=rc.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),rc.months=rc.month.range,rc.months.utc=rc.month.utc.range;var Ol=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Yl=[[rc.second,1],[rc.second,5],[rc.second,15],[rc.second,30],[rc.minute,1],[rc.minute,5],[rc.minute,15],[rc.minute,30],[rc.hour,1],[rc.hour,3],[rc.hour,6],[rc.hour,12],[rc.day,1],[rc.day,2],[rc.week,1],[rc.month,1],[rc.month,3],[rc.year,1]],Il=jl.multi([[".%L",function(n){return n.getMilliseconds()}],[":%S",function(n){return n.getSeconds()}],["%I:%M",function(n){return n.getMinutes()}],["%I %p",function(n){return n.getHours()}],["%a %d",function(n){return n.getDay()&&1!=n.getDate()}],["%b %d",function(n){return 1!=n.getDate()}],["%B",function(n){return n.getMonth()}],["%Y",Ae]]),Zl={range:function(n,t,e){return Bo.range(Math.ceil(n/e)*e,+t,e).map(Vo)},floor:Et,ceil:Et};Yl.year=rc.year,rc.scale=function(){return Zo(Bo.scale.linear(),Yl,Il)};var Vl=Yl.map(function(n){return[n[0].utc,n[1]]}),Xl=Fl.multi([[".%L",function(n){return n.getUTCMilliseconds()}],[":%S",function(n){return n.getUTCSeconds()}],["%I:%M",function(n){return n.getUTCMinutes()}],["%I %p",function(n){return n.getUTCHours()}],["%a %d",function(n){return n.getUTCDay()&&1!=n.getUTCDate()}],["%b %d",function(n){return 1!=n.getUTCDate()}],["%B",function(n){return n.getUTCMonth()}],["%Y",Ae]]);Vl.year=rc.year.utc,rc.scale.utc=function(){return Zo(Bo.scale.linear(),Vl,Xl)},Bo.text=At(function(n){return n.responseText}),Bo.json=function(n,t){return Ct(n,"application/json",Xo,t)},Bo.html=function(n,t){return Ct(n,"text/html",$o,t)},Bo.xml=At(function(n){return n.responseXML}),"function"==typeof define&&define.amd?define(Bo):"object"==typeof module&&module.exports&&(module.exports=Bo),this.d3=Bo}();/*!
 * Pikaday
 *
 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
 */

(function (root, factory)
{
    'use strict';

    var moment;
    if (typeof exports === 'object') {
        // CommonJS module
        // Load moment.js as an optional dependency
        try { moment = require('moment'); } catch (e) {}
        module.exports = factory(moment);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(function (req)
        {
            // Load moment.js as an optional dependency
            var id = 'moment';
            moment = req.defined && req.defined(id) ? req(id) : undefined;
            return factory(moment);
        });
    } else {
        root.Pikaday = factory(root.moment);
    }
}(this, function (moment)
{
    'use strict';

    /**
     * feature detection and helper functions
     */
    var hasMoment = typeof moment === 'function',

    hasEventListeners = !!window.addEventListener,

    document = window.document,

    sto = window.setTimeout,

    addEvent = function(el, e, callback, capture)
    {
        if(e === 'keyup'){
          var oc = (function (callback, self) {
              return function (event) {
                if(event.keyCode === 13){
                  callback(self);
                } 
              };
            }(callback, self));
          callback = oc;
        }
        
        if (hasEventListeners) {
            el.addEventListener(e, callback, !!capture);
        } else {
            el.attachEvent('on' + e, callback);
        }
    },

    removeEvent = function(el, e, callback, capture)
    {
        if (hasEventListeners) {
            el.removeEventListener(e, callback, !!capture);
        } else {
            el.detachEvent('on' + e, callback);
        }
    },

    fireEvent = function(el, eventName, data)
    {
        var ev;

        if (document.createEvent) {
            ev = document.createEvent('HTMLEvents');
            ev.initEvent(eventName, true, false);
            ev = extend(ev, data);
            el.dispatchEvent(ev);
        } else if (document.createEventObject) {
            ev = document.createEventObject();
            ev = extend(ev, data);
            el.fireEvent('on' + eventName, ev);
        }
    },

    trim = function(str)
    {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
    },

    hasClass = function(el, cn)
    {
        return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
    },

    addClass = function(el, cn)
    {
        if (!hasClass(el, cn)) {
            el.className = (el.className === '') ? cn : el.className + ' ' + cn;
        }
    },

    removeClass = function(el, cn)
    {
        el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
    },

    isArray = function(obj)
    {
        return (/Array/).test(Object.prototype.toString.call(obj));
    },

    isDate = function(obj)
    {
        return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
    },

    isLeapYear = function(year)
    {
        // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    },

    getDaysInMonth = function(year, month)
    {
        return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    },

    setToStartOfDay = function(date)
    {
        if (isDate(date)) date.setHours(0,0,0,0);
    },

    compareDates = function(a,b)
    {
        // weak date comparison (use setToStartOfDay(date) to ensure correct result)
        return a.getTime() === b.getTime();
    },

    extend = function(to, from, overwrite)
    {
        var prop, hasProp;
        for (prop in from) {
            hasProp = to[prop] !== undefined;
            if (hasProp && typeof from[prop] === 'object' && from[prop] != null && from[prop].nodeName === undefined) {
                if (isDate(from[prop])) {
                    if (overwrite) {
                        to[prop] = new Date(from[prop].getTime());
                    }
                }
                else if (isArray(from[prop])) {
                    if (overwrite) {
                        to[prop] = from[prop].slice(0);
                    }
                } else {
                    to[prop] = extend({}, from[prop], overwrite);
                }
            } else if (overwrite || !hasProp) {
                to[prop] = from[prop];
            }
        }
        return to;
    },

    adjustCalendar = function(calendar) {
        if (calendar.month < 0) {
            calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
            calendar.month += 12;
        }
        if (calendar.month > 11) {
            calendar.year += Math.floor(Math.abs(calendar.month)/12);
            calendar.month -= 12;
        }
        return calendar;
    },

    /**
     * defaults and localisation
     */
    defaults = {

        // bind the picker to a form field
        field: null,

        // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
        bound: undefined,

        // position of the datepicker, relative to the field (default to bottom & left)
        // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
        position: 'bottom left',

        // automatically fit in the viewport even if it means repositioning from the position option
        reposition: true,

        // the default output format for `.toString()` and `field` value
        format: 'YYYY-MM-DD',

        // the initial date to view when first opened
        defaultDate: null,

        // make the `defaultDate` the initial selected value
        setDefaultDate: false,

        // first day of week (0: Sunday, 1: Monday etc)
        firstDay: 0,

        // the minimum/earliest date that can be selected
        minDate: null,
        // the maximum/latest date that can be selected
        maxDate: null,

        // number of years either side, or array of upper/lower range
        yearRange: 10,

        // show week numbers at head of row
        showWeekNumber: false,

        // used internally (don't config outside)
        minYear: 0,
        maxYear: 9999,
        minMonth: undefined,
        maxMonth: undefined,

        isRTL: false,

        // Additional text to append to the year in the calendar title
        yearSuffix: '',

        // Render the month after year in the calendar title
        showMonthAfterYear: false,

        // how many months are visible
        numberOfMonths: 1,

        // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
        // only used for the first display or when a selected date is not visible
        mainCalendar: 'left',

        // Specify a DOM element to render the calendar in
        container: undefined,

        // internationalization
        i18n: {
            previousMonth : 'Previous Month',
            nextMonth     : 'Next Month',
            months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
            weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
            weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
        },

        // callback function
        onSelect: null,
        onOpen: null,
        onClose: null,
        onDraw: null
    },


    /**
     * templating functions to abstract HTML rendering
     */
    renderDayName = function(opts, day, abbr)
    {
        day += opts.firstDay;
        while (day >= 7) {
            day -= 7;
        }
        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
    },

    renderDay = function(d, m, y, isSelected, isToday, isDisabled, isEmpty)
    {
        if (isEmpty) {
            return '<td class="is-empty"></td>';
        }
        var arr = [];
        if (isDisabled) {
            arr.push('is-disabled');
        }
        if (isToday) {
            arr.push('is-today');
        }
        if (isSelected) {
            arr.push('is-selected');
        }
        return '<td data-day="' + d + '" class="' + arr.join(' ') + '">' +
                 '<button class="pika-button pika-day" type="button" ' +
                    'data-pika-year="' + y + '" data-pika-month="' + m + '" data-pika-day="' + d + '">' +
                        d +
                 '</button>' +
               '</td>';
    },

    renderWeek = function (d, m, y) {
        // Lifted from http://javascript.about.com/library/blweekyear.htm, lightly modified.
        var onejan = new Date(y, 0, 1),
            weekNum = Math.ceil((((new Date(y, m, d) - onejan) / 86400000) + onejan.getDay()+1)/7);
        return '<td class="pika-week">' + weekNum + '</td>';
    },

    renderRow = function(days, isRTL)
    {
        return '<tr>' + (isRTL ? days.reverse() : days).join('') + '</tr>';
    },

    renderBody = function(rows)
    {
        return '<tbody>' + rows.join('') + '</tbody>';
    },

    renderHead = function(opts)
    {
        var i, arr = [];
        if (opts.showWeekNumber) {
            arr.push('<th></th>');
        }
        for (i = 0; i < 7; i++) {
            arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
        }
        return '<thead>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</thead>';
    },

    renderTitle = function(instance, c, year, month, refYear)
    {
        var i, j, arr,
            opts = instance._o,
            isMinYear = year === opts.minYear,
            isMaxYear = year === opts.maxYear,
            html = '<div class="pika-title">',
            monthHtml,
            yearHtml,
            prev = true,
            next = true;

        for (arr = [], i = 0; i < 12; i++) {
            arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
                (i === month ? ' selected': '') +
                ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? 'disabled' : '') + '>' +
                opts.i18n.months[i] + '</option>');
        }
        monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month">' + arr.join('') + '</select></div>';

        if (isArray(opts.yearRange)) {
            i = opts.yearRange[0];
            j = opts.yearRange[1] + 1;
        } else {
            i = year - opts.yearRange;
            j = 1 + year + opts.yearRange;
        }

        for (arr = []; i < j && i <= opts.maxYear; i++) {
            if (i >= opts.minYear) {
                arr.push('<option value="' + i + '"' + (i === year ? ' selected': '') + '>' + (i) + '</option>');
            }
        }
        yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year">' + arr.join('') + '</select></div>';

        if (opts.showMonthAfterYear) {
            html += yearHtml + monthHtml;
        } else {
            html += monthHtml + yearHtml;
        }

        if (isMinYear && (month === 0 || opts.minMonth >= month)) {
            prev = false;
        }

        if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
            next = false;
        }

        if (c === 0) {
            html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
        }
        if (c === (instance._o.numberOfMonths - 1) ) {
            html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
        }

        return html += '</div>';
    },

    renderTable = function(opts, data)
    {
        return '<table cellpadding="0" cellspacing="0" class="pika-table">' + renderHead(opts) + renderBody(data) + '</table>';
    },


    /**
     * Pikaday constructor
     */
    Pikaday = function(options)
    {
        var self = this,
            opts = self.config(options);

        self._onMouseDown = function(e)
        {
            if (!self._v) {
                return;
            }
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (!target) {
                return;
            }

            if (!hasClass(target, 'is-disabled')) {
                if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty')) {
                    self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
                    if (opts.bound) {
                        sto(function() {
                            self.hide();
                            if (opts.field) {
                                opts.field.blur();
                            }
                        }, 100);
                    }
                    return;
                }
                else if (hasClass(target, 'pika-prev')) {
                    self.prevMonth();
                }
                else if (hasClass(target, 'pika-next')) {
                    self.nextMonth();
                }
            }
            if (!hasClass(target, 'pika-select')) {
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                    return false;
                }
            } else {
                self._c = true;
            }
        };

        self._onChange = function(e)
        {
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (!target) {
                return;
            }
            if (hasClass(target, 'pika-select-month')) {
                self.gotoMonth(target.value);
            }
            else if (hasClass(target, 'pika-select-year')) {
                self.gotoYear(target.value);
            }
        };

        self._onInputChange = function(e)
        {
            var date;

            if (e.firedBy === self) {
                return;
            }
            if (hasMoment) {
                date = moment(opts.field.value, opts.format);
                date = (date && date.isValid()) ? date.toDate() : null;
            }
            else {
                date = new Date(Date.parse(opts.field.value));
            }
            self.setDate(isDate(date) ? date : null);
            if (!self._v) {
                self.show();
            }
        };

        self._onInputFocus = function()
        {
            self.show();
        };

        self._onInputClick = function()
        {
            self.show();
        };

        self._onInputBlur = function()
        {
            if (!self._c) {
                self._b = sto(function() {
                    self.hide();
                }, 50);
            }
            self._c = false;
        };

        self._onClick = function(e)
        {
            e = e || window.event;
            var target = e.target || e.srcElement,
                pEl = target;
            if (!target) {
                return;
            }
            if (!hasEventListeners && hasClass(target, 'pika-select')) {
                if (!target.onchange) {
                    target.setAttribute('onchange', 'return;');
                    addEvent(target, 'change', self._onChange);
                }
            }
            do {
                if (hasClass(pEl, 'pika-single')) {
                    return;
                }
            }
            while ((pEl = pEl.parentNode));
            if (self._v && target !== opts.trigger) {
                self.hide();
            }
        };

        self.el = document.createElement('div');
        self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '');

        addEvent(self.el, 'mousedown', self._onMouseDown, true);
        addEvent(self.el, 'change', self._onChange);

        if (opts.field) {
            if (opts.container) {
                opts.container.appendChild(self.el);
            } else if (opts.bound) {
                document.body.appendChild(self.el);
            } else {
                opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
            }
            //addEvent(opts.field, 'change', self._onInputChange);
            addEvent(opts.field, 'keyup', self._onInputChange);
            
            if (!opts.defaultDate) {
                if (hasMoment && opts.field.value) {
                    opts.defaultDate = moment(opts.field.value, opts.format).toDate();
                } else {
                    opts.defaultDate = new Date(Date.parse(opts.field.value));
                }
                opts.setDefaultDate = true;
            }
        }

        var defDate = opts.defaultDate;

        if (isDate(defDate)) {
            if (opts.setDefaultDate) {
                self.setDate(defDate, true);
            } else {
                self.gotoDate(defDate);
            }
        } else {
            self.gotoDate(new Date());
        }

        if (opts.bound) {
            this.hide();
            self.el.className += ' is-bound';
            addEvent(opts.trigger, 'click', self._onInputClick);
            addEvent(opts.trigger, 'focus', self._onInputFocus);
            addEvent(opts.trigger, 'blur', self._onInputBlur);
        } else {
            this.show();
        }
    };


    /**
     * public Pikaday API
     */
    Pikaday.prototype = {


        /**
         * configure functionality
         */
        config: function(options)
        {
            if (!this._o) {
                this._o = extend({}, defaults, true);
            }

            var opts = extend(this._o, options, true);

            opts.isRTL = !!opts.isRTL;

            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

            var nom = parseInt(opts.numberOfMonths, 10) || 1;
            opts.numberOfMonths = nom > 4 ? 4 : nom;

            if (!isDate(opts.minDate)) {
                opts.minDate = false;
            }
            if (!isDate(opts.maxDate)) {
                opts.maxDate = false;
            }
            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
                opts.maxDate = opts.minDate = false;
            }
            if (opts.minDate) {
                setToStartOfDay(opts.minDate);
                opts.minYear  = opts.minDate.getFullYear();
                opts.minMonth = opts.minDate.getMonth();
            }
            if (opts.maxDate) {
                setToStartOfDay(opts.maxDate);
                opts.maxYear  = opts.maxDate.getFullYear();
                opts.maxMonth = opts.maxDate.getMonth();
            }

            if (isArray(opts.yearRange)) {
                var fallback = new Date().getFullYear() - 10;
                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
            } else {
                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
                if (opts.yearRange > 100) {
                    opts.yearRange = 100;
                }
            }

            return opts;
        },

        /**
         * return a formatted string of the current selection (using Moment.js if available)
         */
        toString: function(format)
        {
            return !isDate(this._d) ? '' : hasMoment ? moment(this._d).format(format || this._o.format) : this._d.toDateString();
        },

        /**
         * return a Moment.js object of the current selection (if available)
         */
        getMoment: function()
        {
            return hasMoment ? moment(this._d) : null;
        },

        /**
         * set the current selection from a Moment.js object (if available)
         */
        setMoment: function(date, preventOnSelect)
        {
            if (hasMoment && moment.isMoment(date)) {
                this.setDate(date.toDate(), preventOnSelect);
            }
        },

        /**
         * return a Date object of the current selection
         */
        getDate: function()
        {
            return isDate(this._d) ? new Date(this._d.getTime()) : null;
        },

        /**
         * set the current selection
         */
        setDate: function(date, preventOnSelect)
        {
            if (!date) {
                this._d = null;

                if (this._o.field) {
                    this._o.field.value = '';
                    fireEvent(this._o.field, 'change', { firedBy: this });
                }

                return this.draw();
            }
            if (typeof date === 'string') {
                date = new Date(Date.parse(date));
            }
            if (!isDate(date)) {
                return;
            }

            var min = this._o.minDate,
                max = this._o.maxDate;

            if (isDate(min) && date < min) {
                date = min;
            } else if (isDate(max) && date > max) {
                date = max;
            }

            this._d = new Date(date.getTime());
            setToStartOfDay(this._d);
            this.gotoDate(this._d);

            if (this._o.field) {
                this._o.field.value = this.toString();
                fireEvent(this._o.field, 'change', { firedBy: this });
            }
            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
                this._o.onSelect.call(this, this.getDate());
            }
        },

        /**
         * change view to a specific date
         */
        gotoDate: function(date)
        {
            var newCalendar = true;

            if (!isDate(date)) {
                return;
            }

            if (this.calendars) {
                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
                    visibleDate = date.getTime();
                // get the end of the month
                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
            }

            if (newCalendar) {
                this.calendars = [{
                    month: date.getMonth(),
                    year: date.getFullYear()
                }];
                if (this._o.mainCalendar === 'right') {
                    this.calendars[0].month += 1 - this._o.numberOfMonths;
                }
            }

            this.adjustCalendars();
        },

        adjustCalendars: function() {
            this.calendars[0] = adjustCalendar(this.calendars[0]);
            for (var c = 1; c < this._o.numberOfMonths; c++) {
                this.calendars[c] = adjustCalendar({
                    month: this.calendars[0].month + c,
                    year: this.calendars[0].year
                });
            }
            this.draw();
        },

        gotoToday: function()
        {
            this.gotoDate(new Date());
        },

        /**
         * change view to a specific month (zero-index, e.g. 0: January)
         */
        gotoMonth: function(month)
        {
            if (!isNaN(month)) {
                this.calendars[0].month = parseInt(month, 10);
                this.adjustCalendars();
            }
        },

        nextMonth: function()
        {
            this.calendars[0].month++;
            this.adjustCalendars();
        },

        prevMonth: function()
        {
            this.calendars[0].month--;
            this.adjustCalendars();
        },

        /**
         * change view to a specific full year (e.g. "2012")
         */
        gotoYear: function(year)
        {
            if (!isNaN(year)) {
                this.calendars[0].year = parseInt(year, 10);
                this.adjustCalendars();
            }
        },

        /**
         * change the minDate
         */
        setMinDate: function(value)
        {
            this._o.minDate = value;
        },

        /**
         * change the maxDate
         */
        setMaxDate: function(value)
        {
            this._o.maxDate = value;
        },

        /**
         * refresh the HTML
         */
        draw: function(force)
        {
            if (!this._v && !force) {
                return;
            }
            var opts = this._o,
                minYear = opts.minYear,
                maxYear = opts.maxYear,
                minMonth = opts.minMonth,
                maxMonth = opts.maxMonth,
                html = '';

            if (this._y <= minYear) {
                this._y = minYear;
                if (!isNaN(minMonth) && this._m < minMonth) {
                    this._m = minMonth;
                }
            }
            if (this._y >= maxYear) {
                this._y = maxYear;
                if (!isNaN(maxMonth) && this._m > maxMonth) {
                    this._m = maxMonth;
                }
            }

            for (var c = 0; c < opts.numberOfMonths; c++) {
                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year) + this.render(this.calendars[c].year, this.calendars[c].month) + '</div>';
            }

            this.el.innerHTML = html;

            if (opts.bound) {
                if(opts.field.type !== 'hidden') {
                    sto(function() {
                        opts.trigger.focus();
                    }, 1);
                }
            }

            if (typeof this._o.onDraw === 'function') {
                var self = this;
                sto(function() {
                    self._o.onDraw.call(self);
                }, 0);
            }
        },

        adjustPosition: function()
        {
            if (this._o.container) return;
            var field = this._o.trigger, pEl = field,
            width = this.el.offsetWidth, height = this.el.offsetHeight,
            viewportWidth = window.innerWidth || document.documentElement.clientWidth,
            viewportHeight = window.innerHeight || document.documentElement.clientHeight,
            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop,
            left, top, clientRect;

            if (typeof field.getBoundingClientRect === 'function') {
                clientRect = field.getBoundingClientRect();
                left = clientRect.left + window.pageXOffset;
                top = clientRect.bottom + window.pageYOffset;
            } else {
                left = pEl.offsetLeft;
                top  = pEl.offsetTop + pEl.offsetHeight;
                while((pEl = pEl.offsetParent)) {
                    left += pEl.offsetLeft;
                    top  += pEl.offsetTop;
                }
            }

            // default position is bottom & left
            if ((this._o.reposition && left + width > viewportWidth) ||
                (
                    this._o.position.indexOf('right') > -1 &&
                    left - width + field.offsetWidth > 0
                )
            ) {
                left = left - width + field.offsetWidth;
            }
            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
                (
                    this._o.position.indexOf('top') > -1 &&
                    top - height - field.offsetHeight > 0
                )
            ) {
                top = top - height - field.offsetHeight;
            }

            this.el.style.cssText = [
                'position: absolute',
                'left: ' + left + 'px',
                'top: ' + top + 'px'
            ].join(';');
        },

        /**
         * render HTML for a particular month
         */
        render: function(year, month)
        {
            var opts   = this._o,
                now    = new Date(),
                days   = getDaysInMonth(year, month),
                before = new Date(year, month, 1).getDay(),
                data   = [],
                row    = [];
            setToStartOfDay(now);
            if (opts.firstDay > 0) {
                before -= opts.firstDay;
                if (before < 0) {
                    before += 7;
                }
            }
            var cells = days + before,
                after = cells;
            while(after > 7) {
                after -= 7;
            }
            cells += 7 - after;
            for (var i = 0, r = 0; i < cells; i++)
            {
                var day = new Date(year, month, 1 + (i - before)),
                    isDisabled = (opts.minDate && day < opts.minDate) || (opts.maxDate && day > opts.maxDate),
                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
                    isToday = compareDates(day, now),
                    isEmpty = i < before || i >= (days + before);

                row.push(renderDay(1 + (i - before), month, year, isSelected, isToday, isDisabled, isEmpty));

                if (++r === 7) {
                    if (opts.showWeekNumber) {
                        row.unshift(renderWeek(i - before, month, year));
                    }
                    data.push(renderRow(row, opts.isRTL));
                    row = [];
                    r = 0;
                }
            }
            return renderTable(opts, data);
        },

        isVisible: function()
        {
            return this._v;
        },

        show: function()
        {
            if (!this._v) {
                removeClass(this.el, 'is-hidden');
                this._v = true;
                this.draw();
                if (this._o.bound) {
                    addEvent(document, 'click', this._onClick);
                    this.adjustPosition();
                }
                if (typeof this._o.onOpen === 'function') {
                    this._o.onOpen.call(this);
                }
            }
        },

        hide: function()
        {
            var v = this._v;
            if (v !== false) {
                if (this._o.bound) {
                    removeEvent(document, 'click', this._onClick);
                }
                this.el.style.cssText = '';
                addClass(this.el, 'is-hidden');
                this._v = false;
                if (v !== undefined && typeof this._o.onClose === 'function') {
                    this._o.onClose.call(this);
                }
            }
        },

        /**
         * GAME OVER
         */
        destroy: function()
        {
            this.hide();
            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
            removeEvent(this.el, 'change', this._onChange);
            if (this._o.field) {
                removeEvent(this._o.field, 'change', this._onInputChange);
                if (this._o.bound) {
                    removeEvent(this._o.trigger, 'click', this._onInputClick);
                    removeEvent(this._o.trigger, 'focus', this._onInputFocus);
                    removeEvent(this._o.trigger, 'blur', this._onInputBlur);
                }
            }
            if (this.el.parentNode) {
                this.el.parentNode.removeChild(this.el);
            }
        }

    };

    return Pikaday;

}));
/*!
    Pablo <http://pablojs.com>

    by Premasagar Rose <http://premasagar.com>,
       Dharmafly <http://dharmafly.com>

    Repo: <https://github.com/premasagar/pablo>
    MIT license

*/
/*jshint newcap:false */

(function(window, Object, Array, Element, SVGElement, HTMLElement, NodeList, Document, HTMLDocument, document, navigator, XMLHttpRequest, DOMParser, XMLSerializer, atob, btoa, escape, unescape, setTimeout, clearTimeout){
    'use strict';
    
    var /* SETTINGS */
        pabloVersion = '0.5.1',
        svgVersion = 1.1,
        svgns = 'http://www.w3.org/2000/svg',

        head, testElement, arrayProto, matchesProp, userAgent, camelCase;

    
    function make(elementName){
        return typeof elementName === 'string' &&
            document.createElementNS(svgns, elementName) ||
            null;
    }

    // Browser detection - based on jquery-migrate-1.2.1.js & http://stackoverflow.com/questions/17907445/how-to-detect-ie11
    userAgent = (function(){
        var ua = navigator.userAgent.toLowerCase(),
            match = /((webkit))[ \/]([\w.]+)/.exec(ua) ||
                    /((o)pera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
                    /((trident))(?:.*? rv:([\w.]+)|)/.exec(ua) ||
                    /((ms)ie) ([\w.]+)/.exec(ua) ||
                    ua.indexOf("compatible") < 0 &&
                        /((moz)illa)(?:.*? rv:([\w.]+)|)/.exec(ua),
            name, prefix, version;

        if (match){
            name = match[1];
            prefix = match[2];
            version = match[3];

            // IE 10+
            if (name === 'trident'){
                name = 'msie';
                prefix = 'ms';
            }
        }

        return {
            name: name || '',
            version: version || '0',
            prefix: prefix || '',
            cssPrefix: prefix ? '-' + prefix + '-' : ''
        };
    }());

    // e.g. 'font-color' -> 'fontColor'
    // if `upperFirst === true` -> 'FontColor'
    camelCase = (function(){
        var uppercaseAfterHyphens = /^-|(?!^)-([a-z])/g,
            uppercaseFirstAndHyphens = /(?:^|-)([a-z])/g;

        return function (str, upperFirst){
            var pattern = upperFirst ?
                uppercaseFirstAndHyphens : uppercaseAfterHyphens;

            return str.replace(pattern, function(match, letter){
                return letter && letter.toUpperCase() || '';
            });
        };
    }());

    function findPrefixedProperty(prop, context){
        var prefixed;

        if (prop in context){
            return prop;
        }

        if (userAgent.prefix){
            prefixed = userAgent.prefix + camelCase(prop, true);
            if (prefixed in context){
                return prefixed;
            }
        }
    }

    /////


    // TEST ENVIRONMENT CAPABILITY

    if (document){
        testElement = 'createElementNS' in document && make('svg');
        head = document.head || document.getElementsByTagName('head')[0];
        arrayProto = Array && Array.prototype;
        matchesProp = findPrefixedProperty('matches', testElement) ||
            findPrefixedProperty('matchesSelector', testElement);
    }

    if (!(
        testElement && head && arrayProto && matchesProp &&
        Element && SVGElement && HTMLElement && NodeList && Document && 
        'createSVGRect' in testElement &&
        'attributes' in testElement &&
        'querySelectorAll' in testElement &&
        'previousElementSibling' in testElement &&
        'childNodes'    in testElement && // see note on svgElement.children, below
        'create'        in Object &&
        'keys'          in Object &&
        'isArray'       in Array &&
        'forEach'       in arrayProto &&
        'map'           in arrayProto &&
        'some'          in arrayProto &&
        'every'         in arrayProto &&
        'filter'        in arrayProto &&
        'DOMParser'     in window &&
        'XMLSerializer' in window
    )){
        // Incompatible environment
        // Set `Pablo` to be a simple reference object
        window.Pablo = {
            version: pabloVersion,
            isSupported: false,
            userAgent: userAgent
        };

        // Exit the script
        return;
    }

    // Pablo not supported in this environment. Exit.


    ////////////////////////////////////////////////////


(function(){
    var svgElementNames = 'a altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform circle clipPath color-profile cursor defs desc ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern',
        xmlns = 'http://www.w3.org/2000/xmlns/',
        htmlns = 'http://www.w3.org/1999/xhtml',
        xlinkns = 'http://www.w3.org/1999/xlink',
        svgMimeType = 'image/svg+xml',
        svgDataUrlPrefix = 'data:' + svgMimeType + ';base64,',
        cacheExpando = 'pablo-data',
        eventsNamespace = '__events__',
        support, hyphenate, resolveCssProperty, markupToSvgElement, dataUrlToSvgMarkup,
        cache, cacheNextId, Events, isNumeric, cssClassApi, classlistMethod,
        pabloCollectionApi;

    support = (function(){
        function supportsMarkup(){
            var el = make('a');
            el.setAttributeNS(xlinkns, 'xlink:href', '#');
            return (new XMLSerializer())
                        .serializeToString(el)
                        .indexOf('xlink') !== -1;
        }

        var createCanvas = 'getContext' in document.createElement('canvas'),
            dataUrl = !!(atob && btoa),
            canvas = dataUrl && createCanvas,
            imageTypes = ['png', 'jpeg'],
            support = {
                basic: true,
                classList: 'classList' in testElement,
                dataUrl: dataUrl,
                image: {
                    svg: dataUrl
                },
                canvas: canvas,
                download: dataUrl && 'createEvent' in document && 'download' in document.createElement('a'),
                markup: supportsMarkup()
            };

        function callbackTrue(callback){
            callback(true);
        }
        function callbackFalse(callback){
            callback(false);
        }

        imageTypes.forEach(function(type){
            if (!canvas){
                support.image[type] = callbackFalse;
            }
            else {
                support.image[type] = function(callback){
                    Pablo.line({x2:1}).dataUrl(type, function(dataUrl){
                        support.image[type] = dataUrl ? callbackTrue : callbackFalse;
                        callback(!!dataUrl);
                    });
                };
            }
        });

        return support;
    }());

    
    /////
    
    
    // UTILITIES
    
    function extend(target/*, any number of source objects*/){
        var len = arguments.length,
            withPrototype = arguments[len-1] === true,
            i, obj, prop;

        if (!target){
            target = {};
        }

        for (i = 1; i < len; i++){
            obj = arguments[i];
            if (typeof obj === 'object'){
                for (prop in obj){
                    if (withPrototype || obj.hasOwnProperty(prop)){
                        target[prop] = obj[prop];
                    }
                }
            }
        }
        return target;
    }

    // Modified from http://code.jquery.com/jquery-2.0.3.js
    function isPlainObject(obj){
        // Not plain objects:
        // - Any object or value whose internal [[Class]] property is not "[object Object]"
        // - DOM nodes
        // - window
        if (obj === null || typeof obj !== 'object' || 'nodeType' in obj || obj === window || obj === null){
            return false;
        }

        // Support: Firefox <20
        // The try/catch suppresses exceptions thrown when attempting to access
        // the "constructor" property of certain host objects, ie. |window.location|
        // https://bugzilla.mozilla.org/show_bug.cgi?id=814622
        try {
            if (!('constructor' in obj) ||
                !('prototype' in obj.constructor) ||
                !obj.constructor.prototype.hasOwnProperty('isPrototypeOf')){
                return false;
            }
        }
        catch(e){
            return false;
        }

        // If the function hasn't returned already, we're confident that
        // |obj| is a plain object, created by {} or constructed with new Object
        return true;
    }
    
    function toArray(obj){
        return arrayProto.slice.call(obj);
    }

    function isArray(obj){
        return Array.isArray(obj);
    }

    function isArrayLike(obj){
        return obj &&
            (typeof obj === 'object' || typeof obj === 'function') &&
            typeof obj.length === 'number';
    }
    
    function isElement(obj){
        return obj instanceof Element;
    }

    function isElementOrDocument(el){
        return isElement(el) || isDocument(el);
    }
    
    function isNodeList(obj){
        return obj instanceof NodeList;
    }
    
    function isDocument(obj){
        // Check constructors rather than `obj instanceof Document` for Opera 12.16
        return obj && (obj.constructor === Document || obj.constructor === HTMLDocument);
    }
    
    function isSVGElement(obj){
        return obj instanceof SVGElement;
    }
    
    function isHTMLElement(obj){
        return obj instanceof HTMLElement;
    }

    // Check if obj is an element from this or another document
    function hasSvgNamespace(obj){
        return !!(obj && obj.namespaceURI === svgns);
    }

    function hasHtmlNamespace(obj){
        return !!(obj && obj.namespaceURI === htmlns);
    }
    
    function canBeWrapped(obj){
        return typeof obj === 'string' ||
            isPablo(obj) ||
            isElement(obj) ||
            isNodeList(obj) ||
            isDocument(obj) ||
            Array.isArray(obj) ||
            isArrayLike(obj) ||
            hasSvgNamespace(obj);

            // || isPlainObject(obj); to support Events.on() use plain objects
    }
    
    // Return node (with attributes) if a Pablo collection, otherwise create one.
    function toPablo(node, attr){
        if (isPablo(node)){
            return attr ? node.attr(attr) : node;
        }
        return Pablo(node, attr);
    }
    
    function getAttributes(el){
        var ret = {},
            attr, len, i;
            
        if (el){
            attr = el.attributes;
            for (i = 0, len = attr.length; i<len; i++){
                ret[attr[i].name] = attr[i].value;
            }
        }
        return ret;
    }

    function attributeNS(el, attr){
        var colonIndex, ns, name, uri;

        // The `xmlns` attribute
        if (attr === 'xmlns'){
            ns = name = 'xmlns';
        }

        if (!ns){
            // HTML attribute, e.g. `src`
            // And for browsers that incorrectly don't output prefixes with markup(), 
            // e.g. Safari 6.05
            if (!hasSvgNamespace(el)){
                return false;
            }

            // Find a colon separating the namespace prefix from the attribute name
            colonIndex = attr.indexOf(':');

            // A non-prefixed, namespaced attribute, e.g. `fill`
            if (colonIndex === -1){
                return true;
            }

            // A prefixed, namespaced attribute, e.g. `xlink:href`
            // e.g. ns === 'xlink'
            ns = attr.slice(0, colonIndex);

            // The un-prefixed name of the attribute, e.g. `href`
            name = attr.slice(colonIndex + 1);
        }

        // Lookup URI in Pablo's `ns` object
        uri = Pablo.ns[ns] || null;

        return {uri:uri, name:name};
    }

    function setAttribute(el, attr, value){
        var attrNS = attributeNS(el, attr);

        // Namespace attributes, e.g. `xmlns` and `xmlns:xlink`
        // and namespace prefixed attributes, e.g. `xlink:href`
        if (typeof attrNS === 'object'){
            // attrNS = {uri, name}
            // `uri` is the URI for the namespace of the prefix
            // `name` is the un-prefixed attribute name, e.g. 'href'
            return el.setAttributeNS(attrNS.uri, attr, value);
        }

        switch(attrNS){
            // A pre-namespaced, prefixed attribute, e.g. `xmlns:xlink`
            case false:
            return el.setAttribute(attr, value);

            // A non-prefixed, namespaced attribute, e.g. `fill`
            case true:
            return el.setAttributeNS(null, attr, value);
        }
    }

    function getAttribute(el, attr){
        var attrNS = attributeNS(el, attr);

        switch(attrNS){
            case false:
            return el.getAttribute(attr);

            case true:
            return el.getAttributeNS(null, attr);

            default:
            return el.getAttributeNS(attrNS[0], attrNS[1]);
        }
    }

    function removeAttribute(el, attr){
        var attrNS = attributeNS(el, attr);

        switch(attrNS){
            case false:
            return el.removeAttribute(attr);

            case true:
            return el.removeAttributeNS(null, attr);

            default:
            return el.removeAttributeNS(attrNS[0], attrNS[1]);
        }
    }

    isNumeric = (function(){
        var numberOrSpace = /^-?\d[\.\d\s]*$/;

        return function(str){
            if (typeof str === 'number'){
                return true;
            }
            return typeof str === 'string' && numberOrSpace.test(str);
        };
    }());

    function numericToNumber(values){
        if (typeof values === 'number'){
            return values;
        }
        if (typeof values === 'string'){
            return isNumeric(values) ? Number(values) : values;
        }
        if (Array.isArray(values)){
            return values.map(function(value){
                return numericToNumber(value);
            });
        }
        return values;
    }
    
    // e.g. 'fontColor' -> 'font-color'
    // NOTE: does not check for blank spaces within multiple words, e.g. 'font Color'.
    // To achieve that, use `capitalLetters = /\s*[A-Z]/g` and `letter.trim().toLowerCase()`
    hyphenate = (function(){
        var capitalLetters = /(^|.)([A-Z])/g;

        function convertCapitalLetter(match, preceding, letter){
            return (preceding ? preceding + '-' : '') +
                letter.toLowerCase();
        }

        return function(str, leadingHyphen){
            return (leadingHyphen ? '-' : '') +
                str.replace(capitalLetters, convertCapitalLetter);
        };
    }());

    resolveCssProperty = (function(){
        var styleDictionary = {},
            hyphenatedDictionary = {},
            elements = [make('svg'), document.createElement('a')];
        
            elements.forEach(function(el){
                var style = el.style,
                    prop;

                for (prop in style){
                    if (!(prop in styleDictionary) && typeof style[prop] !== 'function'){
                        styleDictionary[prop] = prop;
                    }
                }
            });

        // e.g. convert 'transition' => 'webkitTransition'
        // e.g. if `hyphenateResult === true` => '-webkit-transition'
        return function(prop, hyphenateResult){
            var resolvedProp = hyphenateResult ?
                    hyphenatedDictionary[prop] : styleDictionary[prop],
                testProp, isPrefixed;

            if (resolvedProp){
                return resolvedProp;
            }

            if (hyphenateResult){
                resolvedProp = styleDictionary[prop];
            }

            if (!resolvedProp){
                testProp = camelCase(prop);
                resolvedProp = styleDictionary[testProp];
            }

            if (!resolvedProp && userAgent.prefix){
                testProp = userAgent.prefix + camelCase(testProp, true);
                resolvedProp = styleDictionary[testProp];

                if (!resolvedProp){
                    testProp = camelCase(testProp, true);
                    resolvedProp = styleDictionary[testProp];
                }
            }

            if (resolvedProp){
                styleDictionary[prop] = resolvedProp;

                if (hyphenateResult){
                    isPrefixed = resolvedProp.toLowerCase().indexOf(userAgent.prefix) === 0;
                    resolvedProp = hyphenate(resolvedProp, isPrefixed);
                    hyphenatedDictionary[prop] = resolvedProp;
                }
            }
            return resolvedProp;
        };
    }());

    markupToSvgElement = (function(){
        var parser, prefix, suffix;

        return function markupToSvgElement(markup){
            var svgdoc, target;

            if (!parser){
                parser = new DOMParser();
                suffix = '</svg>';
                // Add a <g> to a <svg> to ensure the <svg> is not self-closing
                prefix = Pablo.svg().append(Pablo.g()).markup().replace(/<g.*/, '');
            }
            markup = prefix + markup + suffix;

            // not supported in IE9: mime type 'image/svg+xml'
            svgdoc = parser.parseFromString(markup, 'application/xml');
            target = Pablo(svgdoc.documentElement.childNodes);
            return target.detach();
        };
    }());

    dataUrlToSvgMarkup = support.dataUrl ?
        function(dataUrl){
            var data = dataUrl.slice(svgDataUrlPrefix.length);
            // See https://developer.mozilla.org/en-US/docs/Web/API/window.btoa#Unicode_Strings for use of decodeURIComponent and escape
            return decodeURIComponent(escape(atob(data)));
        } :

        function(){
            return '';
        };
    

    // Data cache
    cache = {};
    cacheNextId = 1;
    
    
    /////
    
    
    // PABLO COLLECTIONS
    
    function PabloCollection(node, attr){
        if (node){
            // Create a named element, e.g. Pablo('circle', {})
            // Check that this isn't Pablo('<circle/>', {})
            if (typeof node === 'string' && attr && node.indexOf('<') === -1){
                node = make(node);
            }

            // Add the results to the collection
            this.add(node);

            // Apply attributes
            if (attr){
                this.attr(attr);
            }
        }
    }

    pabloCollectionApi = PabloCollection.prototype = Object.create(arrayProto);

    extend(pabloCollectionApi, {
        pablo: pabloVersion,
        collection: null,

        /////

        // ARRAY-LIKE BEHAVIOUR

        toArray: function(){
            return toArray(this);
        },
        
        size: function(){
            return this.length;
        },
        
        get: function(index){
            return this[index];
        },
        
        eq: function(index){
            return index !== -1 ?
                // Return zero-indexed node
                Pablo(this[index]) :
                // Return node, counting backwards from end of elements array
                (index < -1 ? this.slice(index, index + 1) : this.slice(index));
        },

        first: function(){
            return this.eq(0);
        },

        last: function(){
            return this.eq(this.length-1);
        },

        add: (function(){
            // Detect `<` as the first non-whitespace character
            var openTag = /^\s*</;

            return function (/*node, node,..., prepend*/){
                var nodes = arguments,
                    numNodes = nodes.length,
                    prepend = false,
                    node, toAdd, nodeInArray, i;

                // `prepend` 
                if (numNodes > 1 && typeof nodes[numNodes-1] === 'boolean'){
                    prepend = nodes[numNodes-1];
                    numNodes -= 1;

                    if (prepend){
                        nodes = arrayProto.slice.call(nodes, 0, numNodes).reverse();
                    }
                }

                for (i=0; i<numNodes; i++){
                    node = nodes[i];

                    // An SVG or HTML element, or document
                    if (isElement(node) || isDocument(node) || hasSvgNamespace(node)){
                        // Add element, if it is not already in the collection
                        if (arrayProto.indexOf.call(this, node) === -1){
                            arrayProto[prepend ? 'unshift' : 'push'].call(this, node);
                        }
                    }

                    // A Pablo collection
                    else if (isPablo(node)){
                        // See extensions/functional.js for example usage of node.collection
                        // TODO: remove support for functional.js?
                        node = toArray(node.collection || node);
                        toAdd = node.collection || node;
                    }

                    // A string outside of an array - either CSS selector,
                    // SVG markup or dataUrl
                    else if (typeof node === 'string'){
                        // SVG markup
                        // Detect `<` as the first non-whitespace character
                        // Check indexOf() first, for performance
                        if (node.indexOf('<') !== -1 && openTag.test(node)){
                            toAdd = markupToSvgElement(node);
                        }

                        // Data URL
                        else if (node.indexOf(svgDataUrlPrefix) === 0){
                            toAdd = markupToSvgElement(dataUrlToSvgMarkup(node));
                        }

                        // CSS selector
                        else {
                            toAdd = document.querySelectorAll(node);
                        }
                    }

                    // A nodeList (e.g. result of a selector query, or childNodes)
                    // or is an object like an array, e.g. a jQuery collection
                    else if (isNodeList(node) || isArrayLike(node)){
                        toAdd = node;
                    }

                    // `node` is an array or collection
                    if (toAdd || Array.isArray(node)){
                        // Convert to an array of nodes
                        if (toAdd){
                            node = toArray(toAdd);
                        }

                        while (node.length){
                            // Whether prepending or appending, always process arrays and
                            // array-like collections in forwards order
                            nodeInArray = prepend ? node.pop() : node.shift();

                            // A string inside an array is converted to an element
                            if (typeof nodeInArray === 'string'){
                                nodeInArray = make(nodeInArray);
                            }

                            // Add to collection
                            this.add(nodeInArray, prepend);
                        }

                        toAdd = null;
                    }
                }
                return this;
            };
        }()),

        concat: function(){
            return this.add.apply(Pablo(this), arguments);
        },
        
        // Add new node(s) to the collection; accepts arrays or nodeLists
        unshift: function(){
            var args = toArray(arguments);
            args.push(true);
            return this.add.apply(this, args);
        },
        
        // Remove node from end of the collection
        pop: function(){
            return Pablo(arrayProto.pop.call(this));
        },
        
        shift: function(){
            return Pablo(arrayProto.shift.call(this));
        },
        
        slice: function(begin, end){
            return Pablo(arrayProto.slice.call(this, begin, end));
        },

        splice: function(){
            arrayProto.splice.apply(this, arguments);
            return this;
        },

        join: function(separator){
            return this.toArray().map(function(el){
                return Pablo(el).toString();
            }).join(separator);
        },

        reverse: function(){
            arrayProto.reverse.call(this);
            return this;
        },

        sort: function(fn){
            arrayProto.sort.call(this, fn);
            return this;
        },
        
        each: function(fn, context){
            if (this.length){
                if (this.length === 1){
                    fn.call(context || this, this[0], 0);
                }
                else {
                    arrayProto.forEach.call(this, fn, context || this);
                }
            }
            return this;
        },
        
        map: function(fn, context){
            return Pablo(arrayProto.map.call(this, fn, context || this));
        },


        /////


        // TRAVERSAL

        // See below for traversal shortcuts that use `traverse()` e.g. `parents()`
        traverse: function(prop, doWhile, selectors){
            var collection = Pablo(),
                isFn = typeof doWhile === 'function';

            this.each(function(el, i){
                el = el[prop];
                while (el && (isFn ? doWhile.call(this, el, i) : true)){
                    collection.add(el);
                    el = doWhile ? el[prop] : false;
                }
            });
            return selectors ? collection.select(selectors) : collection;
        },


        /////


        // MANIPULATION
        
        detach: function(){
            return this.each(function(el){
                var parentNode = el.parentNode;
                if (parentNode){
                    parentNode.removeChild(el);
                }
            });
        },

        remove: function(){
            // If the cache has any contents
            if (Object.keys(cache).length){
                // Remove data for all elements and their descendents
                this.off().removeData();
                this.find('*').off().removeData();
            }

            // Remove from the DOM
            return this.detach();
        },
        
        empty: function(){
            // If the cache has any contents
            if (Object.keys(cache).length){
                // Remove data for each descendent of elements in the collection
                this.find('*').off().removeData();
            }

            // Remove elements, text and other nodes
            // This uses native DOM methods, rather than `detach()`, to ensure that
            // non-element nodes are also removed.
            return this.each(function(el){
                while (el.firstChild){
                    el.removeChild(el.firstChild);
                }
            });
        },
        
        /* Arguments:
        `deepDom`: clones descendent DOM elements and DOM event listeners (default true)
        `withData` clones data associated with the element (default false)
        `deepData` clones data associated with descendents of the element (defaults to same as `withData`)
        */
        clone: function(deepDom, withData, deepData){
            var isSingle = this.length === 1;

            if (typeof deepDom !== 'boolean'){
                deepDom = true;
            }
            if (typeof withData !== 'boolean'){
                withData = false;
            }
            if (typeof deepData !== 'boolean'){
                deepData = withData;
            }

            return this.map(function(el){
                var cloned = el.cloneNode(deepDom),
                    data, node, clonedNode, dataset;

                // Clone data associated with the element
                if (withData){
                    // Avoid unnecessary Pablo collection creation
                    node = isSingle ? this : Pablo(el);
                    data = node.cloneData();

                    if (data){
                        // Set data on the cloned element
                        clonedNode = Pablo(cloned).data(data);
                    }
                }

                // Clone descendents' data
                if (deepDom && deepData){
                    if (!clonedNode){
                        clonedNode = Pablo(cloned);
                    }
                    dataset = node.pluck('data');
                    clonedNode.find('*').data(dataset);
                }
                return cloned;
            });
        },
        
        // `deep` is whether to duplicate child nodes
        // `deepData` is whether to duplicate data on self and children
        // TODO: should there be a way of duplicating without adding to the DOM
        //     i.e. to remove the call to `after()` or to return a new collection
        duplicate: function(repeats, withData, deepData){
            var duplicates;

            if (repeats !== 0){
                if (typeof repeats !== 'number' || repeats < 0){
                    repeats = 1;
                }

                // For performance, before cloning data, ensure that the elements 
                // or their descendents have data associated with them
                if (withData){
                    withData = this.hasData();
                }
                if (deepData){
                    deepData = this.find('*').hasData();
                }

                duplicates = Pablo();
                
                // Clone the collection
                while (repeats --){
                    duplicates.add(this.clone(true, withData, deepData));
                }

                // Insert in the DOM after the collection
                this.after(duplicates)
                    // Add new elements the collection
                    .add(duplicates);
            }
            return this;
        },

        getValue: function(value, i){
            if (Array.isArray(value)){
                // If array is shorter than collection, then cycle back to start
                // of array
                i = i % value.length;
                value = value[i];
            }
            else if (typeof value === 'function'){
                value = value.call(this, this[i], i);
            }
            return value;
        },
        
        attr: function(attr, value){
            var el, attributes;

            // Return an object of all attributes on the first element in
            // the collection
            if (typeof attr === 'undefined'){
                return getAttributes(this[0]);
            }

            // Handle a named attribute
            if (typeof attr === 'string'){
                // Get the attribute from the first element in the collection
                if (typeof value === 'undefined'){
                    el = this[0];
                    return el && getAttribute(el, attr);
                }

                // Set the attribute

                // Return, if no elements
                if (!this.length){
                    return this;
                }

                // Set the attribute, if the collection only has one element
                if (this.length === 1){
                    if (value === null){
                        this.removeAttr(attr);
                    }
                    else {
                        setAttribute(this[0], attr, this.getValue(value, 0));
                    }
                    return this;
                }

                attributes = {};
                attributes[attr] = value;
            }

            else {
                attributes = attr;
            }

            return this.each(function(el, i){
                var attr, value;

                for (attr in attributes){
                    if (attributes.hasOwnProperty(attr)){
                        value = attributes[attr];

                        if (value === null){
                            this.removeAttr(attr);
                        }
                        else {
                            setAttribute(el, attr, this.getValue(value, i));
                        }
                    }
                }
            });
        },

        // Return an array of values from each element in the collection
        pluck: function(type, property){
            return toArray(this).map(function(el){
                // Element property
                if (type === 'prop'){
                    return el[property];
                }
                
                // Call method of name `type` and pass property
                // e.g. 'attr', 'data', 'css', 'transform', 'transformCss', 'transition'
                else {
                    return Pablo(el)[type](property);
                }
            });
        },
        
        removeAttr: function(attr) {
            if (this.length === 1){
                removeAttribute(this[0], attr);
            }
            else if (this.length > 1){
                this.each(function(el){
                    removeAttribute(el, attr);
                });
            }
            return this;
        },
        
        content: function(text){
            var el;

            // Get first element's textContent
            if (typeof text === 'undefined'){
                el = this[0];
                return el && el.textContent || '';
            }

            // Set every element's textContent
            return this.each(function(el, i){
                el.textContent = this.getValue(text, i);
            }, this);
        },

        cssPrefix: function(){
            throw 'cssPrefix() deprecated. Use css() instead.';
        },

        css: (function(){
            var resolvedTransition = resolveCssProperty('transition'),
                resolvedTransitionProperty = resolveCssProperty('transition-property'),
                // Regex matches 'opacity' & 'transform' in, e.g.
                // 'opacity, transform 1s ease-in'
                propertiesRegex = /(^\s*|\s*,\s*)(-?[a-z][a-z0-9_\-]*)+/ig,
                transitionKeywords = ['all', 'none', 'initial'];

            function prefixTransitionProperties(transitionValue){
                var ret = '',
                    lastIndex = 0,
                    matches = propertiesRegex.exec(transitionValue),
                    prop, resolvedProp, separator;

                while(matches){
                    separator = matches[1];
                    prop = matches[2];
                    resolvedProp = null;

                    // Transition property keyword used
                    if (transitionKeywords.indexOf(prop) !== -1){
                        resolvedProp = prop;
                    }
                    else {
                        resolvedProp = resolveCssProperty(prop, true);
                    }
                    ret += transitionValue.slice(lastIndex, matches.index);

                    if (resolvedProp){
                        ret += separator + resolvedProp;
                    }

                    lastIndex = propertiesRegex.lastIndex;
                    matches = propertiesRegex.exec(transitionValue);
                }
                ret += transitionValue.slice(lastIndex);
                return ret;
            }

            // Adapt properties for vendor-prefixed variations
            // Remove invalid properties
            // TODO: Should each type of element have its own style dictionary?
            function verifyStyles(styles){
                var prop, resolvedProp;

                for (prop in styles){
                    if (styles.hasOwnProperty(prop)){
                        resolvedProp = resolveCssProperty(prop);

                        if (prop !== resolvedProp){
                            if (resolvedProp){
                                styles[resolvedProp] = styles[prop];
                            }
                            delete styles[prop];
                        }
                    }
                }
            }

            return function(styles, value){
                var el, styleObj, styleProperty, resolvedProp;

                if (typeof styles !== 'object'){
                    if (typeof value === 'undefined'){
                        el = this[0];
                        styleObj = el && el.style;

                        // No parameters; get all styles
                        if (!styles){
                            return styleObj || {};
                        }

                        // Get named style
                        resolvedProp = styleObj && resolveCssProperty(styles);
                        return resolvedProp && styleObj[resolvedProp];
                        // or document.defaultView.getComputedStyle(el, null).getPropertyValue(styles);
                    }

                    // Set named value
                    // Create styles object
                    styleProperty = styles;
                    styles = {};
                    styles[styleProperty] = value;
                }

                verifyStyles(styles);

                // No styles left after invalid properties removed, exit
                if (!Object.keys(styles).length){
                    return this;
                }

                return this.each(function(el, i){
                    var styleObj = el.style,
                        prop, value;
                    
                    for (prop in styles){
                        if (styles.hasOwnProperty(prop)){
                            value = this.getValue(styles[prop], i);

                            if (prop === resolvedTransition || prop === resolvedTransitionProperty){
                                value = prefixTransitionProperties(value);
                            }
                            styleObj[prop] = value;
                        }
                    }
                }, this);
            };
        }()),


        // ANIMATION
        stagger: (function(){
            function Options(options){
                extend(this, options);
            }
            extend(Options.prototype, {
                t: 1000,
                defer: false,
                repeat: 1, // TODO: also rename duplicate() arg to `repeat`?
                autostart: true,
                autodestroy: true,
                order: 'asc',
                bounce: false
            });

            function Controller(collection, iterator, options){
                this.collection = collection;
                this.iterator = iterator;
                this.event = Pablo();
                this.options = new Options(options);
                this.reset();

                if (this.options.autostart){
                    this.start();
                }
            }

            extend(Controller.prototype, {
                constructor: Controller,
                active: false,
                lastIndex: -1,

                resetLoop: function(){
                    var order = this.options.order;

                    if (order === 'asc'){
                        this.i = 0;
                    }
                    else if (order === 'desc'){
                        this.i = this.collection.length-1;
                    }
                    this.trigger('loopreset');
                    return this;
                },

                reset: function(){
                    this.remaining = this.options.repeat;
                    this.resetLoop();
                    this.trigger('reset');
                    return this;
                },

                setTimeout: function(t){
                    var ctrl = this;

                    if (typeof t !== 'number'){
                        t = this.collection.getValue(this.options.t, this.i);
                    }

                    this.ref = setTimeout(function(){
                        ctrl.next();
                    }, t);

                    return this;
                },

                next: function(){
                    var order, isComplete;

                    this.iteration();

                    order = this.options.order;
                    this.lastIndex = this.i;

                    if (order === 'asc'){
                        this.i ++;
                        isComplete = this.i === this.collection.length;
                    }
                    else if (order === 'desc'){
                        this.i --;
                        isComplete = this.i < 0;
                    }

                    if (isComplete){
                        this.end();
                        this.remaining --;

                        if (this.remaining){
                            this.begin(true);
                        }
                        else {
                            if (this.options.autodestroy){
                                this.destroy();
                            }
                            else {
                                this.complete();
                            }
                        }
                    }
                    else {
                        this.setTimeout();
                    }
                    return this;
                },

                iteration: function(){
                    var collection = this.collection,
                        i = this.i,
                        current  = collection[i],
                        previous = collection[this.lastIndex];

                    this.iterator.call(collection, current, previous, i, this.lastIndex);
                    this.trigger('iteration', collection, current, previous, i, this.lastIndex);
                    return this;
                },

                // Start (or unpause) the animation
                start: function(){
                    var ctrl;

                    if (!this.active && this.collection.length){
                        ctrl = this;
                        this.active = true;

                        this.ref = setTimeout(function(){
                            // Make 'start' asynchronous, to allow binding to 
                            // 'start' event and chaining of methods before start
                            ctrl.trigger('start');
                            ctrl.begin(ctrl.options.defer);
                        }, 4);
                    }
                    return this;
                },

                // Stop (or pause) the animation
                stop: function(){
                    if (this.active){
                        this.active = false;
                        clearTimeout(this.ref);
                        this.trigger('stop');
                    }
                    return this;
                },

                toggle: function(){
                    return this.active ?
                        this.stop() : this.start();
                },

                // Begin the loop
                begin: function(defer){
                    this.trigger('begin');
                    if (defer){
                        // TODO: should 'begin' event fire just before step, after the timeout?
                        this.setTimeout();
                    }
                    else {
                        this.next();
                    }
                    return this;
                },

                end: function(){
                    this.trigger('end');

                    if (this.options.bounce){
                        if (this.options.order === 'asc'){
                            this.options.order = 'desc';
                        }
                        else if (this.options.order === 'desc'){
                            this.options.order = 'asc';
                        }
                    }
                    this.resetLoop();
                    return this;
                },

                // Complete the loop
                complete: function(){
                    if (this.active){
                        this.trigger('complete');
                        this.stop();
                        this.reset();
                    }
                    return this;
                },

                destroy: function(){
                    var prop,
                        options = this.options;

                    // if not already destroyed
                    if (this.event){
                        this.trigger('destroy');
                        this.stop();
                        this.off();

                        for (prop in options){
                            if (options.hasOwnProperty(prop)){
                                delete options[prop];
                            }
                        }

                        for (prop in this){
                            if (this.hasOwnProperty(prop)){
                                delete this[prop];
                            }
                        }
                    }

                    return this;
                }
            });

            // TEMP: will not be needed when a plain object can be 
            // extended with Pablo.Event
            ['on', 'one', 'oneEach', 'off', 'trigger'].forEach(function(method){
                Controller.prototype[method] = function(){
                    this.event[method].apply(this.event, arguments);
                    return this;
                };
            });

            return extend(
                function(iterator, options){
                    return new Controller(this, iterator, options);
                },
                {
                    fn: Controller.prototype
                }
            );
        }()),


        // AJAX
        // Load SVG or HTML via Ajax and replace collection contents with it
        load: function(url, callback, replace){
            var collection = this;

            if (this.length){
                Pablo.load(url, function(xhr){
                    if (this.length){
                        if (replace){
                            collection.empty();
                        }
                        collection.append(this);
                    }

                    if (callback){
                        callback.call(collection, this, xhr);
                    }
                });
            }
            return this;
        },

        withViewport: function(){
            var svg;

            // If this is already a single <svg> element
            if (this.length === 1 && this[0].nodeName === 'svg'){
                svg = this;
            }
            else {
                // Append to a new <svg> element
                svg = Pablo.svg().append(this).crop();
            }

            return svg;
        },

        // Get bounding box of all elements in collection
        bbox: function(){
            var allInDocument = this.isInDocument(),
                total, svg;

            if (!this.length){
                return {x:0, y:0, width:0, height:0};
            }

            // All elements in the collection are in the DOM
            if (allInDocument){
                if (this.length === 1){
                    total = this[0].getBBox();
                }

                else {
                    total = this.reduce(function(bbox, el){
                        var elBbox = el.getBBox();

                        if (elBbox.x < bbox.x){
                            bbox.x = elBbox.x;
                        }
                        if (elBbox.y < bbox.y){
                            bbox.y = elBbox.y;
                        }
                        if (elBbox.x + elBbox.width > bbox.width){
                            bbox.width = elBbox.x + elBbox.width;
                        }
                        if (elBbox.y + elBbox.height > bbox.height){
                            bbox.height = elBbox.y + elBbox.height;
                        }
                        return bbox;
                    }, {x:Infinity, y:Infinity, width:0, height:0});
                }
            }

            // Not all in the DOM
            else {
                if (this.length === 1 && this[0].nodeName === 'svg'){
                    this.appendTo(document.body);
                    total = this.bbox();
                    this.detach();
                }
                else {
                    svg = Pablo.svg()
                            .append(this.clone())
                            .appendTo(document.body);

                    total = svg.children().bbox();
                    svg.detach();
                }
            }
            return total;
        },

        viewbox: function(values){
            var viewbox;

            if (values){
                this.attr('viewBox', values.join(' '));
                return this;
            }

            viewbox = this.attr('viewBox');

            if (viewbox){
                values = viewbox.split(' ').map(function(value){
                    return Number(value);
                });
                return values;
            }
            return [0, 0, 0, 0];
        },

        crop: function(to){
            if (to && canBeWrapped(to)){
                to = toPablo(to);
            }

            return this.each(function(el){
                var node, bbox;

                // This is an <svg> element
                if (el.nodeName === 'svg'){
                    node = Pablo(el);

                    // optional `to` passed
                    if (to){
                        // e.g. crop(circles)
                        if (isPablo(to)){
                            // get bbox of the collection
                            bbox = Pablo.svg()
                                        .append(to.clone())
                                        .bbox();
                        }
                        // e.g. crop({x:-10,y:50,width:100, height:100})
                        else {
                            // a bbox object
                            bbox = to;
                        }
                    }

                    // e.g. crop()
                    else {
                        // get bbox of the <svg> element
                        bbox = node.bbox();
                    }

                    // HACK for Safari 6.0.5
                    // If <svg> element is already in the DOM, the width &
                    // height change is not correctly rendered
                    node.removeAttr('width').removeAttr('height');
                    // end HACK for Safari 6.0.5

                    // Apply dimension attributes to the <svg> element
                    node.attr({
                        width:   bbox.width,
                        height:  bbox.height,
                        viewBox: bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height
                    });
                }
            });
        },

        markup: (function(){
            var xmlSerializer;

            return function(asCompleteFile){
                var collection = this,
                    markup;

                if (!xmlSerializer){
                    xmlSerializer = new XMLSerializer();
                }

                if (asCompleteFile){
                    collection = this.clone().withViewport();
                }

                markup = '';
                collection.each(function(el){
                    markup += xmlSerializer.serializeToString(el);
                });
                return markup;
            };
        }()),

        toString: function(){
            return this.markup();
        }
    });


    /////


    // TRANSFORMS & TRANSITIONS

    (function(){
        var noop = function(){return this;};

        support.css = extend(support.css, {
            transform:  typeof resolveCssProperty('transform')  !== 'undefined',
            transition: typeof resolveCssProperty('transition') !== 'undefined'
        });


        /////


        (function(){
            var commaOrSpace = /(?:\s*,|\s)\s*/;

            function getItems(list, itemRegex, valueSeparator){
                var matches = itemRegex.exec(list),
                    ret = {},
                    name, value;

                while (matches && matches[1]){
                    name = matches[1];
                    value = matches[2];
                    ret[name] = numericToNumber(value.split(valueSeparator));
                    matches = itemRegex.exec(list);
                }
                itemRegex.lastIndex = 0;
                return ret;
            }

            function getOrderedItems(list, itemRegex, valueSeparator){
                var matches = itemRegex.exec(list),
                    ret = [],
                    name, value, item;

                while (matches && matches[1]){
                    name = matches[1];
                    value = matches[2];
                    item = {};
                    item[name] = numericToNumber(value.split(valueSeparator));
                    ret.push(item);
                    matches = itemRegex.exec(list);
                }
                itemRegex.lastIndex = 0;
                return ret;
            }

            function getItemValue(list, itemName, regexGenerator){
                var match = regexGenerator(itemName).exec(list),
                    value;

                if (match && match[2]){
                    value = numericToNumber(match[2].split(commaOrSpace));
                }
                return value;
            }

            function mergeItemsWithList(collection, i, list, items, regexGenerator, stringifyValues, suffix, suffixRegex, preProcess){
                var prop, item, value, isEmpty, itemRegex;

                if (!suffix){
                    suffix = '';
                }

                if (Array.isArray(items)){
                    items.forEach(function(item){
                        list = mergeItemsWithList(collection, i, list, item, regexGenerator, stringifyValues, suffix, suffixRegex);
                    });
                    return list;
                }

                if (preProcess){
                    items = preProcess(items);
                }

                for (prop in items){
                    if (items.hasOwnProperty(prop)){
                        value = items[prop];

                        // Get per-element value
                        if (typeof value === 'function' || (Array.isArray(value) && value.some(Array.isArray))){
                            value = collection.getValue(value, i);
                        }

                        isEmpty = value === null || value === '';
                        item = isEmpty ? '' : prop + stringifyValues(value) + suffix;

                        if (!list){
                            list = item;
                        }
                        else {
                            if (list.indexOf(prop) === -1){
                                if (suffixRegex){
                                    if (list && suffix && suffixRegex.test(list)){
                                        list += suffix;
                                    }
                                }
                                list += item;
                            }
                            else {
                                itemRegex = regexGenerator(prop);
                                list = list.replace(itemRegex, item);
                            }
                        }
                    }
                }
                // Remove trailing slash
                if (list && suffix){
                    if (list.lastIndexOf(',') === list.length-1){
                        list = list.slice(0,-1);
                    }
                }
                return list;
            }


            /////


            // TRANSFORMS

            (function(){
                var itemRegex;

                // e.g. regexGenerator('rotate');
                function regexGenerator(name){
                    return new RegExp('\\b(' + name + ')\\(([^)]*)\\)', 'g');
                }
                itemRegex = regexGenerator('[\\w-]*');

                function stringifyValues(value){
                    return '(' + (Array.isArray(value) ?
                                value.join(',') : value) + ')';
                }

                function merge(collection, i, list, transforms){
                    return mergeItemsWithList(collection, i, list, transforms, regexGenerator, stringifyValues, '', null, null);
                }

                function createTransformFunction(domMethod){
                    var getList = function(collection, settings){
                            return collection[domMethod]('transform', settings);
                        },
                        setList = getList;

                    return function(transforms, value, values){
                        var list, name, isSingle;

                        // For an empty collection, return an empty object if no arguments
                        // were passed, otherwise return the collection
                        if (!this.length){
                            return typeof transforms === 'undefined' ?
                                {} : this;
                        }

                        isSingle = this.length === 1;

                        // An array of transforms creates a new transform list in sequence
                        if (Array.isArray(transforms)){
                            return this.each(function(el, i){
                                var node = isSingle ? this : Pablo(el),
                                    list = merge(node, i, '', transforms);

                                // Set 'transform' css property or attribute
                                setList(this, list);
                            });
                        }

                        // `null` removes all transforms
                        else if (transforms === null){
                            // Set 'transform' css property or attribute
                            return setList(this, null);
                        }

                        // If `true` passed, return an ordered array of existing transforms
                        else if (typeof transforms === 'undefined' || transforms === true){
                            // Get 'transform' css property or attribute
                            list = getList(this);

                            // If `true` passed, return an ordered array of existing transforms
                            if (transforms){
                                return getOrderedItems(list, itemRegex, commaOrSpace);
                            }

                            // If no arguments passed, return an object of existing transforms
                            return getItems(list, itemRegex, commaOrSpace);
                        }

                        // Named transform passed
                        if (typeof transforms === 'string'){
                            // First argument is the full string value for the transform
                            if (arguments.length === 1 && transforms.indexOf(')') !== -1){
                                return setList(this, transforms);
                            }

                            // First argument is the transform name
                            name = transforms;

                            // No value passed, so return a specific transform's value
                            if (typeof value === 'undefined'){
                                list = getList(this);
                                return getItemValue(list, name, regexGenerator);
                            }

                            // Multiple values passed
                            if (arguments.length > 2){
                                value = toArray(arguments).slice(1);
                            }

                            // Set a specific transform
                            transforms = {};
                            transforms[name] = value;
                        }

                        // Transform object
                        if (typeof transforms === 'object'){
                            isSingle = this.length === 1;

                            this.each(function(el, i){
                                var node = isSingle ? this : Pablo(el),
                                    list = getList(node);

                                // Update existing transforms, or add new ones
                                list = merge(node, i, list, transforms);

                                // Set 'transform' css property or attribute
                                setList(node, list);
                            });
                        }

                        return this;
                    };
                }

                /////

                // Create collection.transform()

                // e.g. transform({rotate:45, translate:null}, true);
                // e.g. transform([{rotate:45}, {translate:'10px'}], true);
                pabloCollectionApi.transform = createTransformFunction('attr');

                // Create collection.transformCss()
                pabloCollectionApi.transformCss = support.css.transform ?
                    createTransformFunction('css') : noop;
            }());


            /////


            // TRANSITIONS

            if (support.css.transition){
                pabloCollectionApi.transition = (function(){
                    var itemRegex, transitionSuffixRegex,
                        TRANSITION_PROPERTY = resolveCssProperty('transition'),
                        // Inspired by Modernizr
                        TRANSITION_END = {
                            transition:       'transitionend',
                            otransition:      'oTransitionEnd',
                            moztransition:    'transitionend',
                            webkittransition: 'webkitTransitionEnd'
                        }[TRANSITION_PROPERTY.toLowerCase()],

                        getList = function(collection, settings){
                            return collection.css('transition', settings);
                        },
                        setList = getList,
                        hasValueRegex = /\w\s+\w/;


                    // e.g. regexGenerator('opacity');
                    function regexGenerator(name){
                        return new RegExp(
                            // A preceding comma and/or whitespace
                            '(?=,?)\\s*' +
                            // The CSS property name, followed by whitespace
                            '(' + name + ')\\s*' +
                            // A simple value or with brackets, e.g. '1s cubic-bezier()'
                            '(([^,(]*(?:\\([^)]*)?[^,(]*))' +
                            // A trailing comma or the end of the string
                            '(?:,\\s*|$)', 'g');
                    }

                    itemRegex = regexGenerator('[\\w-]*');

                    // Convert `value` string, number or array to 'value value value'
                    function stringifyValues(value){
                        // `dur` and `delay`
                        if (typeof value === 'number'){
                            value = value + 'ms';
                        }
                        else if (Array.isArray(value)){
                            value = value.map(function(value){
                                return stringifyValues(value);
                            }).join('');
                        }
                        return value ? ' ' + value : '';
                    }

                    function updateStyle(collection, name, value){
                        if (name === 'transform'){
                            // Pass the string value or object or array of objects to `transformCss()`
                            collection.transformCss(value);
                        }
                        else {
                            collection.css(name, value);
                        }
                    }

                    function resolveNames(transitions){
                        var ret = {},
                            resolvedName,
                            name;

                        for (name in transitions){
                            if (transitions.hasOwnProperty(name)){
                                resolvedName = resolveCssProperty(name, true);
                                ret[resolvedName] = transitions[name];
                            }
                        }
                        return ret;
                    }

                    transitionSuffixRegex = new RegExp('\\w[^,]*$');
                    function merge(collection, i, list, transitions){
                        return mergeItemsWithList(collection, i, list, transitions, regexGenerator, stringifyValues, ',', transitionSuffixRegex, resolveNames);
                    }

                    function getTransformValue(collection, value, i){
                        if (Array.isArray(value) && !Array.isArray(value[0])){
                            return value;
                        }
                        return collection.getValue(value, i);
                    }

                    function processFromOption(collection, i, name, options){
                        // Cache the current transition value
                        var cachedTransition = collection.transition(name),
                            from = name === 'transform' ?
                                getTransformValue(collection, options.from, i) :
                                collection.getValue(options.from, i),
                            transition, asyncOptions;

                        // Remove the current transition value
                        collection.transition(name, null);

                        // Set the CSS value of the property
                        updateStyle(collection, name, from);

                        // Create a 'remove' transition object, to remove the property from
                        // the transition list
                        transition = {};
                        transition[name] = null;

                        // Duplicate the options object (in case the original is re-used by the calling function)
                        asyncOptions = extend({}, options);
                        // Remove the `from` option
                        delete asyncOptions.from;
                        // Indicate that `to` does not need to create a `setTimeout`
                        asyncOptions.sync = true;

                        // Continue processing asynchronously, after a delay
                        window.setTimeout(function(){
                            // Reinstate previous transition value
                            if (cachedTransition){
                                collection.transition(name, cachedTransition);
                            }
                            // Merge options into the transition value
                            collection.transition(asyncOptions);
                        }, 4);

                        return transition;
                    }

                    function processOtherOptions(collection, i, name, options){
                        var transition, callback, values, to;

                        if ('to' in options){
                            to = name === 'transform' ?
                                getTransformValue(collection, options.to, i) :
                                collection.getValue(options.to, i);

                            // The CSS property is known to exist, so the transition will
                            // render
                            if (options.sync){
                                updateStyle(collection, name, to);
                            }

                            // It is unknown if the CSS property already exists on every
                            // element (and it would be expensive to determine this), so 
                            // set a timeout after the transition is applied to ensure it
                            // renders 
                            else {
                                window.setTimeout(function(){
                                    updateStyle(collection, name, to);
                                }, 4);
                            }
                        }

                        if ('end' in options){
                            callback = options.end;
                            collection.on(TRANSITION_END, function end(event){
                                name = resolveCssProperty(name, true);

                                if (event.propertyName === name){
                                    if (options.autoremove !== false){
                                        collection.off(TRANSITION_END, end);
                                    }
                                    callback.call(collection, event);
                                }
                            });
                        }

                        // Values to be added to the element's 'transition' CSS style
                        values = [];

                        if ('dur' in options){
                            values.push(collection.getValue(options.dur, i));
                        }
                        if ('timing' in options){
                            values.push(collection.getValue(options.timing, i));
                        }
                        if ('delay' in options){
                            values.push(collection.getValue(options.delay, i));
                        }

                        transition = {};
                        transition[name] = values;
                        return transition;
                    }

                    function processOptions(collection, i, list, options){
                        var transition, name;

                        if ('name' in options){
                            name = options.name;

                            // Options that aren't added to the element's 'transition' CSS style
                            if ('from' in options){
                                transition = processFromOption(collection, i, name, options);
                            }
                            else {
                                transition = processOtherOptions(collection, i, name, options);
                            }
                        }

                        else {
                            transition = options;
                        }

                        return merge(collection, i, list, transition);
                    }


                    //////////////////////


                    return function(transitions, value, values){
                        var list, name, match, isSingle;
                        
                        // For an empty collection, return an empty object if no arguments
                        // were passed, otherwise return the collection
                        if (!this.length){
                            return typeof transitions === 'undefined' ?
                                {} : this;
                        }

                        isSingle = this.length === 1;

                        // An array of transitions creates a new transition list in sequence
                        if (Array.isArray(transitions)){
                            return this.each(function(el, i){
                                var node = isSingle ? this : Pablo(el),
                                    list = transitions.map(function(options, i){
                                        return processOptions(node, i, list, options);
                                    }).join(',');

                                // Set 'transition' css property or attribute
                                setList(this, list);
                            });
                        }

                        // `null` removes all transitions
                        else if (transitions === null){
                            // Set 'transition' css property or attribute
                            return setList(this, '');
                        }

                        // If `true` passed, return an ordered array of existing transitions
                        else if (typeof transitions === 'undefined' || transitions === true){
                            // Get 'transition' css property
                            list = getList(this);

                            // If `true` passed, return an ordered array of existing transitions
                            if (transitions){
                                return getOrderedItems(list, itemRegex, commaOrSpace);
                            }

                            // If no arguments passed, return an object of existing transitions
                            return getItems(list, itemRegex, commaOrSpace);
                        }

                        // Named transition passed
                        if (typeof transitions === 'string'){
                            // First argument is the full string value for the transition
                            if (arguments.length === 1 && hasValueRegex.test(transitions)){
                                return setList(this, transitions);
                            }

                            // First argument is the transition name
                            name = transitions;

                            // No value passed, so return a specific transition's value
                            if (typeof value === 'undefined'){
                                list = getList(this);
                                return getItemValue(list, name, regexGenerator);
                            }

                            // Multiple values passed
                            else if (arguments.length > 2){
                                value = toArray(arguments).slice(1);
                            }

                            // An object of options
                            // Add the name to the options
                            if (isPlainObject(value)){
                                transitions = extend({name:name}, value);
                            }

                            else {
                                // Set a specific transition
                                transitions = {};
                                transitions[name] = value;
                            }
                        }

                        // Transition object
                        if (typeof transitions === 'object'){
                            this.each(function(el, i){
                                var node = isSingle ? this : Pablo(el),
                                    list = getList(node);

                                // Update existing transitions, or add new ones
                                list = processOptions(node, i, list, transitions);

                                // Set 'transform' css property
                                setList(node, list);
                            });
                        }

                        return this;
                    };
                }());   
            }

            else {
                pabloCollectionApi.transition = noop;
            }
        }());
    }());


    /////


    // CONVERSION

    (function(){
        function errorObj(){
            return {error:true};
        }

        extend(pabloCollectionApi, {
            dataUrl: support.dataUrl ?
                function(type, callback, asFragment){
                    var collection = this,
                        asCompleteFile, markup, data, dataUrl;

                    if (!callback && typeof type === 'function'){
                        asFragment = callback;
                        callback = type;
                        type = null;
                    }

                    if (!type || type === 'svg'){
                        asCompleteFile = !asFragment;
                        markup = this.markup(asCompleteFile);

                        // See https://developer.mozilla.org/en-US/docs/Web/API/window.btoa#Unicode_Strings for use of encodeURIComponent and unescape
                        data = btoa(unescape(encodeURIComponent(markup)));
                        dataUrl = svgDataUrlPrefix + data;

                        if (callback){
                            callback.call(collection, dataUrl);
                        }

                        return dataUrl;

                        // Alternative approach:
                        //var blob = new window.Blob([markup], {type:'image/svg+xml'});
                        //return window.URL.createObjectURL(blob);
                    }

                    else {
                        this.toCanvas(function(canvas){
                            var dataUrl;

                            if (!('error' in canvas)){
                                try {
                                    // Access canvas element's native toDataURL() method
                                    dataUrl = canvas[0].toDataURL('image/' + type);
                                }
                                catch(e){}
                            }

                            if (callback){
                                callback.call(collection, dataUrl || null);
                            }
                        });
                    }
                } :

                // Can't generate dataUrl (use a polyfill to enable the dataUrl method in an unsupported browser)
                function(type, callback){
                    if (callback){
                        callback(this, null);
                    }
                    return null;
                },

            // type: 'svg' (default), 'png' or 'jpeg'
            // callback (optional): When the image has loaded, the callback will 
            // be passed a collection containing the image. If the image fails, to load,
            // the callback is passed `null`
            toImage: support.image.svg ?
                function(type, callback){
                    var collection = this,
                        el = document.createElement('img'),
                        img = Pablo(el),
                        bbox = this.bbox();

                    if (!callback && typeof type === 'function'){
                        callback = type;
                        type = null;
                    }

                    this.dataUrl(type, function(dataUrl){
                        if (dataUrl){
                            // If no dimensions, then give the image zero
                            // dimensions.
                            // The bbox() check is made to prevent empty <svg> 
                            // elements creating an image with the browser's
                            // default dimenstions for an empty <svg> element
                            // (seen in Chrome 32, Firefox 24 & Opera 12.16
                            if (bbox.width <= 0 || bbox.height <= 0){
                                // TODO: Currently, the bbox() call is made for 
                                // all types of elements, not just <svg> elements,
                                // as a precaution. If no other elements need this
                                // check, then only call bbox() when the collection
                                // is a <svg> element
                                el.width = el.height = 0;
                            }

                            if (callback){
                                img.one('load', function(){
                                    callback.call(collection, img);
                                });
                            }
                            el.src = dataUrl;
                        }

                        // Error: couldn't create dataUrl
                        else if (callback){
                            callback.call(collection, errorObj());
                        }
                    });

                    return img;
                } :

                function(type, callback){
                    var error = errorObj();

                    if (callback){
                        callback.call(this, error);
                    }
                    return error;
                },

            toCanvas: support.canvas ?
                function(callback, canvas){
                    var collection = this,
                        svgImage, doCanvasResize;

                    if (!canvas && typeof callback === 'object'){
                        canvas = callback;
                        callback = null;
                    }

                    doCanvasResize = !canvas;
                    canvas = toPablo(canvas || document.createElement('canvas'));

                    svgImage = this.toImage('svg', function(img){
                        var width = img[0].width,
                            height = img[0].height,
                            ctx;

                        if (doCanvasResize){
                            canvas.attr({
                                width:  width,
                                height: height
                            });
                        }

                        if (width && height){
                            ctx = canvas[0].getContext('2d');
                            ctx.drawImage(img[0], 0, 0, width, height);
                        }

                        // HACK for Safari 6.0.5 & Opera 12.16
                        svgImage.detach();
                        // end HACK

                        if (callback){
                            callback.call(collection, canvas);
                        }
                    });

                    if (!svgImage[0].complete){
                        // HACK for Safari 6.0.5 & Opera 12.16
                        svgImage.css({
                                visibility: 'hidden',
                                position: 'absolute',
                                top: '-99999px'
                            })
                            .appendTo(document.body);
                        // end HACK
                    }

                    return canvas;
                } :

                function(canvas, callback){
                    var error = errorObj();

                    if (callback){
                        callback.call(this, error);
                    }
                    return error;
                },

            // See http://hackworthy.blogspot.pt/2012/05/savedownload-data-generated-in.html
            // Polyfills:
            // https://github.com/eligrey/Blob.js
            // https://github.com/eligrey/FileSaver.js
            // https://github.com/eligrey/canvas-toBlob.js
            // http://www.nihilogic.dk/labs/canvas2image/
            download: support.download ?
                function(type, filename, callback, asFragment){
                    var collection = this,
                        link = Pablo(document.createElement('a'));

                    if (!type){
                        type = 'svg';
                    }
                    if (!filename){
                        filename = 'pablo.' + (type === 'jpeg' ? 'jpg' : type);
                    }

                    function outerCallback(dataUrl){
                        var event;

                        if (dataUrl){
                            link.attr({
                                href: dataUrl,
                                download: filename
                            });

                            event = document.createEvent('MouseEvents');
                            event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
                            link[0].dispatchEvent(event);
                        }

                        if (callback){
                            callback.call(collection, dataUrl ? link : errorObj());
                        }
                    }

                    // An alternative approach to using dataUrl is to create a Blob
                    // blob = new window.Blob([markup], {type:'image/svg+xml'}),
                    // url = window.URL.createObjectURL(blob),
                    this.dataUrl(type, outerCallback, asFragment);
                    return link;
                } :

                function(type, filename, callback){
                    var error = errorObj();

                    if (callback){
                        callback.call(this, error);
                    }
                    return error;
                }
        });
    }());


    /////

    // DATA

    (function(){
        function removeData(el, key){
            var id = el[cacheExpando],
                data;

            // Delete all keys
            if (!key){
                delete cache[id];
            }

            else {
                // Delete a specific key
                data = cache[id];
                if (data){
                    // Delete the key
                    if (Object.keys(data).length > 1){
                        delete cache[id][key];
                    }
                    // The data container is empty, so delete it
                    else {
                        delete cache[id];
                        // Delete the element's data reference
                        // This removal is used by hasData to quickly determine
                        // if the element has associated data
                        delete el[cacheExpando];
                        // TODO: this may make the counter increment faster, where
                        // an element is continually having events added and removed.
                        // It is assumed that JavaScript's integer limit will not
                        // be reached in the lifetime of a program. Is that OK?
                    }
                }
            }
        }

        extend(pabloCollectionApi, {
            data: function(key, value){
                var id, data;

                // First argument is an object of key-value pairs
                if (typeof key === 'object'){
                    data = key;
                }

                // Get value - e.g. collection.data('foo') or collection.data()
                else {
                    if (typeof value === 'undefined'){
                        if (this.length){
                            // Use the id of the first element in the collection
                            id = this[0][cacheExpando];

                            if (id && id in cache){
                                return typeof key === 'undefined' ?
                                    cache[id] : cache[id][key];
                            }
                        }
                        return;
                    }

                    // Set value via (key, value); prepare data object
                    data = {};
                    data[key] = value;
                }

                // If there are no elements in the collection, so the collection
                // is empty, then store a plain object to carry the collection's
                // state. Used, for example, to allow an empty collection to 
                // have events bound and triggered to it.
                //      `var e = Pablo().on('foo', fn); e.trigger('foo');`
                if (!this.length){
                    arrayProto.push.call(this, {});
                }
                
                // Set data for each element
                return this.each(function(el){
                    var id = el[cacheExpando];

                    if (!id){
                        id = el[cacheExpando] = cacheNextId ++;
                    }

                    if (!cache[id]){
                        cache[id] = {};
                    }

                    extend(cache[id], data);
                });
            },

            removeData: function(key){
                return this.each(function(el){
                    // Remove a key from the element's data object
                    if (key){
                        removeData(el, key);
                    }
                    // Remove all data on the element
                    else {
                        removeData(el);
                    }
                });
            },

            hasData: function(deepData, includeSelf){
                return Object.keys(cache).length > 0 &&
                    this.some(function(el){
                        var onThis, onChildren;

                        if (includeSelf !== false){
                            onThis = !!el[cacheExpando];
                        }
                        if (deepData && !onThis){
                            onChildren = Pablo(el).find('*').hasData();
                        }
                        return onThis || onChildren;
                    });
            },

            cloneData: function(){
                var data = this.data(),
                    events, clonedEvents, type;

                if (data){
                    // Copy events object
                    events = data[eventsNamespace];
                    if (events){
                        // Duplicate data object and events object on it, to
                        // de-reference the cloned element's stored events
                        data = extend({}, data);
                        clonedEvents = data[eventsNamespace] = extend({}, events);
                        // For each event type, e.g. `mousedown`, copy the array
                        // of event listeners
                        for (type in events){
                            if (events.hasOwnProperty(type)){
                                // Create new array
                                clonedEvents[type] = events[type].slice();
                            }
                        }
                    }
                }
                return data;
            },

            matches: function(methodName, comparison, context){
                var index, filtered;

                // function
                if (typeof comparison === 'function'){
                    if (!context){
                        context = this;
                    }

                    switch (methodName){
                        case 'indexOf':
                        index = -1;
                        arrayProto.some.call(this, function(el, i){
                            if (comparison.call(context, el, i, this)){
                                index = i;
                                return true;
                            }
                        }, context);
                        return index;

                        case 'select':
                        filtered = Pablo();
                        arrayProto.filter.call(this, function(el, i){
                            if (comparison.call(context, el, i, this)){
                                filtered.add(el);
                            }
                        }, context);
                        return filtered;

                        // 'some' & 'every'
                        default:
                        return arrayProto[methodName].call(this, comparison, context);
                    }
                }

                // CSS selector
                if (typeof comparison === 'string'){
                    return this.matches(methodName, function(el){
                        return el[matchesProp](comparison);
                    });
                }

                else {
                    comparison = toPablo(comparison);
                }

                // `every`, `some` & `indexOf`
                return this.matches(methodName, function(el){
                    return comparison.some(function(compareEl){
                        return el === compareEl;
                    });
                });
            }
        });
    }());


    // EVENTS
    // TODO: refactor on(), etc to allow non-Pablo collections
    Events = {
        on: function(type, selectors, listener, useCapture, context){
            var isSingle, wrapper, eventData;

            // `selectors` argument not given
            if (typeof listener !== 'function' && typeof selectors === 'function'){
                context = useCapture;
                useCapture = listener;
                listener = selectors;
                selectors = null;
            }
            if (typeof useCapture === 'undefined'){
                useCapture = false;
            }

            // Allow binding and triggering events on empty collections
            // Create a container object to store state
            if (!this.length){
                arrayProto.push.call(this, {});
            }

            // `listener` is the original callback function
            // `wrapper` is the function actually applied to the DOM element, and 
            // may modify the original listener, e.g. by changing the `this` object

            // If a `this` object is given, then bind the listener to the required 
            // `this` context
            // TODO: change default context to collection instead of DOM element?
            if (context){
                wrapper = function(){
                    listener.apply(context, arguments);
                };
            }
            else {
                wrapper = listener;
            }

            isSingle = this.length === 1;

            // If there are multiple, space-delimited event types, then cycle 
            // through each one
            return this.processList(type, function(type){
                // Cycle through each element in the collection
                this.each(function(el, i){
                    var node = isSingle ? this : Pablo(el),
                        eventsCache = node.data(eventsNamespace),
                        cache;

                    if (!eventsCache){
                        eventsCache = {};
                        node.data(eventsNamespace, eventsCache);
                    }
                
                    cache = eventsCache[type];
                    if (!cache){
                        cache = eventsCache[type] = [];
                    }

                    // `selectors` have been supplied, to set a delegate event
                    if (selectors){
                        // Overwrite the wrapper to make it check that the event
                        // originated on an element matching the selectors
                        wrapper = function(event){
                            // Call listener if the target matches the selector
                            if (
                                event &&
                                // `event.pablo` is set in trigger() for manual
                                // event triggering. Delegate events do not currently
                                // support manual triggering - e.g. 
                                // delegate = Pablo('g.foo');
                                // targets = delegate.find('circle.bar');
                                // parent.on('click', targets, listener);
                                // targets.trigger('click');
                                !event.pablo &&
                                // TODO: should `context` be passed to `some()`
                                // to be used for selectors functions or is that
                                // mixing up concerns?
                                Pablo(event.target).some(selectors, context)
                            ){
                                listener.apply(context || el, arguments);
                            }
                        };
                    }

                    // Prepare data to cache about the event
                    // With `selectors`, a new eventData object is needed for each element
                    if (selectors || !i){
                        eventData = {
                            selectors:  selectors,
                            listener:   listener,
                            wrapper:    wrapper || listener,
                            useCapture: useCapture
                        };
                    }

                    // Add to cache
                    cache.push(eventData);

                    // Add DOM listener
                    if ('addEventListener' in el){
                        el.addEventListener(type, wrapper || listener, useCapture);
                    }
                });
            });
        },

        off: function(type, selectors, listener, useCapture){
            var isSingle = this.length === 1;

            // `selectors` argument not given
            if (typeof selectors === 'function'){
                useCapture = listener;
                listener = selectors;
                selectors = null;
            }
            if (typeof useCapture === 'undefined'){
                useCapture = false;
            }
            
            // If there are multiple, space-delimited event types, then cycle 
            // through each one
            return this.processList(type, function(type){
                this.each(function(el){
                    var node = isSingle ? this : Pablo(el),
                        eventsCache = node.data(eventsNamespace),
                        cache, cachedType;

                    if (!eventsCache){
                        return;
                    }

                    // Remove all event listeners
                    if (!type){
                        for (cachedType in eventsCache){
                            if (eventsCache.hasOwnProperty(cachedType)){
                                node.off(cachedType);
                            }
                        }
                        return;
                    }

                    cache = eventsCache[type];
                    if (!cache || !cache.length){
                        return;
                    }

                    // Remove DOM listeners and delete from cache. This uses a `some`
                    // loop rather than `forEach` to allow breaking. And it uses
                    // `some` rather than a `for` loop as the cache is a sparse array.
                    cache.some(function(eventData, i){
                        if (
                            // If a listener has been passed, is this it?
                            (listener  === eventData.listener &&
                            useCapture === eventData.useCapture &&
                            selectors  === eventData.selectors) ||

                            // Or if no listener was passed...
                            (!listener && (
                                !selectors || selectors === eventData.selectors
                            )
                        )){
                            // Remove DOM listener
                            if ('removeEventListener' in el){
                                el.removeEventListener(type, eventData.wrapper, eventData.useCapture);
                            }

                            // If looking for a specific listener, remove from cache
                            // and break the loop. NOTE: if the listener was set 
                            // multiple times, it will need removal multiple times.
                            if (listener){
                                delete cache[i];
                                return true;
                            }
                        }
                    });

                    // Delete the cache container for this event type, if empty
                    if (!listener || !Object.keys(eventsCache[type]).length){
                        delete eventsCache[type];
                    }
                    // Delete the events container for this element, if empty
                    if (!Object.keys(eventsCache).length){
                        node.removeData(eventsNamespace); 
                    }
                });
            });
        },

        // Trigger listener once per collection
        one: function(type, selectors, listener, useCapture, context){
            var collection = this;

            // `selectors` argument not given
            if (typeof selectors === 'function'){
                context = useCapture;
                useCapture = listener;
                listener = selectors;
                selectors = null;
            }

            function removeListener(){
                // Remove listener and additional listener
                collection.off(type, selectors, listener,       useCapture, context)
                          .off(type, selectors, removeListener, useCapture, context);
            }

            // Add the original listener, and an additional listener that removes
            // the first, and itself. The reason a single wrapper is not used
            // instead of two separate listeners is to allow manual removal of
            // the original listener (with `.off()`) before it ever triggers.
            return this.on(type, selectors, listener,       useCapture, context)
                       .on(type, selectors, removeListener, useCapture, context);
        },

        // Trigger listener once per element in the collection
        oneEach: function(){
            var args = arguments,
                isSingle = this.length === 1;

            return this.each(function(el){
                // Avoid unnecessary Pablo collection creation
                var node = isSingle ? this : Pablo(el);
                node.one.apply(node, args);
            });
        },

        // TODO: optional `context` as second argument?
        trigger: (function(){
            function processTrigger(node, type, args){
                // Use Pablo.fn.data.call to support non-Pablo collections
                var eventsCache = Pablo.fn.data.call(node, eventsNamespace),
                    el = node[0] || node;

                if (eventsCache){
                    // If there are multiple, space-delimited event types, then cycle 
                    // through each one
                    node.processList(type, function(type){
                        var cache = eventsCache[type];

                        if (cache){
                            args[0] = {
                                // `pablo` flag is used by `on()` wrapper
                                pablo: true,
                                type: type,
                                target: el
                            };
                            cache.forEach(function(eventData){
                                eventData.wrapper.apply(el, args);
                            });
                        }
                    });
                }
            }

            return function(type /*, arbitrary args to pass to listener*/){
                var args = toArray(arguments);

                return this.processList(type, function(type){
                    if (typeof this.length === 'undefined' || this.length === 1){
                        processTrigger(this, type, args);
                    }
                    else if (this.length > 1) {
                        // Use forEach instead of each, to also support arrays
                        this.forEach(function(el){
                            processTrigger(Pablo(el), type, args);
                        });
                    }
                });
            };
        }()),
        
        processList: function(item, fn){
            var collection = this;

            // Multiple items
            if (item && item.indexOf(' ') > 0){
                item.split(' ').forEach(function(item){
                    collection.processList(item, fn);
                });
            }
            // Single item
            else {
                fn.call(this, item);
            }
            return this;
        }
    };

    extend(pabloCollectionApi, Events);


    /////


    // API SHORTCUTS
        
    // iterator e.g. `function(el, insertEl){el.appendChild(insertEl);}`
    // `insertIntoThis` is boolean flag (default true) - if true, will insert 
    // subject elements into the collection
    function insert(iterator, insertIntoThis, returnThis){
        return function(node, attr, withData, deepData){
            var insertInto, toInsert, createdHere;

            if (this.length){
                if (insertIntoThis === false){
                    insertInto = toPablo(node, attr);
                    toInsert = this;
                }
                else {
                    insertInto = this;
                    toInsert = toPablo(node, attr);
                }

                insertInto.each(function(el, i){
                    // If there are multiple elements being inserted into, e.g.
                    //     Pablo(['g','a']).append(Pablo.g());
                    // then clone the elements to be inserted. If the elements
                    // were created by this function, via `toPablo` then clone shallow
                    if (i){
                        createdHere = typeof node === 'string' && !canBeWrapped(attr);
                        toInsert = createdHere ?
                            toInsert.clone(false) :
                            toInsert.clone(true, withData, deepData);
                    }

                    toInsert.each(function(insertEl){
                        iterator.call(insertInto, el, insertEl);
                    });
                });
            }
            return returnThis === false ? toInsert : this;
        };
    }

    function append(el, insertEl){
        el.appendChild(insertEl);
    }

    function prepend(el, insertEl){
        el.insertBefore(insertEl, el.firstChild);
    }

    function before(el, toInsert){
        if (el.parentNode){
            el.parentNode.insertBefore(toInsert, el);
        }
    }

    function after(el, toInsert){
        if (el.parentNode){
            el.parentNode.insertBefore(toInsert, el.nextSibling);
        }
    }

    function traverse(prop, doWhile){
        return function(selectors){
            return this.traverse(prop, doWhile, selectors);
        };
    }

    function matches(methodName){
        return function(comparison, context){
            return this.matches(methodName, comparison, context);
        };
    }

    extend(pabloCollectionApi, {
        // ARRAY-LIKE QUERY
        indexOf: matches('indexOf'),
        some: matches('some'),
        every: matches('every'),
        select: matches('select'),
        // Note: `select()` is analogous to Array.filter but is called `select`
        // here (as in Underscore.js) because Pablo's filter() method is used to
        // create a `<filter>` SVG element.


        // INSERTION
        child:        insert(append, true, false),
        append:       insert(append),
        appendTo:     insert(append, false),
        prepend:      insert(prepend),
        prependTo:    insert(prepend, false),
        before:       insert(before),
        insertBefore: insert(before, false),
        after:        insert(after),
        insertAfter:  insert(after, false),


        // TRAVERSAL
        // NOTE on svgElement.children: ideally, we'd use the 'children'
        // collection, instead of 'childNodes'. Even if a browser implements 
        // 'children' on HTML elements, it isn't always implemented on SVG elements
        // See https://hacks.mozilla.org/2009/06/dom-traversal/
        // Bug report in WebKit: https://bugs.webkit.org/show_bug.cgi?id=112698
        children:     traverse('childNodes'),
        firstChild:   traverse('firstElementChild'),
        lastChild:    traverse('lastElementChild'),
        prev:         traverse('previousElementSibling'),
        prevSiblings: traverse('previousElementSibling', true),
        next:         traverse('nextElementSibling'),
        nextSiblings: traverse('nextElementSibling', true),
        parent:       traverse('parentNode'),
        parents:      traverse('parentNode', isElement),
        parentsSvg:   traverse('parentNode', isSVGElement),
        viewport:     traverse('viewportElement'),
        viewports:    traverse('viewportElement', true),

        owner: function(selectors){
            // Use try/catch as Firefox 23 throws error on attempting to access the 
            // `ownerSVGElement` of an element out of the DOM
            // https://bugzilla.mozilla.org/show_bug.cgi?id=912311
            try {
                return this.traverse('ownerSVGElement', false, selectors);
            }
            catch(e){
                return Pablo();
            }
        },

        owners: function(selectors){
            // Use try/catch as Firefox 23 throws error on attempting to access the 
            // `ownerSVGElement` of an element out of the DOM
            // https://bugzilla.mozilla.org/show_bug.cgi?id=912311
            try {
                return this.traverse('ownerSVGElement', true, selectors);
            }
            catch(e){
                return Pablo();
            }
        },

        ancestor: function(){
            return this.traverse('parentNode', isElementOrDocument).last();
        },

        // Find each element's SVG root element
        root: function(selectors){
            return this.map(function(el){
                var node = this.length === 1 ?
                    this : Pablo(el);
                return node.owners(selectors).last();
            });
        },

        siblings: function(selectors){
            return this.prevSiblings(selectors)
                       .add(this.nextSiblings(selectors));
        },

        find: function(selectors){
            return this.map(function(el){
                return el.querySelectorAll(selectors);
            });
        }
    });


    /////


    // CHECK CONDITION

    function checkCondition(fn, passCollection){
        return function(any){
            if (this.length === 1){
                return fn(passCollection ? this : this[0]);
            }
            else {
                return any ? this.some(fn) : this.every(fn);
            }
        };
    }

    extend(pabloCollectionApi, {
        isInDocument: checkCondition(function(node){
            return toPablo(node).parents(document.body).length === 1;
        }, true),

        isRoot: checkCondition(function isRoot(el){
            return el.nodeName === 'svg' && !el.ownerSVGElement;
        }),

        hasSvgNamespace: checkCondition(function(el){
            return hasSvgNamespace(el);
        })
    });


    /////


    // ALIASES

    extend(pabloCollectionApi, {
        elements: pabloCollectionApi.toArray,
        push:     pabloCollectionApi.add,
        forEach:  pabloCollectionApi.each,
        is: pabloCollectionApi.some,
        lastIndexOf: pabloCollectionApi.indexOf
    });


    /////

    
    // CSS CLASSES

    // Supports space-delimited multiple classNames, as well as attribute values
    // and function values
    if (support.classList){
        classlistMethod = function(method){
            return function(className){
                return this.each(function(el, i){
                    var value = this.getValue(className, i);
                    this.processList(value, function(className){
                        el.classList[method](className);
                    });
                }, this);
            };
        };

        // Browser supports native classLists in SVG, e.g. Firefox
        cssClassApi = {
            // Return true if _any_ element has className
            hasClass: function(className){
                return this.some(function(el, i){
                    var value = this.getValue(className, i);
                    return el.classList.contains(value);
                }, this);
            },
            addClass: classlistMethod('add'),
            removeClass: classlistMethod('remove'),
            toggleClass: classlistMethod('toggle')
        };
    }

    // Browser doesn't support native classLists in SVG, e.g. IE9, Chrome 21
    else {
        cssClassApi = {
            // Return true if _any_ element has className
            hasClass: function(className){
                return this.some(function(el, i){
                    // Avoid unnecessary Pablo collection creation
                    var value = this.getValue(className, i),
                        classString = getAttribute(el, 'class');

                    return classString && (' ' + classString + ' ')
                        .indexOf(' ' + value + ' ') !== -1;
                }, this);
            },

            addClass: function(className){
                var isSingle = this.length === 1;
                return this.each(function(el, i){
                    // Avoid unnecessary Pablo collection creation
                    var node = isSingle ? this : Pablo(el),
                        value = this.getValue(className, i),
                        classString;

                    this.processList(value, function(className){
                        if (!node.hasClass(className)){
                            classString = node.attr('class');
                            classString = classString ? (classString + ' ') : '';
                            node.attr('class',  classString + className);
                        }
                    });
                });
            },

            removeClass: function(className){
                var isSingle = this.length === 1;
                return this.each(function(el, i){
                    // Avoid unnecessary Pablo collection creation
                    var node = isSingle ? this : Pablo(el),
                        value = this.getValue(className, i);

                    this.processList(value, function(className){
                        // TODO: avoid excessive RegExp creation
                        var classPattern = new RegExp('(?:^|\\s)' + className + '(\\s|$)'),
                            classString;

                        if (node.hasClass(className)){
                            classString = node.attr('class');
                            classString = classString.replace(classPattern, '$1');
                            node.attr('class', classString);
                        }
                    });
                });
            },

            toggleClass: function(className){
                var isSingle = this.length === 1;
                return this.each(function(el, i){
                    // Avoid unnecessary Pablo collection creation
                    var node = isSingle ? this : Pablo(el),
                        value = this.getValue(className, i);

                    this.processList(value, function(className){
                        if (node.hasClass(className)){
                            node.removeClass(className);
                        }
                        else {
                            node.addClass(className);
                        }
                    });
                });
            }
        };
    }

    extend(pabloCollectionApi, cssClassApi);

    /* For alternative implementations of class manipulation, see:
        * https://gist.github.com/1319121
        * https://developer.mozilla.org/media/uploads/demos/p/a/paulrouget/8bfba7f0b6c62d877a2b82dd5e10931e/hacksmozillaorg-achi_1334270447_demo_package/classList/classList.js
        * https://hacks.mozilla.org/2010/01/classlist-in-firefox-3-6/
    */


    /////


    // PABLO API

    // Pablo main function
    function Pablo(node, attr){
        if (canBeWrapped(attr)){
            return new PabloCollection(arguments);
        }
            
        return new PabloCollection(node, attr);
    }

    // Check if the object is a Pablo collection
    function isPablo(obj){
        return obj instanceof Pablo.Collection;
    }
    
    // Pablo methods
    extend(Pablo, {
        version: pabloVersion,
        isSupported: true,
        support: support,
        userAgent: userAgent,
        ns: {
            xmlns: xmlns,
            svg: svgns,
            html: htmlns,
            xlink: xlinkns
        },
        svgVersion: svgVersion,
        Collection: PabloCollection,
        Events: Events,
        fn: pabloCollectionApi,

        // methods
        make: make,
        isPlainObject: isPlainObject,
        isArray: isArray,
        isArrayLike: isArrayLike,
        isElement: isElement,
        isSVGElement: isSVGElement,
        isHTMLElement: isHTMLElement,
        hasSvgNamespace: hasSvgNamespace,
        hasHtmlNamespace: hasHtmlNamespace,
        isNodeList: isNodeList,
        isDocument: isDocument,
        // isPablo is overwritten in functional.js extension
        isPablo: isPablo,
        isNumeric: isNumeric,
        numericToNumber: numericToNumber,
        extend: extend,
        toArray: toArray,
        getAttributes: getAttributes,
        getAttribute: getAttribute,
        setAttribute: setAttribute,
        removeAttribute: removeAttribute,
        canBeWrapped: canBeWrapped,
        camelCase: camelCase,
        hyphenate: hyphenate,
        findPrefixedProperty: findPrefixedProperty,
        resolveCssProperty: resolveCssProperty,
        svgElementNames: svgElementNames,

        // data
        // TODO: should `Pablo.cache` & `.data()` be removed, to keep cache private?
        cache: cache,

        // TODO: support `collection.append('myTemplate')`
        template: function(name, callback){
            // e.g. Pablo.star()
            Pablo[name] = function(){
                return callback.apply(null, arguments);
            };
            // e.g. collection.star()
            pabloCollectionApi[name] = function(){
                var args = arguments;
                return this.map(function(el){
                    return Pablo[name].apply(el, args).appendTo(el);
                });
            };
            return this;
        },

        get: function(url, callback){
            var xhr;

            if (XMLHttpRequest){
                xhr = new XMLHttpRequest();
                
                xhr.onload = function(){
                    callback(this.responseText, this);
                };
                xhr.open('get', url, true);
                xhr.send();
            }
            return this;
        },

        // TODO: use importNode and IE9 importNode polyfill
        // http://stackoverflow.com/questions/7981100/how-do-i-dynamically-insert-an-svg-image-into-html/7986519#7986519
        // http://stackoverflow.com/questions/8078948/appendchild-with-svg-brings-a-hierarchy-request-err-3-in-ie9-0
        load: function(url, callback){
            // An empty collection to be populated with the loaded content, once loaded, like a promise
            var collection = Pablo();

            this.get(url, function(markup, xhr){
                if (xhr.responseXML){
                    // Create Pablo collection from document
                    //collection.add(document.importNode(xhr.responseXML.childNodes, true));
                    collection.add(xhr.responseXML.childNodes);
                }
                //collection.add(markupToSvgElement(markup));

                callback.call(collection, xhr);
            });

            return collection;
        }
    });


    /////

    
    // SVG ELEMENT METHODS
    svgElementNames.split(' ')
        .forEach(function(nodeName){
            var camelCaseName = camelCase(nodeName),
                createElement = function(attr){
                    return Pablo(make(nodeName), attr);
                };

            // <svg> elements
            if (nodeName === 'svg'){
                createElement = function(attr){
                    // Extend <svg> element with SVG version and xmlns namespace
                    attr = extend(attr, {
                        version: svgVersion,
                        xmlns: svgns
                    });

                    // Extend attribute with each namespace in the `Pablo.ns` map
                    Object.keys(Pablo.ns).forEach(function(ns){
                        // There's no need to add `xmlns:svg`, as this is already
                        // provided by the plain `xmlns` attribute
                        if (ns !== 'xmlns' && ns !== 'svg' && ns !== 'html'){
                            attr['xmlns:' + ns] = Pablo.ns[ns];
                        }
                    });

                    // Create the element
                    return Pablo(make(nodeName), attr);
                };
            }
            
            // Add a new method namespace for each element name
            Pablo.template(nodeName, createElement);

            // Create methods aliases to allow camelCase element name
            Pablo[camelCaseName] = Pablo[nodeName];
            pabloCollectionApi[camelCaseName] = pabloCollectionApi[nodeName];
        });

    
    /////
    
    // Set as a global variable
    window.Pablo = Pablo;

}());

}(
    this,
    this.Object,
    this.Array,
    this.Element,
    this.SVGElement,
    this.HTMLElement,
    this.NodeList,
    this.Document,
    this.HTMLDocument,
    this.document,
    this.navigator,
    this.XMLHttpRequest,
    this.DOMParser,
    this.XMLSerializer,
    this.atob,
    this.btoa,
    this.escape,
    this.unescape,
    this.setTimeout,
    this.clearTimeout
));/*
 * homr-util.js
 * homr version 1.12.0
 * 
 * This is the JS utility package for HOMR
 * 
 */

//This is how we do namespaces in JS
var Homr = Homr || {};

var NOW = NOW
    || new Date(new Date().getFullYear(), new Date().getMonth(), new Date()
        .getDate()); // Global current date and time for this transaction; do
                      // not modify.

Homr.Util = {

  /*
   * Returns the integer number of days between the given Date objects
   */
  daysBetween : function (beginDate, endDate) {
    if (beginDate == null || endDate == null) {
      return null;
    }

    var MILLISPERDAY = 24 * 60 * 60 * 1000;

    var millis = endDate.getTime() - beginDate.getTime();
    return Math.abs(Math.round(millis / MILLISPERDAY));
  },

  /*
   * Returns the string 'str' left padded with the string 'pad'. Example: a pad
   * of '00' and str '1' would result in '01'
   */
  padLeft : function (str, pad) {
    var s = str.toString();
    var p = pad.toString();

    return p.substring(0, p.length - s.length) + s;
  },

  /*
   * Convenience method for formatting Date objects as strings in the form:
   * YYYY-MM-DD When a string (i.e. A SpecialValue) is presented, it is returned
   * instead.
   */
  formatDate : function (date) {
    if (date == null) {
      return '?';
    }
    if (date.getFullYear) {
      return date.getFullYear() + '-'
        + Homr.Util.padLeft(date.getMonth() + 1, '00') + '-'
        + Homr.Util.padLeft(date.getDate(), '00');
    } else {
      return date;
    }
  },

  /*
   * Convenience method for returning two formatted Date objects as strings in
   * the form: YYYY-MM-DD to YYYY-MM-DD When a string (i.e. A SpecialValue) is
   * presented, it is returned instead.
   */
  formattedDateRangeString : function (beginDate, endDate) {
    if (beginDate == null || endDate == null) {
      return "";
    }
    return Homr.Util.formatDate(beginDate) + " to "
      + Homr.Util.formatDate(endDate);
  },

  /*
   * Return Internet Explorer version, or -1
   */
  getIEVersion : function () {
    var rv = -1;
    if (navigator.appName === 'Microsoft Internet Explorer') {
      var ua = navigator.userAgent;
      var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
      if (re.exec(ua) != null){
        rv = parseFloat(RegExp.$1);
      }
    }else if (navigator.appName === 'Netscape'){
      var ua = navigator.userAgent;
      var re = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
      if(re.exec(ua) != null){
        rv = parseFloat(RegExp.$1);
      }
    }
    return rv;
    
  }

};

Homr.Util.SpecialValues = {
  specialValues : [ [ 'Present', function (date, minBeginDate, maxEndDate) {
    return NOW;
  } ], [ 'Unknown', function (date, minBeginDate, maxEndDate) {
    return minBeginDate;
  } ], [ 'ERROR', function (date, minBeginDate, maxEndDate) {
    return minBeginDate;
  } ] ],

  evalSpecialValue : function (value) {
    var b = false;
    var evalFunction = function (dateObj) {
      return dateObj;
    };

    $.each(Homr.Util.SpecialValues.specialValues, function (arrayIndex, sv) {
      if (value === sv[0]) {
        b = true;
        evalFunction = sv[1];
      }
    });
    return [ b, evalFunction ];
  },

  evalDatePair : function (datePair, minBeginDate, maxEndDate) {
    var evalSpecialValue = Homr.Util.SpecialValues.evalSpecialValue;
    return {
      'beginDate' : evalSpecialValue(datePair.beginDate)[1](datePair.beginDate,
          minBeginDate, maxEndDate),
      'endDate' : evalSpecialValue(datePair.endDate)[1](datePair.endDate,
          minBeginDate, maxEndDate)
    };
  }
};
/* 
 * homr-data-load.js
 * homr version 1.12.0
 * 
 * This script takes data from the HOMR web service and organizes 
 * it into a data structure more usable by the front-end portions 
 * of the application. 
 * 
 */

// This is how we do namespaces in JS
var Homr = Homr || {};
// Global current date and time for this transaction; 
// do not modify.
var NOW = NOW
  || new Date(new Date().getFullYear(), new Date().getMonth(), new Date()
    .getDate()); 

Homr.Load = {

  baseUrl : 'services/station/',

  getWsUrlForIdentifier : function (identifier) {
    if (typeof identifier !== 'string') {
      return null;
    }
    return Homr.Load.baseUrl;
  },

  getWsUrlForFields : function () {
    return Homr.Load.baseUrl + 'search';
  },

  /*
   * Translates date strings into Date objects, leaves special values untouched.
   * Also updates min/max dates.
   */
  buildDatePair : function (date, minBeginDate, maxEndDate) {
    var evalSpecialValue = Homr.Util.SpecialValues.evalSpecialValue;

    if (date == undefined || date == null) {
      date = {
        'beginDate' : 'ERROR',
        'endDate' : 'ERROR'
      };
    }
    if (date.beginDate == undefined || date.beginDate == null) {
      date.beginDate = 'ERROR';
    }
    if (date.endDate == undefined || date.endDate == null) {
      date.endDate = 'ERROR';
    }

    var beginDate = null;
    if (evalSpecialValue(date.beginDate)[0]) {
      beginDate = date.beginDate;
    } else {
      if (typeof date.beginDate === 'string') {
        var tBeginDate = date.beginDate.split('T')[0].split('-');
        beginDate = new Date(tBeginDate[0], tBeginDate[1] - 1, tBeginDate[2]);
      } else {
        beginDate = date.beginDate;
      }
    }

    var endDate = null;
    if (evalSpecialValue(date.endDate)[0]) {
      endDate = date.endDate;
    } else {
      if (typeof date.beginDate === 'string') {
        var tEndDate = date.endDate.split('T')[0].split('-');
        endDate = new Date(tEndDate[0], tEndDate[1] - 1, tEndDate[2]);
      } else {
        endDate = date.endDate;
      }
    }

    // As we iterate through the results, determine the min and max dates for
    // the viz
    if (beginDate.getTime && beginDate < minBeginDate) {
      minBeginDate.update(beginDate.getTime());
    }
    if (endDate.getTime) {
      if (endDate < minBeginDate) { // hack to deal with unknown begin dates
        minBeginDate.update(endDate.getTime() - (365 * 24 * 60 * 60 * 1000));
      }
      // The first time through, don't accept the default
      if (!maxEndDate.isModified) {
        maxEndDate.update(endDate.getTime());
      } else if (endDate > maxEndDate) {
        maxEndDate.update(endDate.getTime());
      }
    }
    if (endDate === 'Present') {
      maxEndDate.update(NOW.getTime());
    } else { // hack to prevent current arrow showing on non current data - BM
              // (RGraph.gantt.js line 570)
      if (maxEndDate.getTime() === endDate.getTime()) {
        maxEndDate.setDate(maxEndDate.getDate() + 1);
      }
    }

    return {
      'beginDate' : beginDate,
      'endDate' : endDate
    };
  },

  loadDefinitionsFromWebService : function (json) {
    var definitions = {};
    if (json.stationCollection.definitions) {
      $.each(json.stationCollection.definitions, function (arrayIndex, def) {
        if (definitions[def.defType] == undefined) {
          definitions[def.defType] = {};
        }
        definitions[def.defType][def.abbr] = def;
        if(def.defType === 'time_zones' && def.abbr.substring(0,1) === '+'){
        	definitions[def.defType][def.abbr.substring(1,def.abbr.length)] = def;
        }
      });
    }
    //console.log(definitions);
    return definitions;
  },

  /*
   * This function finds date ranges that overlap, for displaying location
   * descriptions, topography, and obstructions.
   */
  dateOverlaps : function (a, b) {
    if ((b.beginDate >= a.beginDate && b.beginDate < a.endDate)
        || (b.endDate > a.beginDate && b.endDate <= a.endDate)
        || (b.beginDate <= a.beginDate && b.endDate >= a.endDate)) {
      return true;
    } else {
      return false;
    }
  },

  loadDataFromWebService : function (json) {
    var buildDatePair = Homr.Load.buildDatePair;
    var data = {};

    Date.prototype.isModified = false;
    Date.prototype.update = function (millis) {
      this.setTime(millis);
      this.isModified = true;
    };

    var minBeginDate = new Date(NOW.getTime());
    var maxEndDate = new Date(NOW.getTime());

    data.header = {};
    if (json.stationCollection.stations[0].header) {
      data.header.preferredName = json.stationCollection.stations[0].header.preferredName;
      data.header.por = buildDatePair(
        json.stationCollection.stations[0].header.por, 
        minBeginDate, 
        maxEndDate
      );
    }

    data.identifiers = {};
    if (json.stationCollection.stations[0].identifiers) {
      $.each(json.stationCollection.stations[0].identifiers, function (index, identifier) {
        // Unpack the various fields from the AJAX call
        var idType = identifier.idType.toString();

        if (idType === 'TRANS') {
          idType = idType + "_" + index;
        }

        identifier.idType = idType;
        identifier.id = identifier.id.toString();

        // Begin transforming webserivce data into appropriate data structure
        // for RGraph e.g. identifiers.COOP_ID.arrayOfIdentifiers
        if (typeof data.identifiers[idType] === 'undefined') {
          data.identifiers[idType] = [];
        }

        identifier.date = buildDatePair(identifier.date, minBeginDate,
            maxEndDate);
        data.identifiers[idType].push(identifier);
      });
    }

    data.names = {};
    if (json.stationCollection.stations[0].names) {
      $.each(json.stationCollection.stations[0].names, function (index, aName) {
        var nameType;

        if (aName.nameType === 'ALIAS') {
          nameType = aName.nameType + "_" + index;
        } else {
          nameType = aName.nameType;
        }

        if (typeof data.names[nameType] === 'undefined') {
          data.names[nameType] = [];
        }
        aName.date = buildDatePair(aName.date, minBeginDate, maxEndDate);
        data.names[nameType].push(aName);
      });
    }

    data.latlongs = {};
    data.latlongs.latitudes = [];
    if (json.stationCollection.stations[0].location.latitudes) {
      $.each(json.stationCollection.stations[0].location.latitudes, function (index, latitude) {
        latitude.latitude_dec = latitude.latitude_dec.toString();
        latitude.precision = (latitude.precision) ? latitude.precision.toString() : 'Unknown';
        latitude.date = buildDatePair(latitude.date, minBeginDate, maxEndDate);
        data.latlongs.latitudes.push(latitude);
      });
    }

    data.latlongs.longitudes = [];
    if (json.stationCollection.stations[0].location.longitudes) {
      $.each(json.stationCollection.stations[0].location.longitudes, function (index, longitude) {
        longitude.longitude_dec = longitude.longitude_dec.toString();
        longitude.precision = (longitude.precision) ? longitude.precision.toString() : 'Unknown';
        longitude.date = buildDatePair(longitude.date, minBeginDate, maxEndDate);
        data.latlongs.longitudes.push(longitude);
      });
    }

    data.elevations = {};
    if (json.stationCollection.stations[0].location.elevations) {
      $.each(json.stationCollection.stations[0].location.elevations, function (index, elevationObj) {
        elevationObj.elevationFeet = elevationObj.elevationFeet.toString();
        var elevationType = elevationObj.elevationType;

        if (typeof data.elevations[elevationType] === 'undefined') {
          data.elevations[elevationType] = [];
        }
        elevationObj.date = buildDatePair(elevationObj.date, minBeginDate, maxEndDate);
        data.elevations[elevationType].push(elevationObj);
      });
    }

    data.countries = [];
    if (json.stationCollection.stations[0].location.geoInfo.countries) {
      $.each(json.stationCollection.stations[0].location.geoInfo.countries, function (index, countryObj) {
        countryObj.date = buildDatePair(countryObj.date, minBeginDate, maxEndDate);
        data.countries.push(countryObj);
      });
    }

    data.stateProvinces = [];
    if (json.stationCollection.stations[0].location.geoInfo.stateProvinces) {
      $.each(json.stationCollection.stations[0].location.geoInfo.stateProvinces, function (index, stProvObj) {
        stProvObj.date = buildDatePair(stProvObj.date, minBeginDate,
            maxEndDate);
        data.stateProvinces.push(stProvObj);
      });
    }

    data.counties = [];
    if (json.stationCollection.stations[0].location.geoInfo.counties) {
      $.each(json.stationCollection.stations[0].location.geoInfo.counties, function (index, countyObj) {
        countyObj.date = buildDatePair(countyObj.date, minBeginDate,
            maxEndDate);
        data.counties.push(countyObj);
      });
    }

    data.utcOffsets = [];
    if (json.stationCollection.stations[0].location.geoInfo.utcOffsets) {
      $.each(json.stationCollection.stations[0].location.geoInfo.utcOffsets, function (index, utcOffsetObj) {
        utcOffsetObj.utcOffset = utcOffsetObj.utcOffset.toString();
        utcOffsetObj.date = buildDatePair(utcOffsetObj.date, minBeginDate,
            maxEndDate);
        data.utcOffsets.push(utcOffsetObj);
      });
    }

    data.climDivs = [];
    if (json.stationCollection.stations[0].location.nwsInfo.climateDivisions) {
      $.each(json.stationCollection.stations[0].location.nwsInfo.climateDivisions, function (index, climDivObj) {
        climDivObj.climateDivision = climDivObj.climateDivision.toString();
        climDivObj.date = buildDatePair(climDivObj.date, minBeginDate,
            maxEndDate);
        data.climDivs.push(climDivObj);
      });
    }

    data.nwsRegions = [];
    if (json.stationCollection.stations[0].location.nwsInfo.nwsRegions) {
      $.each(json.stationCollection.stations[0].location.nwsInfo.nwsRegions, function (index, nwsRegionObj) {
        nwsRegionObj.date = buildDatePair(nwsRegionObj.date, minBeginDate,
            maxEndDate);
        data.nwsRegions.push(nwsRegionObj);
      });
    }

    data.nwsWfos = [];
    if (json.stationCollection.stations[0].location.nwsInfo.nwsWfos) {
      $.each(json.stationCollection.stations[0].location.nwsInfo.nwsWfos, function (index, wfoObj) {
        wfoObj.date = buildDatePair(wfoObj.date, minBeginDate, maxEndDate);
        data.nwsWfos.push(wfoObj);
      });
    }

    data.statuses = {};
    if (json.stationCollection.stations[0].statuses) {
      $.each(json.stationCollection.stations[0].statuses, function (index, statusObj) {
        if (typeof data.statuses[statusObj.status] === 'undefined') {
          data.statuses[statusObj.status] = [];
        }
        statusObj.date = buildDatePair(statusObj.date, minBeginDate, maxEndDate);
        data.statuses[statusObj.status].push(statusObj);
      });
    }

    data.platforms = {};
    if (json.stationCollection.stations[0].platforms) {
      $.each(json.stationCollection.stations[0].platforms, function (index, platformObj) {
        if (typeof data.platforms[platformObj.platform] === 'undefined') {
          data.platforms[platformObj.platform] = [];
        }
        platformObj.date = buildDatePair(platformObj.date, minBeginDate,
            maxEndDate);
        data.platforms[platformObj.platform].push(platformObj);
      });
    }

    data.relocations = [];
    if (json.stationCollection.stations[0].relocations) {
      $.each(json.stationCollection.stations[0].relocations, function (index, relocationObj) {
        if (relocationObj.date) {
          var tBeginDate = relocationObj.date.split('T')[0].split('-');
          relocationObj.date = new Date(tBeginDate[0], tBeginDate[1] - 1, tBeginDate[2]);
        } else {
          relocationObj.date = NOW;
        }
        data.relocations.push(relocationObj);
      });
    }

    data.elements = {};
    Homr.DUP_STRING = "--**--";
    if (json.stationCollection.stations[0].elements) {
      $.each(json.stationCollection.stations[0].elements, function (index, elementObj) {
        var dateRangeStr = (elementObj.date.beginDate.substring(0, 10) + " to " + elementObj.date.endDate.substring(0, 10));
        var dataProgram = elementObj.dataProgram;
        var dataElement = elementObj.element;
        if (typeof data.elements[dateRangeStr] === 'undefined') {
          data.elements[dateRangeStr] = {
            'programs' : {},
            'soilPlots' : {}
          };
        }
        if (typeof data.elements[dateRangeStr].programs[dataProgram] === 'undefined') {
          data.elements[dateRangeStr].programs[dataProgram] = {};
        }
        if (typeof data.elements[dateRangeStr].programs[dataProgram][dataElement] === 'undefined') {
          data.elements[dateRangeStr].programs[dataProgram][dataElement] = [];
        }
        var obsTimeTwin = findObsTimeTwin(
            data.elements[dateRangeStr].programs[dataProgram][dataElement],
            elementObj
          );
        if (!($.isEmptyObject(obsTimeTwin))) {
          if ($.inArray(elementObj.observationTime, obsTimeTwin.observationTime) < 0) {
            obsTimeTwin.observationTime.push(elementObj.observationTime);
          }
        } else {
          elementObj = findPubInfoTwin(
            data.elements[dateRangeStr].programs[dataProgram][dataElement],
            elementObj
          );
          var obsTime = elementObj.observationTime;
          elementObj.observationTime = [ obsTime ];
          data.elements[dateRangeStr].programs[dataProgram][dataElement]
            .push(elementObj);
        }

        if ((typeof elementObj.soilPlot !== 'undefined')
            && (elementObj.soilPlot !== Homr.DUP_STRING)) {
          var soilPlots = $.extend({}, data.elements[dateRangeStr].soilPlots);
          if (typeof soilPlots[elementObj.soilPlot.soilPlotNumber] === 'undefined') {
            soilPlots[elementObj.soilPlot.soilPlotNumber] = $.extend({}, elementObj.soilPlot);
            soilPlots[elementObj.soilPlot.soilPlotNumber].soilDepth = [ elementObj.soilPlot.soilDepth ];
          } else {
            if ($.inArray(elementObj.soilPlot.soilDepth, soilPlots[elementObj.soilPlot.soilPlotNumber].soilDepth) < 0) {
              soilPlots[elementObj.soilPlot.soilPlotNumber].soilDepth.push(elementObj.soilPlot.soilDepth);
            }
          }
          data.elements[dateRangeStr].soilPlots = soilPlots;
        }
      });
    }

    data.locations = [];
    if (json.stationCollection.stations[0].location.latLonPairs) {
      var location, dateRangeStr;
      $.each(json.stationCollection.stations[0].location.latLonPairs, function (index, latLonPair) {
        
        dateRangeStr = (latLonPair.date.beginDate.substring(0, 10) + " to " + 
            latLonPair.date.endDate.substring(0, 10));
        location = {};
        location.dateRange = dateRangeStr;
        location.beginDate = latLonPair.date.beginDate;
        location.endDate = latLonPair.date.endDate;
        location.lat_rptd = latLonPair.latitude_rptd;
        location.lon_rptd = latLonPair.longitude_rptd;
        location.lat_dec = latLonPair.latitude_dec;
        location.lon_dec = latLonPair.longitude_dec;
        location.lat_dms = latLonPair.latitude_dms;
        location.lon_dms = latLonPair.longitude_dms;
        location.precision = latLonPair.precision;
        location.datum = latLonPair.datum_horiz;
        location.source = latLonPair.source;
        location.descriptions = [];
        location.topography = [];
        location.obstructions = [];
        location.relocations = [];

        if (json.stationCollection.stations[0].location.descriptions) {
          $.each(json.stationCollection.stations[0].location.descriptions, function (index, descr) {
            if (Homr.Load.dateOverlaps(latLonPair.date, descr.date)) {
              location.descriptions.push(descr);
            }
          });
        }
        
        if (json.stationCollection.stations[0].location.topography) {
          $.each(json.stationCollection.stations[0].location.topography, function (index, topo) {
            if (Homr.Load.dateOverlaps(latLonPair.date, topo.date)) {
              location.topography.push(topo);
            }
          });
        }
        
        if (json.stationCollection.stations[0].location.obstructions) {
          $.each(json.stationCollection.stations[0].location.obstructions, function (index, obst) {
            if (Homr.Load.dateOverlaps(latLonPair.date, obst.date)) {
              location.obstructions.push(obst);
            }
          });
        }
        
        var tBeginDate = latLonPair.date.beginDate === 'Unknown' ? 
            [1600, 1, 1 ] : 
            latLonPair.date.beginDate.split('T')[0].split('-');
        var bDate = new Date(tBeginDate[0], tBeginDate[1] - 1, tBeginDate[2]);
        var tEndDate = latLonPair.date.endDate === 'Present' ? 
            [ 9999, 12, 31 ] : 
            latLonPair.date.endDate.split('T')[0].split('-');
        var eDate = new Date(tEndDate[0], tEndDate[1] - 1, tEndDate[2]);
        
        if (json.stationCollection.stations[0].relocations) {
          $.each(json.stationCollection.stations[0].relocations, function (index, relo) {
            if ((relo.date >= bDate) && 
                (relo.date < eDate || relo.date === data.header.por.endDate)) {
              location.relocations.push(relo);
            }
          });
        }

        data.locations.push(location);

        data.locations = data.locations.sort(function (a, b) {
          if (a.endDate < b.endDate) {
            return 1;
          } else if (a.endDate > b.endDate) {
            return -1;
          } else if (a.beginDate < b.beginDate) {
            return 1;
          } else if (a.beginDate > b.beginDate) {
            return -1;
          } else {
            return 0;
          }
        });
      });
    }

    data.remarks = [];
    if (json.stationCollection.stations[0].remarks) {
      var remark;
      $.each(json.stationCollection.stations[0].remarks, function (index, remarkObj) {
        remark = {
          date : buildDatePair(remarkObj.date, minBeginDate, maxEndDate),
          type : remarkObj.type,
          remark : remarkObj.remark
        };
        data.remarks.push(remark);
      });
    }

    data.updates = [];
    if (json.stationCollection.stations[0].updates) {
      var update;
      $.each(json.stationCollection.stations[0].updates, function (index, updateObj) {
        update = $.extend(true, {}, updateObj);
        if (typeof update.effectiveDate === 'undefined') {
          update.effectiveDate = update.enteredDate;
        }
        data.updates.push(update);
      });
    }

    data.backups = [];
    if (json.stationCollection.stations[0].backups) {
      var backup;
      $.each(json.stationCollection.stations[0].backups, function (index, backupObj) {
        backup = $.extend(true, {}, backupObj);
        data.backups.push(backup);
      });
    }
    
    /*
     * This function finds elements that are the same except for their
     * publication details (published flag, receiver, and reporting method), so
     * that we can display them differently We'll make a copy of each element to
     * compare, set their pub flag, receiver, rep method, and soil depths to 0,
     * and then we can compare the element properties one to one
     */
    function findPubInfoTwin(elementList, newElement) {
      var tempNewElement = $.extend(true, {}, newElement);
      tempNewElement.publishedFlag = 0;
      tempNewElement.receiver = 0;
      tempNewElement.reportingMethod = 0;
      tempNewElement.observationTime = [ tempNewElement.observationTime ];
      if (typeof tempNewElement.soilPlot !== 'undefined') {
        tempNewElement.soilPlot.soilDepth = 0;
      }

      var tempTestElement;
      $.each(elementList, function (idx, testElement) {
        tempTestElement = $.extend(true, {}, testElement);
        tempTestElement.publishedFlag = 0;
        tempTestElement.receiver = 0;
        tempTestElement.reportingMethod = 0;
        if (typeof tempTestElement.soilPlot !== 'undefined') {
          tempTestElement.soilPlot.soilDepth = 0;
        }
        if (findEquals(tempTestElement, tempNewElement) === true) {
          newElement.dataProgram = Homr.DUP_STRING;
          newElement.element = Homr.DUP_STRING;
          if (typeof newElement.equipment !== 'undefined') {
            newElement.equipment.equipment = Homr.DUP_STRING;
            newElement.equipment.equipmentMods = Homr.DUP_STRING;
            newElement.equipment.equipmentExposure = Homr.DUP_STRING;
            newElement.equipment.equipmentAzimuth = Homr.DUP_STRING;
            newElement.equipment.equipmentDistance = Homr.DUP_STRING;
            newElement.equipment.equipmentDistanceUnits = Homr.DUP_STRING;
          }
          newElement.frequency = Homr.DUP_STRING;
          newElement.observationTime = Homr.DUP_STRING;
          if (typeof newElement.soilPlot !== 'undefined') {
            newElement.soilPlot.soilPlotNumber = Homr.DUP_STRING;
          } else {
            newElement.soilPlot = Homr.DUP_STRING;
          }
        }
      });
      return newElement;
    }

    /*
     * This function finds elements that are the same except for their
     * observations times, so that we can merge them into one element for
     * display We'll make a copy of each element to compare, set their obs time
     * and soil depths to 0, and then we can compare the element properties one
     * to one
     */
    function findObsTimeTwin(elementList, newElement) {
      var tempNewElement = $.extend(true, {}, newElement);
      tempNewElement.observationTime = 0;
      if (typeof tempNewElement.soilPlot !== 'undefined') {
        tempNewElement.soilPlot.soilDepth = 0;
      }

      var twinElement = {},
        tempTestElement;
      $.each(elementList, function (idx, testElement) {
        tempTestElement = $.extend(true, {}, testElement);
        tempTestElement.observationTime = 0;
        if (typeof tempTestElement.soilPlot !== 'undefined') {
          tempTestElement.soilPlot.soilDepth = 0;
        }
        if (findEquals(tempTestElement, tempNewElement) === true) {
          twinElement = testElement;
        }
      });
      return twinElement;
    }

    // javascript object comparison
    function findEquals(x, y) {
      // if both x and y are null or undefined and exactly the same
      if (x === y) { return true; }

      // if they are not strictly equal, they both need to be Objects
      if (!(x instanceof Object) || !(y instanceof Object)) { return false; }

      // they must have the exact same prototype chain, the closest we can do is
      // test their constructor.
      if (x.constructor !== y.constructor) { return false; }
      
      for (var p in x) {
        // other properties were tested using x.constructor === y.constructor
        if (!x.hasOwnProperty(p)) { continue; }

        // allows to compare x[ p ] and y[ p ] when set to undefined
        if (!y.hasOwnProperty(p)) { return false; }

        // if they have the same strict value or identity then they are equal
        if (x[p] === y[p]) { continue; }

        // Numbers, Strings, Functions, Booleans must be strictly equal
        if (typeof (x[p]) !== "object") { return false; }

        // Objects and Arrays must be tested recursively
        if (!findEquals(x[p], y[p])) { return false; }
      }
      for (p in y) {
        // allows x[ p ] to be set to undefined
        if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) { return false; }
      }
      return true;
    }

    data.fieldDefinitions = Homr.Load.loadDefinitionsFromWebService(json);

    // Handle corner case of stations with only Special Values for beginDates
    if (!minBeginDate.isModified) {
      minBeginDate.setTime(1);
    }
    return {
      'data' : data,
      'minBeginDate' : minBeginDate,
      'maxEndDate' : maxEndDate
    };
  }
};var Homr = Homr || {};

Homr.tasks = [];
Homr.taskNames = [];
Homr.tickFormat = "%-m/%-d/%Y";
Homr.gantt;
Homr.MSHRYAxisTips = {
    'Inactive Period' : 'Periods of station inactivation, typically it is still part of the network but no observations are taken, but observations are expected to resume within 6 months.',
    'Closed Period' : 'Periods of station closure, typical reasons due to unavailability of observers, poor quality of observations, replacement by automated stations, or because the stations no longer served the purpose for which they were intended.',
    'Abandoned Period' : 'Periods of station abandonment, typical reason due to poor siting, no confidence should be placed in the data from these stations.',
    'Non-Operational Period' : 'Period where station failed to meet requirements governing its performance.',
    'Coop Name' : 'Coop station name as maintained by NWS Cooperative network on current WS Form B-44 and other historical Weather Bureau forms. The name is normally in the format of town name + differentiating qualifier.',
    'Principal Name' : 'Primary name of station throughout time.',
    'Pub Name' : 'Populated with station names from legacy station history holdings related to LCD/QCLCD/ISD products.',
    'Alias' : 'Alternate unofficial station name.',
    'State/Province' : 'Two-letter FIPS standard abbreviation for US states and possessions, and similar abbreviation for Canadian provinces',
    'County' : 'The county or county-equivalent name for US stations',
    'Country' : 'Country name',
    'GHCND ID' : 'Populated if station is included in GHCN-Daily product.',
    'GHCNMLT ID' : 'Populated if station is included in GHCN-Monthly Land Temperature product',
    'COOP ID' : 'Assigned by the NCEI, first 2 digits represent state, last 4 digits are assigned numerically by alphabetical ordering of the station name.',
    'NWSLI ID' : 'Alpha-numeric, assigned by the National Weather Service for use in real-time data transmissions and forecasts.',
    'NCDC ID' : 'Unique identifier used by the NCEI.',
    'ICAO ID' : 'Used for geographical locations throughout the world, managed by the International Civil Aviation Organization.',
    'IGRA ID' : 'Integrated Global Radiosonde Archive Identifier',
    'NEXRAD ID' : 'Next-Generation Radar Identifier',
    'WBAN ID' : 'Used at NCEI for digital data storage and general station identification purposes.  WBAN is an acronym, invented in the 1950s, which stands for Weather-Bureau-Army-Navy.',
    'FAA ID' : 'Alpha-numeric up to 4 characters, managed by USDT Federal Aviation Administration used for site identification of sites vital to navigation. Commonly referred to as "Call Sign".',
    'WMO ID' : 'Assigned by World Meteorological Organization, used for international weather data exchange and station documentation.',
    'TRANS ID' : 'Holds miscellaneous IDs that do not fall into an officially sourced ID category that are needed in support of NCEI data products and ingests.',
    'Latitude' : 'Decimal Latitude, with precision noted',
    'Longitude' : 'Decimal Longitude, with precision noted',
    'Relocations' : 'Distance and direction of station relocation expressed as a distance value + distance unit + direction.  Sometimes relocations are small enough not to cause a change in lat/lon, but are still noted',
    'Elevation: Ground' : 'Ground elevation.',
    'Elevation: Barometric' : 'Ivory point of the Barometer or Altimeter setting.',
    'Elevation: Airport' : 'Field, Aerodrome, or Runway elevation.',
    'Elevation: Zerodatum' : 'Zero Datum of a river gage.',
    'Elevation: Unknown' : 'Elevation value, type unknown.',
    'UTC Offset' : 'Time zone, UTC offset',
    'Climate Division' : 'Standardized regions within each state designating areas of similar climate regime, ranges from 01 to 10 for divisions defined since the late 1950s',
    'NWS Region' : 'NWS Region (Alaskan, Central, Eastern, Pacific, Southern, Western)',
    'NWS WFO' : 'NWS Coop Program Area, also called Weather Forecast Office (WFO) by many',
    'Network: COOP' : 'Cooperative Network',
    'Network: USHCN' : 'US Historical Climatology Network',
    'Network: ASOS' : 'Automated Surface Observing System',
    'Network: AWOS' : 'Airway Weather Observation',
    'Network: USRCRN' : 'US Regional Climate Reference Network',
    'Network: NEXRAD' : 'NEXt generation RADar',
    'Network: USCRN' : 'US Climate Reference Network',
    'Network: AL USRCRN' : 'Alabama US Regional Climate Reference Network',
    'Network: COCORAHS' : 'Community Collaborative Rain Hail and Snow Network',
    'Network: PLCD' : 'Primary Local Climatological Data',
    'Network: TDWR' : 'Terminal Doppler Weather Radar'
};

function loadDataIntoMSHRDisplay(station, defs, container_id){
  if(container_id == undefined){
    container_id = "homr_mshr";
  }
  $("#"+ (container_id)).html(""+
    "<div id='homr_mshr_svg_container' style='position:relative;'>"+
    "<div id='homr_mshr_tooltip'></div>"+
    "</div>"+
    "<div style='width:100%; text-align:center;'>"+
    "<input type='text' id='homr_mshr_datepicker' placeholder='MM/DD/YYYY'></input>"+
    "</div>"
    );
  
  d3.select("svg").remove();
  Homr.tasks = [];
  Homr.taskNames = [];
  Homr.todayDate = new Date(); 
  Homr.earliestDate = new Date(Homr.todayDate);
  Homr.latestDate = null;
  Homr.unknownDate = null;
  
  Homr.loadMSHRData(station, defs);
  
  Homr.gantt = d3.gantt("#homr_mshr_svg_container")
    .taskTypes(Homr.taskNames)
    .tickFormat(Homr.tickFormat)
    .width($("#"+container_id).attr("width"))
    .timeDomainMode("fit")
    .tickFormat(Homr.tickFormat)
    .unknownDate(Homr.unknownDate);

  Homr.gantt(Homr.tasks);
  
  $(".pika-single").remove();
  Homr.picker = new Pikaday({ 
      field: document.getElementById("homr_mshr_datepicker"),
      minDate: Homr.earliestDate,
      maxDate: Homr.latestDate,
      defaultDate: Homr.latestDate,
      yearRange: 100,
      onSelect: function(){
        Homr.gantt.resetBrush();
        
        var d = Homr.picker.getDate();
        var bDate = new Date(d);
        bDate.setDate(bDate.getDate() - 7);
        if(bDate.getTime() < Homr.earliestDate.getTime())
            bDate = Homr.earliestDate;
          
        var eDate = new Date(d);
        eDate.setDate(eDate.getDate() + 7);
        if(eDate.getTime() > Homr.latestDate.getTime())
           eDate = Homr.latestDate;
        
        Homr.gantt.timeDomainMode("fixed");
        Homr.gantt.timeDomain([bDate, eDate]);
        Homr.gantt.redraw(Homr.tasks);
        $("#homr_mshr_tooltip").hide();
      }
  });  
}

Homr.getLocalDate = function(d){
  if(d == "Unknown"){
    if(typeof Homr.unknownDate == 'undefined' || Homr.unknownDate == null){
      return "Unknown";
    }else{
      return Homr.unknownDate;
    }
  }else if(d == "Present"){
    return Homr.todayDate;
  }else{
    var date = new Date(d);
    date = new Date(date.getTime() + (date.getTimezoneOffset() * 60000));
    return date;
  }
};

Homr.getTTDateRange = function(d){
  var rDate = "";
  // Special date formatting for Unknown and Present dates
  var ttDateFormat = d3.time.format("%Y-%m-%d");
  var bDate = d.startDate.getTime() == Homr.unknownDate.getTime() ? "Unknown": ttDateFormat(d.startDate);
  var eDate = d.endDate >= Homr.todayDate ? "Present" : ttDateFormat(d.endDate);
  
  // Single dates shouldn't show a range
  if(bDate == eDate){
    rDate += bDate;
  }else{
    rDate += bDate + " to " + eDate;
  }
  return rDate;
};

Homr.buildBarCoords = function(xmax, ymax){
  var x1, x2, x3, x4, y1, y2, y3, y4;
  var x1 = 0;
  if(xmax >= 5){
    x2 = 2;
    x3 = xmax - 2;
    x4 = xmax;
  }else if(xmax >= 3){
    x2 = 1;
    x3 = xmax - 1;
    x4 = xmax;
  }else if(xmax >= 1){
    x2 = 0;
    x3 = xmax;
    x4 = xmax;
  }else{
    x2 = 0;
    x3 = 0;
    x4 = 0;
  }
  y1 = 0;
  y2 = 2;
  y3 = ymax - 2;
  y4 = ymax;
  
  var p1 = x1 +","+ y2 +" ",
      p2 = x2 +","+ y1 +" ",
      p3 = x3 +","+ y1 +" ",
      p4 = x4 +","+ y2 +" ",
      p5 = x4 +","+ y3 +" ",
      p6 = x3 +","+ y4 +" ",
      p7 = x2 +","+ y4 +" ",
      p8 = x1 +","+ y3 +"";
  
  return p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8;
};

Homr.buildRowObj = function(obj, value, name, sLabel1, sValue1){
  var bDate, eDate, tDate = {};
  if(name == "Relocations"){
    tDate.beginDate = Homr.getLocalDate(obj.date);
    tDate.endDate = Homr.getLocalDate(obj.date);
  }else if(name.indexOf(" Period") >= 0 && obj.date.endDate == "Present"){
    tDate.beginDate = Homr.getLocalDate(obj.date.beginDate);
    tDate.endDate = Homr.getLocalDate(obj.date.beginDate);
  }else{
    tDate.beginDate = Homr.getLocalDate(obj.date.beginDate);
    tDate.endDate = Homr.getLocalDate(obj.date.endDate);
  }
  
  if(tDate.beginDate == "Unknown"){
    bDate = "Unknown";
  }else{
    bDate = tDate.beginDate;
    if(bDate < Homr.earliestDate){
      Homr.earliestDate = bDate;
    };
  }
  
  if(tDate.endDate == "Present"){
    eDate = Homr.todayDate;
  }else{
    eDate = tDate.endDate;
  }
  if(Homr.latestDate == null || eDate > Homr.latestDate){
    Homr.latestDate = eDate;
  }

  var newObj = {
      startDate: bDate,
      endDate: eDate,
      taskName: name,
      taskValue: value,
  };
  
  if(sLabel1 != undefined){
    newObj['sLabel1'] = sLabel1;
    newObj['sValue1'] = sValue1 == undefined ? "Unknown" : sValue1;
  }
  Homr.tasks.push(newObj);
  Homr.taskNames.push(name);
};

Homr.loadMSHRData = function(station, defs){
  function firstUp(s){
    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
  }
  
  if(station.statuses){
    $.each(station.statuses, function(idx, status){
      Homr.buildRowObj(status, status.status, firstUp(status.status) + " Period");
    });
  }
  
  if(station.names){
    $.each(station.names, function(idx, name){
      var label;
      if(name.nameType === 'ALIAS'){
        label = "Alias_" + idx;
      }else{
        label = firstUp(name.nameType) + " Name";
      }
      Homr.buildRowObj(name, name.name, label);
    });
  }
  
  if(station.location.geoInfo.stateProvinces){
    $.each(station.location.geoInfo.stateProvinces, function(idx, state){
      Homr.buildRowObj(state, state.stateProvince, "State/Province");
    });
  }
  
  if(station.location.geoInfo.counties){
    $.each(station.location.geoInfo.counties, function(idx, county){
      Homr.buildRowObj(county, county.county, "County");
    });
  }
  
  if(station.location.geoInfo.countries){
    $.each(station.location.geoInfo.countries, function(idx, country){
      Homr.buildRowObj(country, country.country, "Country");
    });
  }
  
  if(station.identifiers){
    $.each(station.identifiers, function(idx, identifier){
      var name;
      if(identifier.idType == "NCDCSTNID"){
        name = "NCDC ID";
      //}else if(identifier.idType.startsWith("TRANS")){ // preferred, but doesn't work in IE
      }else if(identifier.idType.indexOf("TRANS") != -1){
        name = "TRANS ID_" + idx;
      }else{
        name = identifier.idType + " ID";
      }
      Homr.buildRowObj(identifier, identifier.id, name);
    });
  }
  
  if(station.location.latitudes){
    $.each(station.location.latitudes, function(idx, latitude){
      Homr.buildRowObj(latitude, latitude.latitude_dec, "Latitude", "From", latitude["precision"]);
    });
  }
  
  if(station.location.longitudes){
    $.each(station.location.longitudes, function(idx, longitude){
      Homr.buildRowObj(longitude, longitude.longitude_dec, "Longitude", "From", longitude["precision"]);
    });
  }
  
  if(station.relocations){
    $.each(station.relocations, function(idx, relocation){
      Homr.buildRowObj(relocation, relocation.relocation, "Relocations");
    });
  }
  
  if(station.location.elevations){
    $.each(station.location.elevations, function(idx, elevation){
      if((elevation.elevationType).indexOf("GROUND") >= 0){
        Homr.buildRowObj(
            elevation, 
            elevation.elevationFeet, 
            "Elevation: " + firstUp(elevation.elevationType),
            "Datum",
            elevation["groundElevDatum"]);
      }else{
        Homr.buildRowObj(elevation, elevation.elevationFeet, "Elevation: " + firstUp(elevation.elevationType));
      }
    });
  }
  
  if(station.location.geoInfo.utcOffsets){
    $.each(station.location.geoInfo.utcOffsets, function(idx, offset){
      Homr.buildRowObj(offset, offset.utcOffset, "UTC Offset", "", defs.time_zones[offset.utcOffset].displayName);
    });
  }
  
  if(station.location.nwsInfo.climateDivisions){
    $.each(station.location.nwsInfo.climateDivisions, function(idx, division){
      Homr.buildRowObj(
          division, 
          division.stateProvince + "-" + division.climateDivision + ": "+ division.displayName, 
          "Climate Division");
    });
  }
  
  if(station.location.nwsInfo.nwsRegions){
    $.each(station.location.nwsInfo.nwsRegions, function(idx, region){
      Homr.buildRowObj(region, region.nwsRegion, "NWS Region");
    });
  }
  
  if(station.location.nwsInfo.nwsWfos){ 
    $.each(station.location.nwsInfo.nwsWfos, function(idx, wfo){
      Homr.buildRowObj(wfo, wfo.nwsWfo, "NWS WFO", "Name", wfo["displayName"]);
    });
  }
  
  if(station.platforms){
    $.each(station.platforms, function(idx, platform){
      Homr.buildRowObj(platform, platform.platform, "Network: "+ platform.platform);
    });
  }
  
  // Handle the case where no begin dates were found.
  if(Homr.earliestDate.getTime() == Homr.todayDate.getTime()){
    Homr.earliestDate.setFullYear(Homr.todayDate.getFullYear() - 1);
  }
  
  Homr.unknownDate = new Date(Homr.earliestDate);
  Homr.unknownDate.setDate(Homr.unknownDate.getDate() - 1);
  $.each(Homr.tasks, function(i, task){
    if(task.startDate == "Unknown")
      task.startDate = Homr.unknownDate;
  });
};

/*
 * gantt chart based on work by Dimitry Kudrayvtsev
 */

d3.gantt = function(id) {
  Homr.svgId = id;
  
  var FIT_TIME_DOMAIN_MODE = "fit";
  var FIXED_TIME_DOMAIN_MODE = "fixed";
  
  var x2, y, y2;
  var xAxisBottom, xAxisTop, xAxisFocus, yAxis;
  var brush, height, height2;
    
  var margin = { top : 20, right : 40, bottom : 20, left : 150 };
  var margin2 = { top : 10, right : 40, bottom : 10, left : 150 };
  var width = document.body.clientWidth - margin.right - margin.left-5;
  
  var timeDomainStart = d3.time.day.offset(new Date(),-3);
  var timeDomainEnd = d3.time.hour.offset(new Date(),+3);
  var timeDomainMode = FIT_TIME_DOMAIN_MODE;// fixed or fit
  var dFormat = d3.time.format(Homr.tickFormat);
  var taskTypes = [];
  var taskStatus = [];
  
  var x = d3.time.scale().domain([ timeDomainStart, timeDomainEnd ]).range([ 0, width ]).clamp(true);
  var keyFunction = function(d) {
    return d.taskName +" "+ d.startDate +" "+ d.taskValue;
  };

  var rectTransform = function(d) {
    return "translate(" + x(d.startDate) + "," + (y(d.taskName) + 6) + ")";
  };
  var rectTransform2 = function(d) {
    return "translate(" + x2(d.startDate) + "," + y2(d.taskName) + ")";
  };

  function gantt(tasks) {
    height = $.unique(Homr.taskNames).length * 25;
    height2 = $.unique(Homr.taskNames).length * 5 + margin2.top + margin2.bottom;
    
    y = d3.scale.ordinal().domain(taskTypes).rangeRoundBands([ 5, height - margin.top - margin.bottom ], .1);
    y2 = d3.scale.ordinal().domain(taskTypes).rangeRoundBands([ 0, height2 - margin2.top - margin2.bottom ], .1);

    gantt.initTimeDomain();
    gantt.initAxis();
    
    /*
    // Focus chart scale and axis
    */
    x2 = d3.time.scale().domain([ timeDomainStart, timeDomainEnd ]).range([ 0, width ]).clamp(true);
    var preAxis = d3.svg.axis().scale(x2).orient("bottom").ticks(6);
    var lastTick = preAxis.scale().ticks(preAxis.ticks()[0]).length - 1;
    
    xAxisFocus = d3.svg.axis().scale(x2).orient("bottom").ticks(6)
      .tickFormat(function(d, i){
        if(i == 0 && timeDomainStart.getTime() <= Homr.unknownDate.getTime()){
          return "Unknown";
        }else if(i == lastTick && timeDomainEnd.getTime() >= Homr.todayDate.getTime()){
          return "Present";
        }else{
          return dFormat(d);
        }
      })
      .tickSubdivide(true)
      .tickSize(8).tickPadding(8);
     
    /*
    // Main container
    */
    var svg = d3.select(Homr.svgId)
      .append("svg")
      .attr("class", "chart")
      .attr("font-family", "Arial, sans-serif")
      .attr("font-size", "12px")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + height2 + margin.top + margin.bottom);
      
    /*
    // Background
    */
    d3.select(".chart")
      .append("rect")
      //.attr("class", "bg")
      .attr("fill", "#333")
      .attr("opacity", ".1")
      .attr("width", width)
      .attr("height", height - margin.top - margin.bottom)
      .attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
      
    /*
    // Gantt chart area
    */
    var gc = d3.select(".chart")
      .append("g")
      .attr("class", "gantt-chart")
      .attr("aria-label", "station mshr values")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
      
    /*
    // Gantt chart bars
    */
    var containers = gc.selectAll(".gantt-chart")
      .data(tasks, keyFunction)
      .enter().append("g")
      .attr("class", "gantt-container-bar")
      .attr("aria-label", function(d){
        var title = d.taskName + ", " + Homr.getTTDateRange(d) + ", " + d.taskValue;
        return title;
      })
      .attr("y", 0)
      .attr("transform", rectTransform);

    // Sort container elements for screen reader traversal
    containers.sort(function(a, b){
      if(a.taskName != b.taskName){
        return a.taskName < b.taskName ? -1 : 1;
      }else{
        return a.startDate.getTime() < b.startDate.getTime() ? -1 : 1;
      }
    });
    
    var rects = containers.append("polygon")
      .attr("points", function(d){
        if(d.startDate.getTime() == d.endDate.getTime()){
          if((d.taskValue === "CLOSED" || d.taskValue === "INACTIVE") && 
              d.endDate.getTime() == Homr.latestDate.getTime()){
            return "0,0 10,"+ y.rangeBand()/4 +" 0,"+ y.rangeBand()/2;
          }else{
            return Homr.buildBarCoords(5, y.rangeBand()/2);
          }
        }else{
          return Homr.buildBarCoords(x(d.endDate) - x(d.startDate), y.rangeBand()/2);
        }
      })
      .attr("fill", function(d){ // styling
          var c = "";
          if(d.endDate >= Homr.todayDate){
            c += "#5A92C5";
          }else if((d.taskValue === "CLOSED" || d.taskValue === "INACTIVE") && 
              d.endDate.getTime() == Homr.latestDate.getTime() &&
              d.endDate.getTime() == d.startDate.getTime()){
            c += "#5A92C5";
          }else{
            c += "#B3CDE5";
          }
          return c;
      })
      // This value is used for applying labels in updateLabels()
      .attr("width", function(d) { 
        if(d.startDate.getTime() == d.endDate.getTime()){
          return 5;
        }else{
          return (x(d.endDate) - x(d.startDate));
        }
      });
    
    /*
    // Axes
    */
    var xab = gc.append("g")
      .attr("id", "homr_mshr_xbottom_axis")
      .attr("aria-label", "station mshr x-axis bottom")
      .attr("transform", "translate(0, " + (height - margin.top - margin.bottom) + ")")
      .call(xAxisBottom);
    xab.selectAll("path")
      .attr("stroke-width", "0")
      .attr("fill", "none");
    xab.selectAll("line")
      .attr("stroke", "#ddd")
      .attr("fill", "none")
      .attr("opacity", "0.3")
      .attr("shape-rendering", "cripsEdges");
    
    var xat = gc.append("g")
      .attr("id", "homr_mshr_xtop_axis")
      .attr("aria-label", "station mshr x-axis top")
      .attr("transform", "translate(0, " + (0) + ")")
      .call(xAxisTop);
    xat.selectAll("path")
      .attr("stroke-width", "0")
      .attr("fill", "none");
    xat.selectAll("line")
      .attr("stroke", "#ddd")
      .attr("fill", "none")
      .attr("opacity", "0.3")
      .attr("shape-rendering", "cripsEdges");
    
    var ya = gc.append("g")
      .attr("id", "homr_mshr_y_axis")
      .attr("aria-label", "station mshr y-axis")
      .transition().call(yAxis);
    ya.selectAll("path")
      .attr("stroke-width", "0")
      .attr("fill", "none");
    ya.selectAll("line")
      .attr("stroke", "#ddd")
      .attr("fill", "none")
      .attr("opacity", "0.3")
      .attr("shape-rendering", "cripsEdges");
   
    /*
    // Tooltips
    */
    d3.select('.chart').on('mousedown', function(d){
      $("#homr_mshr_tooltip").hide();
    });
    
    // Data bar tooltips
    containers.on('click', function(d){
      var name;

      // Elevations include their equivalent ft->meter values
      if((d.taskName).indexOf("Elevation") >= 0){
        name = d.taskValue + " ft ("+ (d.taskValue * .3048).toFixed(1) +" m)";
      }else{
        name = d.taskValue;
      }
      
      // Any secondary values for the tooltip added here
      var sValue1 = "";
      if(d.sValue1 != undefined){
        if(d.sLabel1 != undefined && d.sLabel1 != ""){
          sValue1 += d.sLabel1 + ": ";
        }
        sValue1 += d.sValue1;
      }
      var tag = "<b>" + name +"</b><br/>";
      tag += sValue1 != "" ? sValue1 +"<br/>" : "";
      
      tag += Homr.getTTDateRange(d);
      
      var output = document.getElementById("homr_mshr_tooltip");
      output.innerHTML = tag;
      
      var xoff = (x(d.startDate) + x(d.endDate))/2 + 50 +"px";
      var yoff = y(d.taskName) - 25 + "px";
      output.style.top = yoff;
      output.style.left = xoff;
      output.style.display = "block";
    });
    
    // Y-axis tooltips
    d3.selectAll("#homr_mshr_y_axis .tick").on('click', function(d){
      var el = d3.select(this);
      var offset = d.search(/_\d/);
      var text = offset === -1 ? Homr.MSHRYAxisTips[d] : Homr.MSHRYAxisTips[d.substring(0, offset)];
      var output = document.getElementById("homr_mshr_tooltip");
      output.innerHTML = text;
      
      var xoff = 150 + "px";
      var yoff = d3.transform(el.attr("transform")).translate[1] + "px";
      
      output.style.top = yoff;
      output.style.left = xoff;
      output.style.display = "block";
    });
    
    /*
    // Legend
    */
    var legend = d3.select("body").select(".chart")
      .append("g")
      .attr("class", "gc-legend")
      .attr("height", 25)
      .attr("width", 100)
      .attr("transform", "translate(" + margin2.left +","+ (height +10) +")");
      
    legend.append("rect")
      //.attr("class", "bar-ended")
      .attr("fill", "#B3CDE5")
      .attr("x", 0)
      .attr("y", 0)
      .attr("width", 10)
      .attr("height", 10);
      
    legend.append("text")
      .attr("x", 15)
      .attr("y", 9)
      .text("Historical");
       
    legend.append("rect")
      //.attr("class", "bar-present")
      .attr("fill", "#5A92C5")
      .attr("x", 75)
      .attr("y", 0)
      .attr("width", 10)
      .attr("height", 10);
      
    legend.append("text")
      .attr("x", 90)
      .attr("y", 9)
      .text("Current");
    
    /*
    // Focus chart
    */
    var context = d3.select("body").select(".chart")
      .append("g")
      .attr("class", "context")
      .attr("aria-label", "station mshr zoom interface")
      .attr("height", height2 + margin2.top + margin2.bottom) // added
      .attr("transform", "translate(" + margin2.left + "," + (height + margin2.top + margin.bottom) + ")");
    
    context.on('mousedown', function(){
        $("#homr_mshr_tooltip").hide();
        $("#homr_mshr_datepicker").val("");
    });
    
    var context_containers = context.selectAll(".context")
      .data(tasks, keyFunction)
      .enter().append("g")
      .attr("class", "context-container-bar")
      .attr("y", 0)
      .attr("transform", rectTransform2);
      
    context_containers.append("rect")
      .attr("rx", 2) // corner rounding
      .attr("ry", 2)
      .attr("fill", function(d){ // styling 
          if((d.taskValue === "CLOSED" || d.taskValue === "INACTIVE") && 
              d.endDate.getTime() == Homr.latestDate.getTime() &&
              d.endDate.getTime() == d.startDate.getTime()){
            return "#5A92C5";
          }else{
            return d.endDate >= Homr.todayDate ? "#5A92C5" : "#B3CDE5";  
          }
      })
      .attr("height", function(d) { return y2.rangeBand()/2; })
      .attr("width", function(d) { 
        if(d.startDate.getTime() == d.endDate.getTime()){
          return 5;
        }else{
          return (x(d.endDate) - x(d.startDate));
        }
      });

    /*
    // Focus chart axis
    */
    var fab = context.append("g")
      .attr("id", "homr_mshr_focusx_axis")
      .attr("transform", "translate(0, " + (height2 - margin2.top - margin2.bottom) + ")")
      .transition()
      .call(xAxisFocus);
    fab.selectAll("path")
      .attr("stroke-width", "0")
      .attr("fill", "none");
    fab.selectAll("line")
      .attr("stroke", "#ddd")
      .attr("fill", "none")
      .attr("opacity", "0.3")
      .attr("shape-rendering", "cripsEdges");
    
    /*
    // Focus chart brush
    */
    brush = d3.svg.brush()
      .x(x2)
      .on("brush", function(){
          gantt.timeDomainMode("fixed");
          gantt.timeDomain(brush.empty() ? x2.domain() : brush.extent());
          gantt.redraw(Homr.tasks);
          Homr.picker.hide();
      });
    
    context.append("g")
      .attr("class", "x brush")
      .attr("id", "mshr_brush")
      .attr("fill-opacity", ".125")
      .call(brush)
      .selectAll("rect")
      .attr("y", -6)
      .attr("height", height2);

    return gantt;
  };
  
  gantt.initTimeDomain = function() {
    if (timeDomainMode === FIT_TIME_DOMAIN_MODE) {
      if (Homr.tasks === undefined || Homr.tasks.length < 1) {
        timeDomainStart = d3.time.day.offset(new Date(), -3);
        timeDomainEnd = d3.time.hour.offset(new Date(), +3);
        return;
      }
      Homr.tasks.sort(function(a, b) {
          return a.endDate - b.endDate;
      });
      timeDomainEnd = Homr.tasks[Homr.tasks.length - 1].endDate;
      Homr.tasks.sort(function(a, b) {
          return a.startDate - b.startDate;
      });
      timeDomainStart = Homr.tasks[0].startDate;
    };
  };

  gantt.initAxis = function(){
    x.domain([ timeDomainStart, timeDomainEnd ]).range([0, width]);
    
    var preAxis = d3.svg.axis().scale(x).orient("bottom").ticks(6);
    var lastTick = preAxis.scale().ticks(preAxis.ticks()[0]).length - 1;
    
    xAxisBottom = d3.svg.axis().scale(x).orient("bottom").ticks(6)
      .tickFormat(function(d, i){
        if(i == 0 && timeDomainStart.getTime() <= Homr.unknownDate.getTime()){
          return "Unknown";
        }else if(i == lastTick && timeDomainEnd.getTime() >= Homr.todayDate.getTime()){
          return "Present";
        }else{
          return dFormat(d);
        }
      })
      .tickSubdivide(true)
      .tickSize(-height + margin.top + margin.bottom).tickPadding(8);

    xAxisTop = d3.svg.axis().scale(x).orient("top").ticks(6)
      .tickFormat(function(d, i){
        if(i == 0 && timeDomainStart.getTime() <= Homr.unknownDate.getTime()){
          return "Unknown";
        }else if(i == lastTick && timeDomainEnd.getTime() >= Homr.todayDate.getTime()){
          return "Present";
        }else{
          return dFormat(d);
        }
      })
      .tickSubdivide(true)
      .tickSize(0).tickPadding(8);
    
    yAxis = d3.svg.axis().scale(y).orient("left")
      .tickFormat(function(d){
        var offset = d.search(/_\d/);
        return offset === -1 ? d : d.substring(0, offset);
      })
      .tickSize(0);
  };

  gantt.redraw = function(tasks) {
    gantt.initTimeDomain();
    gantt.initAxis();
    
    var svg = d3.select("svg");
    var chart = d3.select("body").select(".chart");
    var ganttChartGroup = svg.select(".gantt-chart");
    var gbar = ganttChartGroup.selectAll(".gantt-container-bar").data(tasks, keyFunction);
    var rect = ganttChartGroup.selectAll("polygon").data(tasks, keyFunction);
        
    gbar.transition()
      .attr("transform", rectTransform)
      .attr("height", function(d) { return y.rangeBand(); })
      .attr("width", function(d) { 
          return (x(d.endDate) - x(d.startDate)); 
      })
      .attr("overflow", "none");
             
    gbar.exit().remove();

    var w = 0;    
    rect.transition()
      .attr("points", function(d){
        if((d.taskValue === "CLOSED" || d.taskValue === "INACTIVE") && 
            (d.endDate.getTime() === Homr.latestDate.getTime()) &&
            (timeDomainEnd.getTime() === Homr.latestDate.getTime()) &&
            (d.startDate.getTime() === d.endDate.getTime())){
          return "0,0 10,"+ y.rangeBand()/4 +" 0,"+ y.rangeBand()/2;
        // This handles the special case of single point in time events, e.g. relocations
        }else if(d.startDate.getTime() == d.endDate.getTime()){
          if(d.endDate.getTime() <= timeDomainEnd.getTime() && d.startDate.getTime() >= timeDomainStart.getTime()){
            var xcoor = Math.min(5, (x(timeDomainEnd) - x(d.endDate)));
            return Homr.buildBarCoords(xcoor, y.rangeBand()/2);
          }else{
            return Homr.buildBarCoords(0, y.rangeBand()/2);
          }
        }else{
          var xcoor = x(d.endDate) - x(d.startDate);
          return Homr.buildBarCoords(xcoor, y.rangeBand()/2);
        }
      })
      .attr("width", function(d) {
          w++;
          if((d.taskValue === "CLOSED" || d.taskValue === "INACTIVE") && 
              (d.endDate.getTime() === Homr.latestDate.getTime()) &&
              (timeDomainEnd.getTime() === Homr.latestDate.getTime()) &&
              (d.startDate.getTime() === d.endDate.getTime())){
            return 5;
          // This handles the special case of single point in time events, e.g. relocations
          }else if(d.startDate.getTime() == d.endDate.getTime()){
            if(d.endDate.getTime() <= timeDomainEnd.getTime() && d.startDate.getTime() >= timeDomainStart.getTime()){
              return Math.min(5, x(timeDomainEnd) - x(d.endDate));
            }else{
              return 0;
            }
          }else{
            return (x(d.endDate) - x(d.startDate));
          }
      })
      .each("end", function(){
        if(--w == 0){
          Homr.gantt.updateLabels();
        }
      });
      
    svg.select("#homr_mshr_xtop_axis").transition().call(xAxisTop);
    svg.select("#homr_mshr_xbottom_axis").transition().call(xAxisBottom);
    svg.select("#homr_mshr_y_axis").transition().call(yAxis);
  
    return gantt;
  };

  // For every entry bar on the chart, there is a .gantt-container-bar 
  // element which contains a text element and a rect element.
  // When the text is too long to fit over the bar, the size of the container
  // will expand to fit, but that causes text overlap with the next label so 
  // we don't want that.
  // We need all possible labels to be on the chart so we can test their 
  // sizes, which we handle by removing all labels and re-adding them.
  gantt.updateLabels = function(){
    var text_containers = d3.selectAll(".gantt-container-bar");
    
    text_containers.selectAll("text").remove();
    text_containers.append("text")
      .attr("x", 0)
      .attr("y", 0)
      .text(function(task){
          return task.taskValue;
      });

    text_containers.each(function(container, i){
      //var rect = d3.select(this).selectAll("rect");
      var rect = d3.select(this).selectAll("polygon");
      var text = d3.select(this).selectAll("text");
      var c_width = Math.round(Number(this.getBBox().width)) - 5;
      var r_width = Math.round(Number(rect.attr("width")));
      if(c_width > r_width){
        text.remove();
        d3.select(this).append("text")
          .attr("x", 0)
          .attr("y", 0)
          .text(function(task){
              var s = Math.floor((r_width/c_width)*task.taskValue.length) - 2;
              if(s<=0){
                return "";
              }else{
                return task.taskValue.substring(0, s) + "...";
              };
          });
      };
    });
  };

  gantt.resetBrush = function(){
    d3.select("#mshr_brush").call(brush.clear());
  };
  
  gantt.margin = function(value) {
    if (!arguments.length)
      return margin;
    margin = value;
    return gantt;
  };

  gantt.timeDomain = function(value) {
    if (!arguments.length)
      return [ timeDomainStart, timeDomainEnd ];
    timeDomainStart = new Date(+value[0]);
    timeDomainEnd = new Date(+value[1]);
    return gantt;
  };

  /**
   * @param {string}
   *                vale The value can be "fit" - the domain fits the data or
   *                "fixed" - fixed domain.
   */
  gantt.timeDomainMode = function(value) {
    if (!arguments.length)
      return timeDomainMode;
    timeDomainMode = value;
    return gantt;
  };

  gantt.taskTypes = function(value) {
    if (!arguments.length)
      return taskTypes;
    taskTypes = value;
    return gantt;
  };
    
  gantt.taskStatus = function(value) {
    if (!arguments.length)
      return taskStatus;
    taskStatus = value;
    return gantt;
  };

  gantt.width = function(value) {
    if (!arguments.length)
      return width;
    width = +value;
    return gantt;
  };

  gantt.height = function(value) {
    if (!arguments.length)
      return height;
    height = +value;
    return gantt;
  };

  gantt.tickFormat = function(value) {
    if (!arguments.length)
      return tickFormat;
    tickFormat = value;
    return gantt;
  };
    
  gantt.unknownDate = function(value) {
    if(!arguments.length)
      return Homr.unknownDate;
    Homr.unknownDate = value;
    return gantt;
  };
  
  return gantt;
};
/*
 * homr-phr-viz.js
 * homr version 1.12.0
 * 
 * This script creates the content of the 'phr' tab, including the data tables,
 * toggles, mouseovers, and reference table
 * 
 */

/*
 * Takes the HOMR web service json data for a station, 
 * and displays the PHR portion in a set of nested tables
 */
function loadDataIntoPHRDisplay(data) {
  var elementDateRangeObj = data.elements,
    elementTableHtml = "",
    soilTableHtml = "",
    equipTableHtml = "",
    hasSoilPlots = false,
    phrProgramElements = {},
    elementSoilPlots = {},
    soilPlotVis = {};
  
	// HTML for the static reference table
	function buildRefTableHtml() {
		var refTableHtml = "<div><table class='phr_ref_table'>" +
			"<tr><th colspan=2>Time of Observation Codes</th></tr>" +
			"<tr><td>9999</td><td>Not Reported</td></tr>" +
			"<tr><td>8888</td><td>Variable (VAR)</td></tr>" +
			"<tr><td>7777</td><td>Weekly-Irregular (WI)</td></tr>" +
			"<tr><td>7070</td><td>Weekly (WK)</td></tr>" +
			"<tr><td>6666</td><td>Occasionally (OC)</td></tr>" +
			"<tr><td>5555</td><td>Weekly/Monthly (WM)</td></tr>" +
			"<tr><td>4444</td><td>After Rain (AR)</td></tr>" +
			"<tr><td>3030</td><td>Monthly (MO)</td></tr>" +
			"<tr><td>1830</td><td>Sunset (SS)</td></tr>" +
			"<tr><td>0630</td><td>Sunrise (SR)</td></tr>" +
			"</table></div>";
		refTableHtml += "<div>&nbsp;</div>";
		refTableHtml += "<div><table class='phr_ref_table'>" +
			"<tr><th colspan=4>Element Definitions</th></tr>" +
			"<tr><th>HOMR Element</th><th>Description</th><th>GHCN-Daily Element</th><th>COOP Element</th></tr>" +
			"<tr><td>DEWPNTTEMP</td><td>Dew Point Temperature</td><td>----</td><td>DPT</td></tr>" +
			"<tr><td>EVAP</td><td>Evaporation</td><td>EVAP</td><td>EVP</td></tr>" +
			"<tr><td>MAX/MINTEM</td><td>Max/Min Temperature for SOILs</td><td>SN**, SX**</td><td>SOT</td></tr>" +
			"<tr><td>PRECIP</td><td>Precipitation</td><td>PRCP</td><td>PCN (SOD), HPR (HPD)</td></tr>" +
			"<tr><td>RSVLKLVL</td><td>Reservoir or Lake Level</td><td>----</td><td>RES</td></tr>" +
			"<tr><td>RIVSTAGE</td><td>River Stage</td><td>----</td><td>RIV</td></tr>" +
			"<tr><td>SNOWDPTH</td><td>Snow Depth</td><td>SNWD</td><td>SNO</td></tr>" +
			"<tr><td>SNOWWTREQ</td><td>Snow Water Equivalency</td><td>WESD</td><td>SND</td></tr>" +
			"<tr><td>TEMP</td><td>Temperature</td><td>TMAX, TMIN, TOBS</td><td>TMP</td></tr>" +
			"<tr><td>TEMPATOBS</td><td>Temperature at Observation for SOILs</td><td>----</td><td>SOT</td></tr>" +
			"<tr><td>WIND</td><td>Wind Velocity and/or Direction</td><td>WDMV</td><td>WND</td></tr>" +
			"</table></div>";
		refTableHtml += "<div>&nbsp;</div>";
		refTableHtml += "<div><table class='phr_ref_table'>" +
			"<tr><th colspan=4>COOP Equipment Modifications</th></tr>" +
			"<tr><th>Type</th><th>Description</th><th>Applicable Elements</th><th>Qualifying Equipment</th></tr>" +
			"<tr><td>SHLD</td><td>Shielded</td><td>TEMP, PRECIP</td><td>Any</td></tr>" +
			"<tr><td>RCRD</td><td>Recording gage</td><td>PRECIP</td><td>UNIV, F&P, TB, PCPN1, PCPNX,<br />AHTB, FPR-D, FPU, AWPAG, FPR-E</td></tr>" +
			"<tr><td>HTD</td><td>Heated</td><td>PRECIP</td><td>AHTB, AWPAG</td></tr>" +
			"</table></div>";
		return refTableHtml;
	}
	
	// Assemble the HTML for the element display toggles
	function buildFilterBoxHtml(hasSoilPlots, phrProgramElements) {
		var filterBoxHtml = "";
		var soilVars;
		filterBoxHtml += "<div style='text-align:center;'>" + 
			"<div class='homr_switch' id='phr_equip_checkbox'>Equipment Data</div>";
		if (hasSoilPlots) {
			filterBoxHtml += "<div class='homr_switch homr_switch_selected' id='phr_soil_checkbox'>Soil Plot Data</div>";
		}
		filterBoxHtml += "<div class='homr_switch homr_switch_info'>Reference Tables" +
			"<div class='phr_details' id='phr_ref_table_container'></div>" +
			"</div></div>";
		
		$.each(phrProgramElements, function (program, program_elements) {
			soilVars = [];
			filterBoxHtml += "<div class='phr_fieldset'>";
			filterBoxHtml += "<h4 class='phr_checkboxes_title'><span>" + program + " Elements</span></h4>";
			
			$.each(program_elements.sort(), function (idx, element) {
				if ((element !== 'MAX/MINTEM') && (element !== 'TEMPATOBS')) {
					filterBoxHtml += "<div class='homr_switch homr_switch_selected phr_table_row_toggle' id='phr_" + 
					  program.replace(" ", "_") + "_" + 
					  element.replace("/", "_") + "_switch'>" + element + "</div>";
				} else {
					soilVars.push(element);
				}
			});
			if (soilVars.length > 0) {
				filterBoxHtml += "<div class='phr_soilset'>" +
				  "<h4 class='phr_checkboxes_title'><span>Soil</span></h4>";
				for (var i = 0; i < soilVars.length; i++) {
					filterBoxHtml += "<div class='homr_switch homr_switch_selected phr_table_row_toggle phr_soil_switch' id='phr_" + 
					  program.replace(" ", "_") + "_" + 
					  soilVars[i].replace("/", "_") + "_switch'>" + 
					  soilVars[i] + "</div>"; 
					if (elementSoilPlots.hasOwnProperty(soilVars[i])) {
					  $.each(elementSoilPlots[soilVars[i]], function (idx, soilPlotNum) {
					    if (!soilPlotVis.hasOwnProperty(soilPlotNum)) {
					      soilPlotVis[soilPlotNum] = 0;
					    }
					    soilPlotVis[soilPlotNum] += 1;
					  });
					}
				}
			}
			
			filterBoxHtml += "</div>";
		});
		
		filterBoxHtml += "<div>&nbsp;</div>";
		filterBoxHtml += "<div class='phr_fieldset'>" +
			"<h4 class='phr_checkboxes_title' style='margin-bottom:-1em;'>" +
			"<span>Date Ranges</span><span>(</span><span id='phr_show_all_dates' aria-label='show all dates'>" +
			"Show All</span><span> / </span><span id='phr_hide_all_dates' aria-label='hide all dates'>" +
			"Hide All</span><span>)&nbsp;&nbsp;</span></h4>" +
			"</div>";
		
		return filterBoxHtml;
	}
	
	function buildEquipTableRow(data, elementDetails, elementProgram, elementType) {
		var equipTableRow = "";
		if (typeof elementDetails.equipment !== 'undefined') {
			if (elementDetails.dataProgram !== Homr.DUP_STRING) {
				equipTableRow += "<tr class='phr_" + elementProgram.replace(" ", "_") +
				  "_" + elementType.replace("/", "_") + "_row'>" + 
				  "<td class='phr_has_mouseover'><span class='phr_underline'>" + 
				  checkUndefined(elementDetails.dataProgram) + "</span>";
				
				if ((elementDetails.dataProgram !== Homr.DUP_STRING) && (typeof elementDetails.dataProgram !== 'undefined')) {
					equipTableRow += "<div class='phr_details'>" +
					  "<div class='phr_details_title'>" + 
					  data.fieldDefinitions.programs[elementDetails.dataProgram].displayName + 
					  "</div></div>";
				}
				
				equipTableRow += "<td class='phr_has_mouseover'><span class='phr_underline'>" +
					checkUndefined(elementDetails.element) + "</span>";
				
				if ((elementDetails.element !== Homr.DUP_STRING) && (typeof elementDetails.element !== 'undefined')) {
					equipTableRow += "<div class='phr_details'>" +
					  "<div class='phr_details_title'>" + 
					  data.fieldDefinitions.elements[elementDetails.element].displayName + 
					  "</div>";
					
					if (typeof data.fieldDefinitions.elements[elementDetails.element].cssaName !== 'undefined') {
						equipTableRow += "<div>NWS Name: " +
						  data.fieldDefinitions.elements[elementDetails.element].cssaName +
						  "</div>";
					}
					
					if (typeof data.fieldDefinitions.elements[elementDetails.element].ghcndName !== 'undefined') {
						equipTableRow += "<div>GHCND Name: " +
						  data.fieldDefinitions.elements[elementDetails.element].ghcndName +
						  "</div>";
					}
					
					equipTableRow += "</div>";
				}
				
				equipTableRow += "</td>" +
					"<td class='phr_has_mouseover'><span class='phr_underline'>" + 
					checkUndefined(elementDetails.equipment.equipment) +
					"</span><div class='phr_details'><div class='phr_details_title'>" + 
					data.fieldDefinitions.equipment[elementDetails.equipment.equipment].displayName + 
					"</div></div></td>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentMods) + "</td>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentExposure) + "</td>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentAzimuth) + "</td>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentDistance) + "</td>" +
					"<td colspan=2>" + checkUndefined(elementDetails.equipment.equipmentDistanceUnits) + "</td>" +
					"</tr>";
			} else {
				// don't add a row
			}
		} else {
			equipTableRow += "<tr class='phr_" + elementProgram.replace(" ", "_") +
			  "_" + elementType.replace("/", "_") + "_row'>" + 
			  "<td>" + checkUndefined(elementDetails.dataProgram).replace(" ", "<br />") + "</td>" +
			  "<td>" + checkUndefined(elementDetails.element) + "</td>" +
			  "<td>" + checkUndefined(elementDetails.equipment) + "</td>" +
			  "<td colspan=6>&nbsp;</td>" +
			  "</tr>";
		}
	
		return equipTableRow;
	}
	
	function buildEquipCell(elementDetails, equipment) {
		var equipCellHtml = "";
		if (typeof elementDetails.equipment !== 'undefined') {
			// Equipment cell
			equipCellHtml += "<td class='phr_has_mouseover'><span class='phr_underline'>" + 
			  checkUndefined(elementDetails.equipment.equipment) +
			  "</span>";
			// Equipment mouseover, including sub-table for equipment elements
			if (elementDetails.equipment.equipment !== Homr.DUP_STRING) {
				equipCellHtml += "<div class='phr_details'>" +
					"<div class='phr_details_title'>" + equipment[elementDetails.equipment.equipment].displayName + "</div>" + 
					"<table class='phr_equipment_details_table'><tr><th>Mods</th><th>Exposure</th><th>Azimuth</th><th>Distance</th><th>Distance Unit</th></tr>" +
					"<tr>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentMods) + "</td>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentExposure) + "</td>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentAzimuth) + "</td>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentDistance) + "</td>" +
					"<td>" + checkUndefined(elementDetails.equipment.equipmentDistanceUnits) + "</td>" +
					"<tr>" +
					"</table></div>";
			}
			equipCellHtml += "</td>";
		} else {
			equipCellHtml += "<td>" + checkUndefined(elementDetails.equipment) + "</td>";
		}
		
		return equipCellHtml;
	}
	
	function buildSoilPlotTable(soilPlots) {
		var soilTableHtml = "";
		$.each(soilPlots, function (soilPlotNum, soilPlotInfo) {
			if (soilTableHtml === "") {
				soilTableHtml = "<table class='phr_soil_table phr_plot_table'>";
				soilTableHtml += "<tr><th>Plot Number</th><th>Soil Type</th><th>Soil Cover</th><th>Depths</th><th>Depth Units</th><th>Slope</th><th>Measurement Units</th></tr>";
			}
			soilTableHtml += "<tr class='phr_soil_plot_row_" + soilPlotNum + "'>" +
				"<td>" + checkUndefined(soilPlotInfo.soilPlotNumber) + "</td>" +
				"<td>" + checkUndefined(soilPlotInfo.soilType) + "</td>" +
				"<td>" + checkUndefined(soilPlotInfo.soilCover) + "</td>" +
				"<td>" + checkUndefined(soilPlotInfo.soilDepth) + "</td>" +
				"<td>" + checkUndefined(soilPlotInfo.soilDepthUnits) + "</td>" +
				"<td>" + checkUndefined(soilPlotInfo.soilSlope) + "</td>" +
				"<td>" + checkUndefined(soilPlotInfo.soilMeasurementUnits) + "</td>" +
				"</tr>";
		});
		if (soilTableHtml !== "") {
			soilTableHtml += "</table>";
		}
		return soilTableHtml;
	}
	
	function buildSoilPlotCell(elementDetails, soilPlots) {
    var soilCellHtml = "";
		if (typeof elementDetails.soilPlot !== 'undefined') {
		  if (typeof elementDetails.soilPlot.soilPlotNumber !== 'undefined') {
				if ((elementDetails.element !== Homr.DUP_STRING) && (elementDetails.soilPlot.soilPlotNumber !== Homr.DUP_STRING)) {
					if (!elementSoilPlots.hasOwnProperty(elementDetails.element)) {
						elementSoilPlots[elementDetails.element] = [];
					}
					if ($.inArray(elementDetails.soilPlot.soilPlotNumber, elementSoilPlots[elementDetails.element]) < 0) {
						elementSoilPlots[elementDetails.element].push(elementDetails.soilPlot.soilPlotNumber);
					}
				}
				soilCellHtml += "<td class='phr_has_mouseover'><span class='phr_underline'>" + 
					checkUndefined(elementDetails.soilPlot.soilPlotNumber) + "</span>";
				// Soil plot mouseover, including sub-table for plot details
				if (elementDetails.soilPlot.soilPlotNumber !== Homr.DUP_STRING) {
					var soilPlotInfo = soilPlots[elementDetails.soilPlot.soilPlotNumber];
					soilCellHtml += "<div class='phr_details'>" +
						"<table class='phr_soil_table'>" + 
						"<tr><th>Soil Type</th><th>Soil Cover</th><th>Depths</th><th>Depth Units</th><th>Slope</th><th>Measurement Units</th></tr>" +
						"<tr>" +
						"<td>" + checkUndefined(soilPlotInfo.soilType) + "</td>" +
						"<td>" + checkUndefined(soilPlotInfo.soilCover) + "</td>" +
						"<td>" + checkUndefined(soilPlotInfo.soilDepth) + "</td>" +
						"<td>" + checkUndefined(soilPlotInfo.soilDepthUnits) + "</td>" +
						"<td>" + checkUndefined(soilPlotInfo.soilSlope) + "</td>" +
						"<td>" + checkUndefined(soilPlotInfo.soilMeasurementUnits) + "</td>" +
						"<tr>" +
						"</table></div>";
				}
				soilCellHtml += "</td>";
			} else {
				soilCellHtml += "<td>" + checkUndefined(elementDetails.soilPlot) + "</td>";
			}
		} else {
			soilCellHtml += "<td>" + checkUndefined(elementDetails.soilPlot) + "</td>";
		}
		
		return soilCellHtml;
	}
	
	var phrHtml = "<div id='phr_filter_box'></div>";
	
	// Elements are grouped, and should be displayed, by date range
	// We'll iterate through each date range > program > element type > element details
	// and build up the display tables.
	$.each(elementDateRangeObj, function (elementDate, elementObj) {
		phrHtml += "<div class='phr_date_head' aria-label='show/hide data for "+ elementDate +"'>" + elementDate + "</div>";
		phrHtml += "<div class='phr_element_content' >";
		
		elementTableHtml = "<table class='phr_element_table'>";
		elementTableHtml += "<tr><th>Program</th><th>Element</th><th>Equipment</th><th>Frequency</th><th>Obs. Times</th><th>Published Flag</th><th>Receiver</th><th>Reporting Method</th><th>Plot Number</th></tr>";
		
		equipTableHtml = "<table class='phr_equip_table'>";
		equipTableHtml += "<tr><th>Program</th><th>Element</th><th>Equipment</th><th>Mods</th><th>Exposure</th><th>Azimuth</th><th>Distance</th><th colspan=2>Distance Unit</th></tr>";
		
		// Data program (COOP HPD, COOP SOD, etc.)
		$.each(elementObj.programs, function (elementProgram, elementTypeObj) {
			if (typeof phrProgramElements[elementProgram] === 'undefined') {
				phrProgramElements[elementProgram] = [];
			}
			
			// Element type (Precip, Temp, Snowdepth, etc.)  
			$.each(elementTypeObj, function (elementType, elementDetailsArray) {
				if ($.inArray(elementType, phrProgramElements[elementProgram]) < 0) {
					phrProgramElements[elementProgram].push(elementType);
				}
				
				// Element details
				$.each(elementDetailsArray, function (idx, elementDetails) {
					elementTableHtml += "<tr class='phr_" + elementProgram.replace(" ", "_") + 
					  "_" + elementType.replace("/", "_") + "_row'>" +
			
					  // Data Program cell
					  "<td class='phr_has_mouseover'><span class='phr_underline'>" + 
					  checkUndefined(elementDetails.dataProgram) + "</span>";
					
					//Data Program mouseover
					if ((elementDetails.dataProgram !== Homr.DUP_STRING) && (typeof elementDetails.dataProgram !== 'undefined')) {
						elementTableHtml += "<div class='phr_details'>" +
							"<div class='phr_details_title'>" + 
							data.fieldDefinitions.programs[elementDetails.dataProgram].displayName + 
							"</div></div>";
					}
					elementTableHtml += "</td>";
					
					// Data Element cell
					elementTableHtml += "<td class='phr_has_mouseover'><span class='phr_underline'>" +
						checkUndefined(elementDetails.element) + "</span>";

					// Data Element mouseover
					if ((elementDetails.element !== Homr.DUP_STRING) && (typeof elementDetails.element !== 'undefined')) {
						elementTableHtml += "<div class='phr_details'>" +
							"<div class='phr_details_title'>" + 
							data.fieldDefinitions.elements[elementDetails.element].displayName + 
							"</div>";
						
						if (typeof data.fieldDefinitions.elements[elementDetails.element].cssaName !== 'undefined') {
							elementTableHtml += "<div>NWS Name: " +
							  data.fieldDefinitions.elements[elementDetails.element].cssaName +
							  "</div>";
						}
						
						if (typeof data.fieldDefinitions.elements[elementDetails.element].ghcndName !== 'undefined') {
							elementTableHtml += "<div>GHCND Name: " +
							  data.fieldDefinitions.elements[elementDetails.element].ghcndName +
							  "</div>";
						}
						
						elementTableHtml += "</div>";
					}
					elementTableHtml += "</td>";
					
					// Equipment cell
					elementTableHtml += buildEquipCell(elementDetails, data.fieldDefinitions.equipment, equipTableHtml);
					
					//Equipment table row
					equipTableHtml += buildEquipTableRow(data, elementDetails, elementProgram, elementType);

					// Frequency cell
					elementTableHtml += "<td>" +	checkUndefined(elementDetails.frequency) + "</td>";

					// Obs Times (merged) cell
					elementTableHtml += "<td>";
					if (elementDetails.observationTime) {
						$.each(elementDetails.observationTime, function (idx, obsTime) {
							if (idx > 0) { elementTableHtml += ", "; }
							elementTableHtml += checkUndefined(obsTime);
						});
					} else {
						elementTableHtml += checkUndefined(elementDetails.observationTime);
					}
					elementTableHtml += "</td>";
					
					// Pub Flag cell
					elementTableHtml += "<td class='phr_has_mouseover'><span class='phr_underline'>" +
						checkUndefined(elementDetails.publishedFlag) + "</span>";
					
					// Pub Flag mouseover
					if ((elementDetails.publishedFlag !== Homr.DUP_STRING) && (typeof elementDetails.publishedFlag !== 'undefined')) {
						elementTableHtml += "<div class='phr_details'>" +
							"<div class='phr_details_title'>" + 
							data.fieldDefinitions.publications[elementDetails.publishedFlag].displayName + 
							"</div></div>";
					}
					elementTableHtml += "</td>";
					
					// Receiver cell
					elementTableHtml += "<td>" + checkUndefined(elementDetails.receiver) + "</td>";
					
					// Reporting Method cell
					elementTableHtml += "<td class='phr_has_mouseover'><span class='phr_underline'>" +
						checkUndefined(elementDetails.reportingMethod) + "</span>";
					
					// Reporting Method mouseover
					if ((elementDetails.reportingMethod !== Homr.DUP_STRING) && 
					    (typeof elementDetails.reportingMethod !== 'undefined') &&
					    (typeof data.fieldDefinitions.reporting_methods[elementDetails.reportingMethod] !== 'undefined')) {
						elementTableHtml += "<div class='phr_details'>" +
							"<div class='phr_details_title'>" + 
							checkUndefined(data.fieldDefinitions.reporting_methods[elementDetails.reportingMethod].displayName) + 
							"</div></div>";
					}
					
					elementTableHtml += "</td>";
					
					// Soil Plot number cell
					elementTableHtml += buildSoilPlotCell(elementDetails, elementObj.soilPlots);
					
					elementTableHtml += "</tr>";
				});
			});
		});
		
		elementTableHtml += "</table>";
		equipTableHtml += "</table>";
		
		// build the Soil Plots table
		soilTableHtml = buildSoilPlotTable(elementObj.soilPlots);
		if (soilTableHtml !== "") { hasSoilPlots = true; }
		
		// Merge all our tables together into one HTML block
		phrHtml += elementTableHtml;
		phrHtml += equipTableHtml;
		phrHtml += soilTableHtml;
		
		phrHtml += "</div>";
		
	});

	if ($.isEmptyObject(data.elements)) {
		phrHtml += "<div id='homrPhrErrorMessage' class='homrWarningBox'><br />No PHR data for this station</div>";
		$("#homrPhrContainer").html(phrHtml);
		$("#homrPhrContainer").show();
	} else {
		// Set the main phr area html
		$("#homrPhrContainer").html(phrHtml);
		
		// Create and set the element display filter toggles
		var filterBoxHtml = buildFilterBoxHtml(hasSoilPlots, phrProgramElements);
		$("#phr_filter_box").html(filterBoxHtml);
		
		// Create and set the reference table modal window
		var refTableHtml = buildRefTableHtml();
		$("#phr_ref_table_container").html(refTableHtml);
		
		// For rows that show a second set of publication details for an existing element, blank out all
		// the other cells.
		$.each($("td:contains('" + Homr.DUP_STRING + "')"), function () {
			$(this).html("");
			$(this).addClass("phr_duplicate");
		});
		
		// Show/hide function for date ranges
		$(".phr_date_head").click(function () {
			$(this).next('div').slideToggle(500);
			$(this).toggleClass('phr_active_date');
		});
		
		// hide all data tables, leaving just date headers...
		$(".phr_element_content").toggle();
				
		// ...but show the first one
		$(".phr_date_head:first").click();
		
		// Hide the equipment table by default
		$(".phr_equip_table").hide();
		
		// Equipment table toggle function
		$("#phr_equip_checkbox").click(function () {
			$(this).toggleClass('homr_switch_selected');
			$(".phr_equip_table").toggle();
			$(".phr_element_table").toggle();
		});
		
		// Soil table toggle function
		$("#phr_soil_checkbox").click(function () {
			$(this).toggleClass('homr_switch_selected');
			$(".phr_plot_table").toggle();
		});
		
		// Element toggles
		$(".phr_table_row_toggle").click(function () {
			var tRow = $(this);
			tRow.toggleClass('homr_switch_selected');
			var row_class = tRow.attr('id').replace("_switch", "_row");
			$("." + row_class).toggle();
			// remove soil plot table rows for soil plots that have all their associated elements hidden
			if (tRow.hasClass('phr_soil_switch') && elementSoilPlots.hasOwnProperty(tRow.html())) {
				var plotNum = elementSoilPlots[tRow.html()];
				$.each(plotNum, function (idx, num) {
					if (tRow.hasClass('homr_switch_selected')) {
						soilPlotVis[num] += 1;
					} else {
						soilPlotVis[num] -= 1;
					}
					if (soilPlotVis[num] === 0) {
						$(".phr_soil_plot_row_" + num).hide();
					} else {
						$(".phr_soil_plot_row_" + num).show();
					}
				});
			}
		});

		// Show/hide all dates functions
		$("#phr_hide_all_dates").click(function () {
			$(".phr_date_head").each(function () {
				$(this).next('div').hide();
				$(this).removeClass('phr_active_date');
			});
		});
		$("#phr_show_all_dates").click(function () {
			$(".phr_date_head").each(function () {
				$(this).next('div').show();
				$(this).addClass('phr_active_date');
			});
		});
		
	}
}/*
 * homr-location-viz.js
 * homr version 1.12.0
 * 
 * This script creates the content of the 'location' tab, including the map, 
 * markers, and location history.
 * 
 */

function openLocFromMap(i) {
  var el = $("#locations_date_head_" + i);
  if (!el.hasClass('locations_active_date')) {
    el.click();
  }
  $('html, body').animate({
    scrollTop: el.offset().top - 100
  }, 2000);
}

function loadDataIntoLocationDisplay(locations, ids, header, platforms) {
  var highPrecisions = ['DDMMSSss', 'DDMMSSs', 'DDMMSS', 'DDddddd', 'DDdddd', 'DDddd', 'DDMMmmm', 'DDMMmm', 'DDMMm'];
  //var lowPrecisions = ['DDMM', 'DDdd', 'DDd', 'DD']; // comment for reference
  var edadsApiRoot;
  edadsApiRoot = "https://www.ncdc.noaa.gov/EdadsV2/api/";
  
  function dateRangeContains(range, date) {
    var r = {}, d;
    r.beginDate = range.beginDate;
    r.endDate = range.endDate === "Present" ? NOW.toISOString() : range.endDate;
    d = date === "Present" ? NOW.toISOString() : new Date(date).toISOString();
    d = d.replace(" ", "T");
    if ((d < r.endDate && d >= r.beginDate)){
      return true;
    } else {
      return false;
    }
  }

  function decimalCoordsToArea(inLat, inLon, prec) {
    var lat = parseFloat(inLat),
      lon = parseFloat(inLon),
      v, // the v is for variance, to draw our area box with
      areaCoords;

    if (prec === 'DDMM') { //variance of +/- 30 seconds
      v = 0.008333;
    } else if (prec === 'DDdd') { //variance of +/- .005 degrees
      v = 0.005;
    } else if (prec === 'DDd') { //variance of +/- .05 degrees
      v = 0.05;
    } else if (prec === 'DD') { //variance of +/- .5 degrees
      v = 0.5;
    } else { // any smaller precision doesn't need to be adjusted
      v = 0;
    }

    areaCoords = [
      [lat - v, lon - v],
      [lat - v, lon + v],
      [lat + v, lon + v],
      [lat + v, lon - v]
    ];
    return areaCoords;
  }

  // takes a degree/minute/second/direction string retrieved from the database in the format dd,mm,ss,di and coverts it
  // to the format dd�mm'ss"di for display on the visualization
  function formatDMS(dms) {
	
    if (dms === " "){
      return " ";
    }
    
  	if(dms.indexOf(',') == -1) {
  		return dms;
  	}
    
    var sDMS = dms.split(','), fDMS = "";
    fDMS += sDMS[0] + "&deg;";
    if (sDMS[1] !== "") {
      fDMS += sDMS[1] + "\'";
      if (sDMS[2] !== "") {
        fDMS += sDMS[2] + "\"";
      }
    }
    fDMS += sDMS[3];
    
    return fDMS;
  }

  // create the Google Maps object and display our station history points
  function buildGMap(gmapPoints, showLowPrecisionPoints) {
    var myOptions = {
        mapTypeId: google.maps.MapTypeId.TERRAIN,
        scaleControl: true,
        scrollwheel: false,
        zoomControl: true
      },
      infoWindow = new google.maps.InfoWindow(),
      marker,
      url,
      polygon,
      pointPrecision,
      pointIsHighPrecision,
      areaCorner,
      areaPath = null;
    locationsLatLonBounds = new google.maps.LatLngBounds();
    locationsGMapObject = new google.maps.Map(document.getElementById("locations_map_area"), myOptions);

    for (var pointIdx = 0; pointIdx < gmapPoints.length; pointIdx++) {
      pointPrecision = gmapPoints[pointIdx][3];

      var positionLatLng = new google.maps.LatLng(gmapPoints[pointIdx][1], gmapPoints[pointIdx][2]);

      if (($.inArray(pointPrecision, highPrecisions) !== -1) || (typeof pointPrecision === 'undefined')) {
        pointIsHighPrecision = true;
        locationsLatLonBounds.extend(positionLatLng);
      } else {
        pointIsHighPrecision = false;
        var areaLatLngs = decimalCoordsToArea(gmapPoints[pointIdx][1], gmapPoints[pointIdx][2], gmapPoints[pointIdx][3]);
        areaPath = [];
        for (var c = 0; c < areaLatLngs.length; c++) {
          areaCorner = new google.maps.LatLng(areaLatLngs[c][0], areaLatLngs[c][1]);
          locationsLatLonBounds.extend(areaCorner);
          areaPath.push(areaCorner);
        }
      }

      if (pointIsHighPrecision || showLowPrecisionPoints) {
        // put more recent points higher
        var zindex = google.maps.Marker.MAX_ZINDEX - pointIdx;
        marker = new google.maps.Marker({
          position: positionLatLng,
          map: locationsGMapObject,
          zIndex: zindex
        });
        // color our 'current' point differently to call it out
        if (pointIdx > 49) {
          url = "images/markers/redblank.png";
        } else {
          if (gmapPoints[pointIdx][0].indexOf("Present") >= 0) {
            url = "images/markers/darkblue" + (pointIdx + 1) + ".png";
          } else {
            url = "images/markers/red" + (pointIdx + 1) + ".png";
          }
        }
        marker.setIcon(url);

        // marker click events to show the info window
        google.maps.event.addListener(marker, 'click', (function (marker, pointIdx, pointIsHighPrecision, pointPrecision) {
          return function () {
            var content = "<div class='infoBoxText'><strong>" + gmapPoints[pointIdx][0] + "</strong><br />" +
              gmapPoints[pointIdx][1] + ", " + gmapPoints[pointIdx][2];
            if (!pointIsHighPrecision) {
              content += "<br /> (estimated from " + pointPrecision + ")";
            }
            content += "<br /><span id='locations_details_link_" + pointIdx +
              "' onclick='openLocFromMap(" + pointIdx + ")' " +
              "style='cursor:pointer; text-decoration:underline;'>show location details</span></div>";

            infoWindow.setContent(content);
            infoWindow.open(locationsGMapObject, marker);
          };
        }(marker, pointIdx, pointIsHighPrecision, pointPrecision)));

        // mouseover event for the map icons in the date header bars below the map
        // this will scale the appropriate icon on the map up, and set its z-index to max 
        $("#locations_latlon_icon_" + pointIdx).mouseover((function (marker, pointIdx, url) {
          return function () {
            marker.setIcon({
              url: url,
              scaledSize: new google.maps.Size(35, 35)
            });
            marker.setZIndex(google.maps.Marker.MAX_ZINDEX);
          };
        }(marker, pointIdx, url)));

        // mouseout event for the map icons in the date header bars below the map
        // scale the icon back down to normal, but leave the z-index alone (stay visible)
        $(("#locations_latlon_icon_" + pointIdx)).mouseout((function (marker, pointIdx, url) {
          return function () {
            marker.setIcon({
              url: url,
              scaledSize: new google.maps.Size(27, 27)
            });
          };
        }(marker, pointIdx, url)));

        if (!pointIsHighPrecision) {

          var polyOpts = { 
              fillColor: '#600', 
              fillOpacity: 0.3, 
              map: locationsGMapObject, 
              strokeColor: '#FFF', 
              strokeWeight: 1,
              zIndex: 99
            };
          polyOpts.paths = new google.maps.MVCArray(areaPath);
          polygon = new google.maps.Polygon(polyOpts);
          // clicking the polygon will show the associated marker's tooltip
          google.maps.event.addListener(polygon, "click", (function (pointIdx, marker) { 
            return function () {
              google.maps.event.trigger(marker, "click");
            };
          }(pointIdx, marker)));

          // mouseover event for the map icons in the date header bars below the map
          // this will scale the appropriate icon on the map up, and set its z-index to max 
          $(("#locations_latlon_icon_" + pointIdx)).mouseover((function (polygon) {
            return function () {
              polygon.setOptions({ fillColor: '#006' });
              polygon.setOptions({ zIndex: google.maps.Marker.MAX_ZINDEX });
            };
          }(polygon)));

          // mouseout event for the map icons in the date header bars below the map
          // scale the icon back down to normal, but leave the z-index alone (stay visible)
          $(("#locations_latlon_icon_" + pointIdx)).mouseout((function (polygon) {
            return function () {
              polygon.setOptions({ fillColor: '#600' });
            };
          }(polygon)));

        }
      }
    }
  }

  function buildDateHeader(idx, locationObj, hasPhotos) {
    var iconUrl;
    if (idx > 49) {
      iconUrl = "images/markers/redblank.png";
    } else {
      if (locationObj.dateRange.indexOf("Present") >= 0) {
        iconUrl = "images/markers/darkblue" + (idx + 1) + ".png";
      } else {
        iconUrl = "images/markers/red" + (idx + 1) + ".png";
      }
    }

    var headerHtml = "<div class='locations_date_group' "+ 
      "data-bdate='"+ locationObj.beginDate +"' "+
      "data-edate='"+ locationObj.endDate +"'>" +
      "<div class='locations_date_head' id='locations_date_head_" + idx + 
      "' aria-label='show/hide data for "+ locationObj.dateRange +"'>" + 
      "<span class='header_date'>" + locationObj.dateRange + "</span>";
    headerHtml += "<span class='header_lat_lon'>";
    
    headerHtml += "<span class='rptd_format'>" + formatDMS(checkUndefined(locationObj.lat_rptd)) +
      ", " + formatDMS(checkUndefined(locationObj.lon_rptd));
    if (typeof locationObj.precision !== 'undefined') {
      headerHtml += " (" + checkUndefined(locationObj.precision) + ")";
    }else{
      headerHtml += " (unknown precision)";
    }
    headerHtml += "</span>";
    
    if ((typeof locationObj.lat_dec !== 'undefined') || (typeof locationObj.lon_dec !== 'undefined')) {
	  headerHtml += "<span class='dec_format'>" + checkUndefined(locationObj.lat_dec) +
        ", " + checkUndefined(locationObj.lon_dec) + "</span>";
    }
    if ((typeof locationObj.lat_dms !== 'undefined') || (typeof locationObj.lon_dms !== 'undefined')) {
      headerHtml += "<span class='dms_format'>" + formatDMS(checkUndefined(locationObj.lat_dms)) +
        ", " + formatDMS(checkUndefined(locationObj.lon_dms)) + "</span>";
    }
    headerHtml += "<img id='locations_latlon_icon_" + idx + "' src='" + iconUrl + "' alt='location marker "+ idx +"' />" + "</span></div>";

    return headerHtml;
  }
  
  //Assemble the HTML for the location details toggles
  function buildFilterBoxHtml(location_cats, haveFuzzyPoints, haveDMS) {
    location_cats.push('Photos');
    var filterBoxHtml = "",
      // to preserve order
      FILTER_CATS = ['Descriptions', 'Topography', 'Relocations', 'Obstructions', 'Photos'];

    if (haveFuzzyPoints) {
      filterBoxHtml += "<div style='text-align: center;'>" +
        "<div class='homr_switch' " +
        "id='fuzzy_stations_switch'>Low-Precision Map Locations</div>" +
        "<img id='fuzzy_locations_help' src='images/icons/icon_box_help.png' alt='fuzzy locations help' />" +
        "<div class='phr_details' id='fuzzy_locations_help_container'></div>" +
        "</div>";
    }

    filterBoxHtml += "<div style='text-align:center;'>";
    if (location_cats.length > 1) { // pointless to have filter switches with only one category
      $.each(FILTER_CATS, function (idx, category) {
        if ($.inArray(category, location_cats) > -1) {
          filterBoxHtml += "<div class='homr_switch homr_switch_selected locations_area_toggle' " +
            "id='homr_" + category + "_switch'>" + category + "</div>";
        }
      });
    }
    filterBoxHtml += "</div>";
    filterBoxHtml += "<div>&nbsp;</div>";
    filterBoxHtml += "<div class='phr_fieldset'>" +
      "<h4 class='phr_checkboxes_title' style='margin-bottom:-1em;'>" +
      "<span>Date Ranges</span><span>(</span><span id='locations_show_all_dates' aria-label='show all dates'>Show All</span>" +
      "<span> / </span><span id='locations_hide_all_dates' aria-label='hide all dates'>Hide All</span><span>)&nbsp;&nbsp;</span>";
//    if (haveDMS) {
//      filterBoxHtml += "<div class='format_toggle_container'><span class='format_toggle_spacer'>&nbsp;&nbsp;</span><span id='format_toggle_link'>Toggle lat/lon format</span><span class='format_toggle_spacer'>&nbsp;&nbsp;</span></div>";
//    }
    filterBoxHtml += "<div class='format_toggle_container'>"+
    	"<span class='format_toggle_spacer'>&nbsp;&nbsp;</span>"+
    	"<span class='format_toggle_link'>Format: </span>"+
    	"<span class='format_toggle_spacer'>&nbsp;</span>"+
    	"<span class='format_toggle_link' id='show_rptd_format'>reported</span>"+
    	"<span class='format_toggle_spacer'>&nbsp;</span>"+
    	"<span class='format_toggle_link' id='show_dec_format'>dec</span>"+
    	"<span class='format_toggle_spacer'>&nbsp;</span>"+
    	"<span class='format_toggle_link' id='show_dms_format'>dms</span>"+
    	"<span class='format_toggle_spacer'>&nbsp;&nbsp;</span></div>";
    filterBoxHtml += "</h4></div>";
    filterBoxHtml += "<div class='homrWarningBox homrPhotoWarningBox' id='photo_slow_warning' style='display:none;'>"+
      "This station has photos,<br />but they're still loading.</div>";
    filterBoxHtml += "<div class='homrWarningBox' id='photo_timeout_warning' style='display:none;'>"+
      "This station has photos,<br />but they took too long to load.<br />"+
      "You can refresh the page or try later.</div>";
    
    return filterBoxHtml;
  }

  function buildSourceInfoHtml(locationObj) {
    var sourceHtml = "<table class='source_info_table'><tr>"
      + "<th>LAT/LON SOURCE: " + (locationObj.source || "Unknown") + "</th>"
      + "<th>HORIZ. DATUM: " + (locationObj.datum || "Unknown") + "</th>"
      + "</tr></table>";
    
    return sourceHtml;
  }
  
  function buildDescriptionsHtml(locationObj) {
    var descHtml = "<div class='homr_Descriptions_area'>" +
      "<div class='locations_spacer'>&nbsp;</div>" +
      "<div class='homr_locations_title homr_Descriptions_title'><div>Description</div></div>" +
      "<table class='homr_Descriptions_table'>";

    $.each(locationObj.descriptions, function (idx, description) {
      descHtml += "<tr>";
      if (locationObj.descriptions.length > 1) {
        var dateRangeStr = (description.date.beginDate.substring(0, 10) + " to " + description.date.endDate.substring(0, 10));
        descHtml += "<td>" + checkUndefined(dateRangeStr) + "</td>";
      }
      descHtml += "<td>" + checkUndefined(description.description) + "</td></tr>";
    });
    descHtml += "</table></div>";

    return descHtml;
  }

  function buildTopographyHtml(locationObj) {
    var topoHtml = "<div class='homr_Topography_area'>" +
      "<div class='locations_spacer'>&nbsp;</div>" +
      "<div class='homr_locations_title homr_Topography_title'><div>Topography</div></div>" +
      "<table class='homr_Topography_table'>";
    
    $.each(locationObj.topography, function (idx, topo) {
      topoHtml += "<tr>";
      if (locationObj.topography.length > 1) {
        var dateRangeStr = (topo.date.beginDate.substring(0, 10) + " to " + topo.date.endDate.substring(0, 10));
        topoHtml += "<td>" + checkUndefined(dateRangeStr) + "</td>";
      }
      topoHtml += "<td>" + checkUndefined(topo.description) + "</td></tr>";
    });
    topoHtml += "</table></div>";

    return topoHtml;
  }

  function buildRelocationsHtml(locationObj) {
    var reloHtml = "<div class='homr_Relocations_area'>" +
      "<div class='locations_spacer'>&nbsp;</div>" +
      "<div class='homr_locations_title homr_Relocations_title'><div>Relocations</div></div>" +
      "<table class='homr_Relocations_table'>";
    
    $.each(locationObj.relocations, function (idx, relo) {
      reloHtml += "<tr>";
      var dateRangeStr = (relo.date.toISOString().substring(0, 10));
      reloHtml += "<td>" + checkUndefined(dateRangeStr) + "</td>";
      reloHtml += "<td>" + checkUndefined(relo.relocation) + "</td></tr>";
    });
    reloHtml += "</table></div>";

    return reloHtml;
  }

  var OBST_BASE_VARS = ['type', 'azimuth', 'azimuthUnit', 'distance', 'distanceUnit', 'elevationAngle', 'elevationAngleUnit', 'description'];
  function buildObstructionsHtml(locationObj) {
    var obstDateRanges = [],
      obstActualVars = [],
      obstHtml = "<div class='homr_Obstructions_area'><div class='locations_spacer'>&nbsp;</div>";

    // build a list of what vars we have, so we know what table headers to show
    $.each(locationObj.obstructions, function (idx, obst) {
      $.each(OBST_BASE_VARS, function (idx, base_var) {
        if ((typeof obst[base_var] !== 'undefined') && ($.inArray(base_var, obstActualVars) === -1)) {
          obstActualVars.push(base_var);
        }
      });

      //collect the date ranges to help with display layout
      var dateRangeStr = obst.date.beginDate.substring(0, 10) + " to " + obst.date.endDate.substring(0, 10);
      obst.dateRangeStr = dateRangeStr;
      if ($.inArray(dateRangeStr, obstDateRanges) < 0) {
        obstDateRanges.push(dateRangeStr);
      }
    });
    obstHtml += "<div class='homr_locations_title homr_Obstructions_title'><div>Obstructions</div></div>" +
      "<table class='homr_Obstructions_table'><tr>";

    if (obstDateRanges.length > 1) {
      obstHtml += "<th>Dates</th>";
    }
    $.each(obstActualVars, function (idx, obst_var) {
      // rudimentary camelCase to Human Readable converter, but it works for the limited values that we have
      var obst_str = obst_var.replace(/([A-Z])/g, " $1");
      obst_str = obst_str.charAt(0).toUpperCase() + obst_str.slice(1);
      obstHtml += "<th>" + obst_str + "</th>";
    });
    obstHtml += "</tr>";

    $.each(obstDateRanges, function (dateIdx, obstDateRange) {
      var firstPass = true;
      $.each(locationObj.obstructions, function (idx, obst) {
        if (obst.dateRangeStr === obstDateRange) {
          obstHtml += "<tr";
          if ((dateIdx + 1) % 2 === 0) {
            obstHtml += " class='obst_zebra_row'";
          }
          obstHtml += ">";
          if (obstDateRanges.length > 1) {
            if (firstPass) {
              obstHtml += "<td>" + checkUndefined(obstDateRange) + "</td>";
              firstPass = false;
            } else {
              obstHtml += "<td>&nbsp;</td>";
            }
          }
          $.each(obstActualVars, function (idx, obst_var) {
            obstHtml += "<td>" + checkUndefined(obst[obst_var]) + "</td>";
          });
          obstHtml += "</tr>";
        }
      });
    });
    obstHtml += "</table></div>";

    return obstHtml;
  }

  function buildStationPhotosHtml(photoSet, network, date) {
    var keys = ($.map(photoSet, function (val, key) { return key; })).sort(),
      edadsApiExt,
      validNetwork,
      photosHtml = "";
    if (network === "ASOS") {
      edadsApiExt = "ASOSStationPhotos/image/byhash/";
      validNetwork = true;
    } else if (network === "CRN") {
      edadsApiExt = "USCRNPhotoInformation/image/byhash/";
      validNetwork = true;
    } else if (network === "RCRN") {
      edadsApiExt = "USRCRNPhotoInformation/image/byhash/";
      validNetwork = true;
    } else if (network === "ALRCRN") {
      edadsApiExt = "AL-USRCRNPhotoInformation/image/byhash/";
      validNetwork = true;
    }
    
    photosHtml += "<div class='homr_Photos_area'>" +
      "<div class='locations_spacer'>&nbsp;</div>" +
      "<div class='homr_locations_title homr_Photos_title'><div>Photos</div></div>" +
      "<div class='locations_spacer'>&nbsp;</div>" +
      "<div class='homr_photos_main_area'>" +
      "<img class='homr_photos_main' data-azimuth='" + keys[0] + "' src='" + 
      (edadsApiRoot + edadsApiExt + photoSet[keys[0]].photo) + "' alt='station photo' />" +
      "</div><h5>capture date: " + date.substring(0, 10) + "</h5>";

    photosHtml += "<div class='homr_photos_thumbnails_area'>";
    $.each(keys, function (i, az) {
      var photoObj = photoSet[az];
      photosHtml += "<div class='homr_photos_thumbnail_container";
      if (i === 0) {
        photosHtml += " homr_photo_selected";
      }
      photosHtml += "' data-hash='" + photoObj.photo + "' data-network='" + network + "'>" +
        "<img class='homr_photos_thumbnail' data-azimuth='" + 
        az + "' src='" + (edadsApiRoot + edadsApiExt + photoObj.tnail) + "' alt='station photo thumbnail' />" +
        "<br />" + az + "</div>";
    });
    photosHtml += "</div></div>";

    return photosHtml;
  }
  
  function getStationPhotos(network, photoWbans) {
    var wbans = photoWbans[network];
    var endPoints = {},
      deferredCollection = [],
      deferredUrl,
      validNetwork = false,
      edadsApiExt = null,
      photosReturned = false;
      
    if(wbans == undefined){
      // no wbans to test, so network is invalid
    } else if (network === "ASOS") {
      edadsApiExt = "ASOSStationPhotos/station/";
      validNetwork = true;
    } else if (network === "USCRN") {
      edadsApiExt = "USCRNPhotoInformation/station/";
      validNetwork = true;
    } else if (network === "USRCRN") {
      edadsApiExt = "USRCRNPhotoInformation/station/";
      validNetwork = true;
    } else if (network === "ALUSRCRN") {
      edadsApiExt = "AL-USRCRNPhotoInformation/station/";
      validNetwork = true;
    }
    
    var deferred = $.Deferred(function (deferredObj) {
      if (validNetwork === true) {
        
        // after 2 sec, if photos haven't returned from EV2, show a message
        // letting the user know that we're still waiting
        setTimeout(function(){
          if(!photosReturned){
            $("#photo_slow_warning").show();
          }
        }, 2000);
        
        $.each(wbans, function (idx, wban) {
          deferredUrl = edadsApiRoot + edadsApiExt + wban.id;
          if ($.inArray(network, ["USCRN", "USRCRN", "ALUSRCRN"]) >= 0) {
            deferredUrl += "/latest";
          }
          
          deferredCollection.push(
            $.ajax({
              url: deferredUrl,
              timeout: 10000,
              success: function (data) {
	              if (network === "ASOS") {
	                $.each(data, function (id, asosObj) {
	                  if ( dateRangeContains(wban, asosObj.DocumentationDate) ) {
	                    if (typeof endPoints[asosObj.DocumentationDate] === 'undefined') {
	                      endPoints[asosObj.DocumentationDate] = { };
	                    }
	                    if (typeof endPoints[asosObj.DocumentationDate][asosObj.Azimuth] === 'undefined') {
	                      endPoints[asosObj.DocumentationDate][asosObj.Azimuth] = { };
	                    }
	      
	                    if (asosObj.IsThumbnail === 'Y') {
	                      endPoints[asosObj.DocumentationDate][asosObj.Azimuth].tnail = asosObj.Hash;
	                    } else {
	                      endPoints[asosObj.DocumentationDate][asosObj.Azimuth].photo = asosObj.Hash;
	                    }
	                  }
	                });
	              } else if ($.inArray(network, ["USCRN", "USRCRN", "ALUSRCRN"]) >= 0) {
	                var maxDate = "0000-01-01",
	                  tEndPoints = {};
	                
	                $.each(data, function (id, crnObj) {
	                  if (typeof tEndPoints[crnObj.EventDate] === 'undefined') {
	                    tEndPoints[crnObj.EventDate] = { };
	                    if (crnObj.EventDate > maxDate) {
	                      maxDate = crnObj.EventDate;
	                    }
	                  }
	                  if (crnObj.DocumentType.indexOf("GSV") > -1) {
	                    if (crnObj.FileName.indexOf("GSV-1.") > -1) {
	                      tEndPoints[crnObj.EventDate]["GSV 1"] = { };
	                      tEndPoints[crnObj.EventDate]["GSV 1"].photo = crnObj.Hash + "/960px";
	                      tEndPoints[crnObj.EventDate]["GSV 1"].tnail = crnObj.Hash + "/150px";
	                    } else if (crnObj.FileName.indexOf("GSV-2.") > -1) {
	                      tEndPoints[crnObj.EventDate]["GSV 2"] = { };
	                      tEndPoints[crnObj.EventDate]["GSV 2"].photo = crnObj.Hash + "/960px";
	                      tEndPoints[crnObj.EventDate]["GSV 2"].tnail = crnObj.Hash + "/150px";
	                    } else if (crnObj.FileName.indexOf("GSV-3.") > -1) {
	                      tEndPoints[crnObj.EventDate]["GSV 3"] = { };
	                      tEndPoints[crnObj.EventDate]["GSV 3"].photo = crnObj.Hash + "/960px";
	                      tEndPoints[crnObj.EventDate]["GSV 3"].tnail = crnObj.Hash + "/150px";
	                    } else if (crnObj.FileName.indexOf("GSV-4.") > -1) {
	                      tEndPoints[crnObj.EventDate]["GSV 4"] = { };
	                      tEndPoints[crnObj.EventDate]["GSV 4"].photo = crnObj.Hash + "/960px";
	                      tEndPoints[crnObj.EventDate]["GSV 4"].tnail = crnObj.Hash + "/150px";
	                    }
	                  } 
	                });
	                endPoints[maxDate] = tEndPoints[maxDate];
	                
	              }
              },
              error: function (x, s, e) {
	              //console.log("photo ajax error: "+ s);
	              //console.log("photo ajax error: "+ e);
	              // something went wrong, return an empty object so no photos are displayed
	              if(s === "timeout"){
	                //setTimeout(function(){//TODO: remove
	                  deferredObj.resolve("timeout");
	                //}, 5000);//TODO: remove
	              }else{
	                deferredObj.resolve({});
	              }
              }
            })
          );
        });
      } else {
        deferredObj.resolve(endPoints);
      }

      $.when.apply($, deferredCollection)
        .done(function () {
          //setTimeout(function(){//TODO: remove, fakes a slow ev2 connection
            photosReturned = true;
            $("#photo_slow_warning").remove();
            deferredObj.resolve(endPoints);
          //}, 5000);//TODO: remove
        });
    });

    return deferred.promise();
  }

  var locationsHtml =	"<div id='locations_map_area'></div><div id='locations_filter_box'></div>",
    location_cats = [],
    gmapPoints = [],
    preciseMapPoints = [],
    showFuzzyPoints = false, 
    haveFuzzyPoints = false, 
    haveDMS = false;

  $.each(locations, function (idx, locationObj) {
    var hasInfo = false;
    
    locationsHtml += buildDateHeader(idx, locationObj);
    locationsHtml += "<div class='locations_content'>";
    locationsHtml += buildSourceInfoHtml(locationObj);
    locationsHtml += "<div class='homr_Photos_area' style='display:none;'></div>";
    
    //locations descriptions table
    if (locationObj.descriptions.length > 0) {
      hasInfo = true;
      if ($.inArray('Descriptions', location_cats) < 0) { location_cats.push('Descriptions'); }
      locationsHtml += buildDescriptionsHtml(locationObj);
    }

    // topography descriptions table
    if (locationObj.topography.length > 0) {
      hasInfo = true;
      if ($.inArray('Topography', location_cats) < 0) { location_cats.push('Topography'); }
      locationsHtml += buildTopographyHtml(locationObj);
    }

    // obstructions table
    if (locationObj.obstructions.length > 0) {
      hasInfo = true;
      if ($.inArray('Obstructions', location_cats) < 0) { location_cats.push('Obstructions'); }
      locationsHtml += buildObstructionsHtml(locationObj);
    }

    // relocations table
    if (locationObj.relocations.length > 0) {
      hasInfo = true;
      if ($.inArray('Relocations', location_cats) < 0) { location_cats.push('Relocations'); }
      locationsHtml += buildRelocationsHtml(locationObj);
    }

    if (!hasInfo) {
      locationsHtml += "<div class='locations_no_details'>No details for this date range.</div>";
    } else {
      locationsHtml += "<div class='locations_spacer'>&nbsp;</div>";
    }

    locationsHtml += "</div></div>";

    // collect lat/lon points for the map display
    gmapPoints.push([locationObj.dateRange, locationObj.lat_dec, locationObj.lon_dec, locationObj.precision]);

    if (($.inArray(locationObj.precision, highPrecisions) !== -1) || (typeof locationObj.precision === 'undefined')) {
      preciseMapPoints.push([locationObj.dateRange, locationObj.lat_dec, locationObj.lon_dec, locationObj.precision]);
    } else {
      haveFuzzyPoints = true;
    }

//    if ((typeof locationObj.lat_dms !== 'undefined') || (typeof locationObj.lon_dms !== 'undefined')) {
//      haveDMS = true;
//    }

  });

  if ($.isEmptyObject(locations)) {
    locationsHtml += "<div id='homrErrorMessage' class='homrWarningBox'><br />No Location data for this station</div>";
    $("#homrLocationsContainer").html(locationsHtml);
    $("#locations_map_area").hide();
  } else {
    // Set the main phr area html
    $("#homrLocationsContainer").html(locationsHtml);

    // build a google map display of the station location history, not showing low precision stations by default
    buildGMap(gmapPoints, showFuzzyPoints);

    var filterBoxHtml = buildFilterBoxHtml(location_cats, haveFuzzyPoints, haveDMS);
    $("#locations_filter_box").html(filterBoxHtml);
    $("#homr_Photos_switch").hide();
    $("#fuzzy_locations_help_container").html(
      "Station locations are reported in varying degrees of precision and accuracy.<br />" +
        "This is especially a problem with older stations, which were located using now<br />" +
        "outdated techniques and technology. A location with low precision cannot be<br />" +
        "accurately displayed as a point on a map. In these cases we show the smallest<br />" +
        "area that the precision can contain, i.e. the station was located somewhere<br />" +
        "in the bounding box. The marker represents the center of the box, and is for<br />" +
        "reference only."
    );

    // Show/hide function for date ranges
    $(".locations_date_head").click(function () {
      $(this).next('div').slideToggle(500);
      $(this).toggleClass('locations_active_date');
    });

    // hide all data tables, leaving just date headers...
    $(".locations_content").toggle();

    // ...but show the first one
    $(".locations_date_head:first").click();

    // Show/hide all dates functions
    $("#locations_hide_all_dates").click(function () {
      $(".locations_date_head").each(function () {
        $(this).next('div').hide();
        $(this).removeClass('locations_active_date');
      });
    });
    $("#locations_show_all_dates").click(function () {
      $(".locations_date_head").each(function () {
        $(this).next('div').show();
        $(this).addClass('locations_active_date');
      });
    });

    // Details toggles
    $(".locations_area_toggle").click(function () {
      $(this).toggleClass('homr_switch_selected');
      var table_class = $(this).attr('id').replace("_switch", "_area");
      $("." + table_class).toggle();
    });

    // don't show obstructions by default
    $("#homr_Obstructions_switch").click();

    // show/hide the low-precision map locations
    $("#fuzzy_stations_switch").click(function () {
      // make sure we show the warning about low-precision locations at least once, 
      // then set a cookie so we don't bother people with it again
      if ($.cookie("homr_fuzzy_stations_switch") !== "set") {
        $.cookie("homr_fuzzy_stations_switch", "set", {expires: 365});
        $("#fuzzy_locations_help").click();
      }

      showFuzzyPoints = !showFuzzyPoints;
      $(this).toggleClass('homr_switch_selected');
      buildGMap(gmapPoints, showFuzzyPoints);
      refreshGmap(locationsGMapObject, locationsLatLonBounds);
    });

    $(".dms_format").hide();
    $("#show_dms_format").addClass("format_toggle_link_unselected");
    $(".dec_format").hide();
    $("#show_dec_format").addClass("format_toggle_link_unselected");
    $("#show_rptd_format").click(function(){
    	$(".rptd_format").show();
    	$(".dms_format").hide();
    	$(".dec_format").hide();
    	$("#show_rptd_format").removeClass("format_toggle_link_unselected");
        $("#show_dms_format").addClass("format_toggle_link_unselected");
    	$("#show_dec_format").addClass("format_toggle_link_unselected");
    })
    $("#show_dec_format").click(function(){
    	$(".rptd_format").hide();
    	$(".dms_format").hide();
    	$(".dec_format").show();
    	$("#show_rptd_format").addClass("format_toggle_link_unselected");
    	$("#show_dms_format").addClass("format_toggle_link_unselected");
    	$("#show_dec_format").removeClass("format_toggle_link_unselected");
    })
    $("#show_dms_format").click(function(){
    	$(".rptd_format").hide();
    	$(".dms_format").show();
    	$(".dec_format").hide();
    	$("#show_rptd_format").addClass("format_toggle_link_unselected");
    	$("#show_dms_format").removeClass("format_toggle_link_unselected");
    	$("#show_dec_format").addClass("format_toggle_link_unselected");
    })
//    $(".dms_format").toggle();
//    $("#format_toggle_link").click(function () {
//      $(".dms_format").toggle();
//      $(".dec_format").toggle();
//    });
  }
  refreshGmap(locationsGMapObject, locationsLatLonBounds);
  addLocationsQtips();
  
  
  if(!ids.NEXRAD){
    var photoNetworks = {};
    $.each(platforms, function(platform, platformArray){
      $.each(platformArray, function(idx, platformObj){
        if(platformObj.photos != undefined){
          if(photoNetworks[platformObj.platform] == undefined){
            photoNetworks[platformObj.platform] = [];
          }
          if($.contains(photoNetworks[platformObj.platform], platformObj.photos) == false){
            photoNetworks[platformObj.platform].push(platformObj.photos);
          }
        }
      });
    });
    
    var photoWbans = {};
    if (typeof ids !== 'undefined' && typeof ids.WBAN != 'undefined') {
      $.each(ids.WBAN, function (i, id) {
        $.each(photoNetworks, function(network, wbanList){
          network = network.replace(" ", "");
          if ($.inArray(id.id, wbanList) > -1) {
            var bDate = id.date.beginDate;
            var eDate = id.date.endDate;
            eDate = eDate === "Present" ? NOW : eDate;
            if(photoWbans[network] == undefined){
              photoWbans[network] = [];
            }
            photoWbans[network].push({
              id: id.id,
              beginDate: bDate.toISOString(),
              endDate: eDate.toISOString()
            });
          }
        });
      });
    }
    
    $.when(
        getStationPhotos("ASOS", photoWbans),
        getStationPhotos("USCRN", photoWbans),
        getStationPhotos("USRCRN", photoWbans),
        getStationPhotos("ALUSRCRN", photoWbans)
      ).then(function (asosPhotos, crnPhotos, rcrnPhotos, alrcrnPhotos) {
        if(asosPhotos === 'timeout' || crnPhotos === 'timeout' || rcrnPhotos === 'timeout' || alrcrnPhotos === 'timeout'){
          $("#photo_timeout_warning").show();
        }else{
          $.each($(".locations_date_group"), function(idx, group){
            var hasPhotos = false,
              photosHtml = "",
              dateRange = {
                'beginDate': $(group).attr("data-bdate"), 
                'endDate' : $(group).attr("data-edate") 
              };
            
            if(!$.isEmptyObject(asosPhotos)){
              $.each(asosPhotos, function (date, photoSet) {
                if (dateRangeContains(dateRange, date) && !$.isEmptyObject(photoSet)) {
                  hasPhotos = true;
                  photosHtml += buildStationPhotosHtml(photoSet, "ASOS", date);    
                }
              });
            }
            if(!$.isEmptyObject(crnPhotos)){
              $.each(crnPhotos, function (date, photoSet) {
                if (dateRangeContains(dateRange, date) && !$.isEmptyObject(photoSet)) {
                  hasPhotos = true;
                  photosHtml += buildStationPhotosHtml(photoSet, "CRN", date);    
                }
              });
            }
            if(!$.isEmptyObject(rcrnPhotos)){
              $.each(rcrnPhotos, function (date, photoSet) {
                if (dateRangeContains(dateRange, date) && !$.isEmptyObject(photoSet)) {
                  hasPhotos = true;
                  photosHtml += buildStationPhotosHtml(photoSet, "RCRN", date);    
                }
              });
            }
            if(!$.isEmptyObject(alrcrnPhotos)){
              $.each(alrcrnPhotos, function (date, photoSet) {
                if (dateRangeContains(dateRange, date) && !$.isEmptyObject(photoSet)) {
                  hasPhotos = true;
                  photosHtml += buildStationPhotosHtml(photoSet, "ALRCRN", date);    
                }
              });
            }
            
            if(hasPhotos){
              $("#homr_Photos_switch").show();
              $(group).find(".header_date").addClass("header_date_has_photos");
              $(group).find(".homr_Photos_area").html(photosHtml);
              $(group).find(".homr_Photos_area").show();
            }
          });
        
          // Load station image from thumbnail click
          $(".homr_photos_thumbnail_container").click(function () {
            $(this).siblings().removeClass("homr_photo_selected");
            $(this).addClass("homr_photo_selected");
            var hash = $(this).attr("data-hash");
            var network = $(this).attr("data-network");
            var main = $(this).parent().siblings(".homr_photos_main_area").children("img");
            if (network === "ASOS") {
              main.attr("src", (edadsApiRoot + "ASOSStationPhotos/image/byhash/" + hash));
            } else if (network === "CRN") {
              main.attr("src", (edadsApiRoot + "USCRNPhotoInformation/image/byhash/" + hash));
            } else if (network === "RCRN") {
              main.attr("src", (edadsApiRoot + "USRCRNPhotoInformation/image/byhash/" + hash));
            } else if (network === "ALRCRN") {
              main.attr("src", (edadsApiRoot + "AL-USRCRNPhotoInformation/image/byhash/" + hash));
            }
          });
        }
      });
  }
}
/*
 * homr-misc-viz.js
 * homr version 1.12.0
 * 
 * This script creates the content of the 'misc' tab, including the remarks
 * and edit history
 * 
 */

function loadDataIntoMiscDisplay(ncdcstnid, remarks, updates, backups) {
  
  function getStationNames(backups, ncdcstnid) {
    var stationName,
      stationId;
    var stationNames = {},
      deferredCollection = [],
      deferredUrl;
    var deferred = $.Deferred(function (deferredObj) {
      $.each(backups, function (idx, backupsObj) {
        if (backupsObj.backupNcdcStnId === ncdcstnid) {
          deferredUrl = "services/station/search?qid=ncdcstnid:" + backupsObj.backupForStnId + "&definitions=false&headersOnly=true";
          deferredCollection.push(
            $.ajax({
              url: deferredUrl,
              timeout: 500,
              success: function (data) {
	              stationName = ((((((data || {}).stationCollection || {}).stations || {})[0] || {}).header || {}).preferredName || "Unknown");
	              stationId = (((((data || {}).stationCollection || {}).stations || {})[0] || {}).ncdcStnId || "Unknown");
	              stationNames[stationId] = stationName;
              },
              error: function () {
            	  //something went wrong, return an empty object so no station names are displayed
            	  deferredObj.resolve({});
              }
            })
          );
        }
      });
  
      $.when.apply($, deferredCollection)
        .done(function () {
          deferredObj.resolve(stationNames);
        });
    });
  
    return deferred.promise();
    
    
  }
  
  var miscHtml = "";
  $.when(
    getStationNames(backups, ncdcstnid)
  ).then(function (stationNames) {
    if ((remarks.length < 1) && (updates.length < 1) && (backups.length < 1)) {
      miscHtml += "<div id='miscErrorMessage' class='homrWarningBox'><br />No remarks, updates, or backups for this station</div>";
    } else {
      miscHtml += "<div class='misc_head misc_head_active'>Backup Stations</div>"
        + "<div class='misc_content backups_content'>";
      
      if (backups.length < 1) {
        miscHtml += "<div class='misc_no_details'>No backups for this station</div>";
      } else {
        var tmpHtml = "<div class='backup_notice'>The following stations provide supplemental observations for this station "
          + "(<a href='http://www.nws.noaa.gov/directives/sym/pd01010004curr.pdf' target='_blank'>"
          + "What's this?</a>):</div>" 
          + "<table width='100%' class='backups_table' id='backups_table'><thead>"
          + "<tr><th>Dates</th><th>Name</th><th>Last Update</th><th>lat</th><th>lon</th><th>elev</th>"
          + "<th>distance</th><th>elements</th><th>equipment</th></tr></thead><tbody>";
        var hasBackups = false;
        $.each(backups, function (idx, backupsObj) {
          var dateRangeStr = "";
          if (typeof backupsObj.date.beginDate === 'string') {
            dateRangeStr += backupsObj.date.beginDate.substring(0, 10);
          } else {
            dateRangeStr += backupsObj.date.beginDate.toISOString().substring(0, 10);
          }
          dateRangeStr += " to ";
          if (typeof backupsObj.date.endDate === 'string') {
            dateRangeStr += backupsObj.date.endDate.substring(0, 10);
          } else {
            dateRangeStr += backupsObj.date.endDate.toISOString().substring(0, 10);
          }
  
          if (backupsObj.backupForStnId === ncdcstnid) {
            hasBackups = true;
            tmpHtml += "<tr";
            tmpHtml += idx % 2 === 0 ? 
              " class='misc_zebra_row_even'" : 
              " class='misc_zebra_row_odd'";
            tmpHtml += ">"
              + "<td>" + dateRangeStr + "</td>";
            
            if (backupsObj.name !== undefined) {
              tmpHtml += "<td>";
              if (backupsObj.backupNcdcStnId !== undefined) {
                tmpHtml += "<a href='./#ncdcstnid=" + backupsObj.backupNcdcStnId + "&tab=MISC'>"
                  + backupsObj.name + "</a>";
              } else {
                tmpHtml += backupsObj.name;
              }
              tmpHtml += "</td>";
            }
            tmpHtml += "<td>" + checkUndefined(backupsObj.lastUpdate).substring(0,10) + "</td>" 
              + "<td>" + checkUndefined(backupsObj.latitudeDec) + "</td>"
              + "<td>" + checkUndefined(backupsObj.longitudeDec) + "</td>"
              + "<td>" + checkUndefined(backupsObj.elevation) + " " 
              + checkUndefined(backupsObj.elevationUnit) + "</td>"
              + "<td>" + checkUndefined(backupsObj.distance) + " " 
              + checkUndefined(backupsObj.distanceUnit) + " " 
              + checkUndefined(backupsObj.relativeDirection) + "</td>"
              + "<td>" + checkUndefined(backupsObj.backupElements) + "</td>"
              + "<td>" + checkUndefined(backupsObj.backupEquipment) + "</td></tr>";
          }
        });
        tmpHtml += "</tbody></table>";
        
        if (hasBackups === true) {
          miscHtml += tmpHtml;
        }
        
        tmpHtml = "<div class='backup_notice'>This station provides supplemental observations for the following stations "
          + "(<a href='http://www.nws.noaa.gov/directives/sym/pd01010004curr.pdf' target='_blank'>"
          + "What's this?</a>):</div>" 
          + "<table width='100%' class='backups_table' id='backups_table'><thead>"
          + "<tr><th>Last Update</th><th>NCDC Station Id</th></tr></thead><tbody>";
        hasBackups = false;
        $.each(backups, function (idx, backupsObj) {
          if (backupsObj.backupNcdcStnId === ncdcstnid) {
            hasBackups = true;
            tmpHtml += "<tr";
            tmpHtml += idx % 2 === 0 ? 
              " class='misc_zebra_row_even'" : 
              " class='misc_zebra_row_odd'";
            tmpHtml += "><td>" 
              + checkUndefined(backupsObj.lastUpdate).substring(0,10) + "</td><td>"
              + "<a href='./#ncdcstnid=" + backupsObj.backupForStnId + "&tab=MISC'>" 
              + backupsObj.backupForStnId
              + " (" + (stationNames[backupsObj.backupForStnId] || "Unknown") + ")"
              + "</a></td></tr>";
          }
        });
        tmpHtml += "</tbody></table>";
        
        if (hasBackups === true) {
          miscHtml += tmpHtml;
        }
      }
      miscHtml += "</div>"; 
      
      miscHtml += "<div class='misc_head misc_head_active'>Remarks</div>"
        + "<div class='misc_content remarks_content'>";
      if (remarks.length < 1) {
        miscHtml += "<div class='misc_no_details'>No remarks for this station</div>";
      } else {
        miscHtml += "<table width='100%' class='remarks_table' id='remarks_table'><thead>"
          + "<tr><th>Dates</th><th>Type</th><th>Remark</th></tr></thead><tbody>";
  
        $.each(remarks, function (idx, remarksObj) {
          var dateRangeStr = "";
          if (typeof remarksObj.date.beginDate === 'string') {
            dateRangeStr += remarksObj.date.beginDate;
          } else {
            dateRangeStr += remarksObj.date.beginDate.toISOString().substring(0, 10);
          }
          dateRangeStr += " to ";
          if (typeof remarksObj.date.endDate === 'string') {
            dateRangeStr += remarksObj.date.endDate;
          } else {
            dateRangeStr += remarksObj.date.endDate.toISOString().substring(0, 10);
          }
  
          miscHtml += "<tr";
          miscHtml += idx % 2 === 0 ? 
            " class='misc_zebra_row_even'" : 
            " class='misc_zebra_row_odd'";
          miscHtml += ">" + "<td>" + checkUndefined(dateRangeStr) + "</td>"
            + "<td>" + checkUndefined(remarksObj.type) + "</td>" + "<td>"
            + checkUndefined(remarksObj.remark) + "</td>" + "</tr>";
        });
        miscHtml += "</tbody></table>";
      }
      miscHtml += "</div>";
  
      miscHtml += "<div class='misc_head misc_head_active'>Station Edit History</div>"
        + "<div class='misc_content updates_content'>";
      if (updates.length < 1) {
        miscHtml += "<div class='misc_no_details'>No updates for this station</div>";
      } else {
        miscHtml += "<table width='100%' class='updates_table' id='updates_table'>"
          + "<thead>"
          + "<tr><th>Update Source</th><th>Provided By</th>"
          + "<th>Version</th><th>Native ID</th><th>Effective Date</th><th>Entered By</th>"
          + "<th>Entered Date</th><th>Modified By</th><th>Modified Date</th></tr>"
          + "</thead><tbody>";
        $.each(updates, function (idx, updatesObj) {
          var effectiveDateStr = checkUndefined(updatesObj.effectiveDate).toString().substring(0, 10);
          var enteredDateStr = checkUndefined(updatesObj.enteredDate).toString().substring(0, 10);
          var modifiedDateStr = checkUndefined(updatesObj.modifiedDate).toString().substring(0, 10);
          miscHtml += "<tr ";
          miscHtml += idx % 2 === 0 ? 
            "class='misc_zebra_row_even'" : 
            "class='misc_zebra_row_odd'";
          miscHtml += ">" + "<td rowspan=2 class='updates_table_date'>"
            + checkUndefined(updatesObj.updateSource) + "</td>" + "<td>"
            + checkUndefined(updatesObj.providedBy) + "</td>" + "<td>"
            + checkUndefined(updatesObj.version) + "</td>" + "<td>"
            + checkUndefined(updatesObj.nativeId) + "</td>" + "<td>"
            + checkUndefined(effectiveDateStr) + "</td>" + "<td>"
            + checkUndefined(updatesObj.enteredBy) + "</td>" + "<td>"
            + checkUndefined(enteredDateStr) + "</td>" + "<td>"
            + checkUndefined(updatesObj.modifiedBy) + "</td>" + "<td>"
            + checkUndefined(modifiedDateStr) + "</td>" + "</tr>";
          miscHtml += "<tr ";
          miscHtml += idx % 2 === 0 ? 
            "class='misc_zebra_row_even'" : 
            "class='misc_zebra_row_odd'";
          miscHtml += " style='text-align:left;'><td colspan=8><b>Update</b>: "
            + checkUndefined(updatesObj.description) + "</td></tr>";
        });
        miscHtml += "</tbody></table>";
      }
      miscHtml += "</div>";
    }
  
    $("#homrMiscContainer").html(miscHtml);
  
    // Show/hide function for date ranges
    $(".misc_head").click(function () {
      $(this).next('div').slideToggle(500);
      $(this).toggleClass('misc_head_active');
    });
  });

}
/*
 * homr-viz-control.js
 * homr version 1.12.0
 * 
 * This script handles most of the interactivity on the HOMR front page.
 * Includes all of the functionality not specific to a data tab, and organizes
 * most of the other operations
 * 
 */

var stationList = [], currentStationsList, allStationsList, selectedResultStationId = 0, mshr_requests = [], locationsGMapObject, resultsGMapObject, locationsLatLonBounds, locationsGMapObject, locationsLatLonBounds, resultsLatLonBounds, resultsMapMarkers = [], checkHash = true, qidVal, qidMod;

// loads the station details for a single station by ncdcstnid
function loadOtherEntry(identifier, tab) {
  identifier = identifier.toString();

  $("#homrMshrVizSpinner").show();
  $("#station_title").hide();
  $("#homrMshrContainer").hide();
  $("#homrPhrContainer").hide();
  $("#homrLocationsContainer").hide();
  $("#homrMiscContainer").hide();
  $("#homrLinksArea").hide();

  // clear all pending requests to avoid collisions
  for (var i = 0; i < mshr_requests.length; i++) {
    mshr_requests[i].abort();
  }

  mshr_requests.push(
    $.ajax({
      url : Homr.Load.getWsUrlForIdentifier(identifier) + identifier,
      data : 'date=all',
      success : function (json) {
        var p = Homr.Load.loadDataFromWebService(json);
        var stationPor = Homr.Util.formattedDateRangeString(p.data.header.por.beginDate, p.data.header.por.endDate);
        var titleHtml = "<div id='station_title'>"
          + p.data.header.preferredName + "<br />" + stationPor
          + "</div>";
    
        $("#station_title_container").html(titleHtml);
        $("#homrMshrVizSpinner").hide();
        $("#homrVizTabs").show();

        var tabId = null;
        if ((tab != null) && (tab !== 'NULL')) {
          tabId = tab + "_TAB";
        } else {
          tabId = $(".homrCurrentTab").attr('id');
          tab = tabId.substring(0, (tabId.indexOf("_TAB")));
        }

        var newHash = "#ncdcstnid=" + identifier + "&tab=" + tab;
        if (location.hash.toUpperCase() !== newHash.toUpperCase()) {
          checkHash = false;
          location.hash = newHash;
        }
        
        var ieVersion = Homr.Util.getIEVersion();
        if (ieVersion < 0 || ieVersion >= 9) {
          loadDataIntoMSHRDisplay(json.stationCollection.stations[0], p.data.fieldDefinitions, "homr_mshr");
          addMshrHelpQtip();
          if(ieVersion >= 10)
            addMshrSaveQtip();
        }
        loadDataIntoPHRDisplay(p.data);
        //console.log(p);
        loadDataIntoLocationDisplay(p.data.locations, p.data.identifiers, p.data.header, p.data.platforms);
        loadDataIntoMiscDisplay(identifier, p.data.remarks, p.data.updates, p.data.backups);

        $("#" + tabId).click();
        
        var linkhtml = "<a href='" + window.location + "' target='_blank'>Open this station in a new window</a>";
        $("#homrNewWindowLink").html(linkhtml);

        var jsonurl = Homr.Load.getWsUrlForIdentifier(identifier) + identifier + "?date=all";
        var jsonhtml = "<a href='" + jsonurl
            + "' target='_blank' >View station metadata as JSON</a>";
        //jsonhtml += " (<a href='http://en.wikipedia.org/wiki/JSON' target='_blank'>What's this?</a>)";
        $("#homrMshrJsonLink").html(jsonhtml);

        var cdohtml = buildCdoLinks(p.data.identifiers);
        $("#homrCDOLinks").html(cdohtml);
        
        $("#homrHoldingsArea").hide();
        $("#homrAccessArea").hide();
        
        $("#homrLinksArea").show();
      },
      error : function (error) {
        //var context = $("#homrMshrCanvas")[0].getContext('2d');
        //context.clearRect(0, 0, context.canvas.width,
        //    context.canvas.height);
        $("#homrMshrVizSpinner").hide();
      }
    })
  );
}

// when a station is selected from the map interface, reflect that choice in the
// text list of results
function selectOtherEntry(id) {
  $(".homrResultsListSelectedItem").removeClass('homrResultsListSelectedItem');
  for (var sPos = 0; sPos < stationList.length; sPos++) {
    if (stationList[sPos].ncdcStnId === id) {
      break;
    }
  }
  var resultRow = $(".resultRow[ncdcstnid='" + id + "']");
  resultRow.addClass('homrResultsListSelectedItem');
  $(".resultTable").scrollTop((resultRow[0].scrollHeight + 1) * sPos);
  selectedResultStationId = id;
}

// add click events to our list of search results items
function addClickEvents() {
  $(".homrResultsListItem").unbind('click');
  $(".homrResultsListItem").click(function (event) {
    $(".homrResultsListItem").removeClass('homrResultsListSelectedItem');
    $(this).addClass('homrResultsListSelectedItem');

    selectedResultStationId = $(this).attr("ncdcstnid");
    var id = $(this).attr("ncdcStnId");
    loadOtherEntry(id);
    google.maps.event.trigger(resultsMapMarkers[id], "click");

  });
}

// Return a filler character to display when values are undefined
function checkUndefined(el) {
  if (typeof el === 'undefined') {
    return " ";
  } else {
    return el;
  }
}

// parse a named parameter out of the url hash
function getHashParameter(name) {
  return decodeURI((RegExp(name + '=' + '(.+?)(&|$)').exec(location.hash) 
    || [,null])[1]);
}

function replaceHashParam(param, val) {
  var oldHash = location.hash;
  var newHash = oldHash;
  var re = new RegExp(("^(#.*" + param + "=)\\w*(&.*)*$"), "g");
  var result = re.exec(oldHash);
  if (typeof result[0] === 'undefined') {
    newHash = result[1].toString() + val;
  }
  newHash += typeof result[2] === 'undefined' ? "" : result[2];
  return newHash;
}

// tracking stuff specific to the viz page
function trackPage() {
  if (typeof ga !== 'undefined') {
    try {
      var ncdcstnid = getHashParameter('ncdcstnid');
      var tab = getHashParameter('tab').toUpperCase();
      if ((ncdcstnid !== 'null') && (tab !== 'null')) {
        ga('send', 'event', 'HOMR', 'StationView', ncdcstnid);
        ga('send', 'event', 'HOMR', 'SectionView', tab);
      }
      ga('send', 'pageview');
    } catch (error) {
    }
  }
}

function trackSearch(url) {
  if (typeof ga !== 'undefined') {
    try {
      ga('send', 'event', 'HOMR', 'Search', url);
    } catch (error) {
    }
  }
}

// load a station and data tab based on the parameters in the current url hash
function runParamsSearch() {
  var ncdcstnid = getHashParameter('ncdcstnid'),
    tab = getHashParameter('tab').toUpperCase();
  
  if (ncdcstnid !== 'null') {
    loadOtherEntry(ncdcstnid, tab);
  } else {
    var qidVal = getHashParameter('qid'),
      qidMod = getHashParameter('qidMod'),
      stateVal = getHashParameter('state'),
      countryVal = getHashParameter('country'),
      countyVal = getHashParameter('county'),
      nameVal = getHashParameter('name'),
      nameMod = getHashParameter('nameMod'),
      platformVal = getHashParameter('platform');
    
    if ($.inArray(qidMod.toUpperCase(), [ 'IS', 'CONTAINS', 'STARTS', 'ENDS', 'EXISTS' ]) < 0) {
      qidMod = 'null';
    }
    if ($.inArray(nameMod.toUpperCase(), [ 'IS', 'CONTAINS', 'STARTS', 'ENDS' ]) < 0) {
      nameMod = 'null';
    }
    if ($.inArray(platformVal.toUpperCase(), [ 'ASOS', 'USCRN', 'USHCN',
        'NEXRAD', 'AL USRCRN', 'USRCRN', 'COOP', 'PLCD', 'TDWR' ]) < 0) {
      platformVal = 'null';
    }

    // test if any of our hash parameters are present, i.e. not 'null'
    var haveParams = (
      $.grep(
        [ qidVal, qidMod, stateVal, countryVal, countyVal, nameVal, nameMod, platformVal ], 
        function (n, i) { return n !== 'null'; }
      )
    ).length;

    if (haveParams > 0) {
      searchSubmit(qidVal, qidMod, stateVal, countryVal, countyVal, nameVal, nameMod, platformVal, tab);
    }
  }
}

// fixes the problem of a google map loaded to a hidden div not showing up when
// the div is shown (tab switching)
function refreshGmap(mapObject, latLonBounds) {
  if (typeof mapObject !== 'undefined') {
    google.maps.event.trigger(mapObject, 'resize');
    mapObject.fitBounds(latLonBounds);
  }
}

// add phr table mouseovers, and all of our modal windows
function addPHRQtips() {
  $(".phr_has_mouseover").each(
    function (i) {
      if ('object' !== typeof $(this).data('qtip')) {
        var content = $(this).children('div').html(), 
          type = $(this).children('div').find('table').attr('class'), 
          posMy = 'bottom center', 
          posAt = 'top center';
  
        if (typeof type !== 'undefined') {
          if (type.indexOf("soil") > -1) {
            posMy = 'bottom right';
          }
        }
  
        $(this).qtip({
          content : content,
          position : {
            my : posMy,
            at : posAt,
            target : $(this)
          },
          style : {
            classes : 'phr_qtip'
          }
        });
      }
    }
  );
  
  $(".homr_switch_info").each(function (i) {
    if ('object' !== typeof $(this).data('qtip')) {
      var content = $(this).children('div').html();
      $(this).qtip({
        content : {
          text : content,
          title : {
            text : 'Reference Tables',
            button : 'Close'
          }
        },
        position : {
          my : 'center',
          at : 'center',
          target : $(window)
        },
        style : {
          classes : 'phr_qtip'
        },
        show : {
          event : 'click',
          modal : {
            on : true
          }
        },
        hide : {
          event : 'unfocus'
        }
      });
    }
  });
}

function addLocationsQtips() {
  $("#fuzzy_locations_help").each(function (i) {
    if ('object' !== typeof $(this).data('qtip')) {
      var content = $("#fuzzy_locations_help_container").html();
      $(this).qtip({
        content : {
          text : content,
          title : {
            text : 'Low-Precision Locations',
            button : 'Close'
          }
        },
        position : {
          my : 'center',
          at : 'center',
          target : $(window),
          viewport : $(window)
        },
        style : {
          classes : 'phr_qtip fuzzy_locations_help_container'
        },
        show : {
          event : 'click',
          modal : true
        },
        hide : {
          event : 'unfocus'
        }
      });
    }
    
  });
}

function addMshrHelpQtip(){
  $("#mshr_help").each(function (i) {
    if ('object' !== typeof $(this).data('qtip')) {
      var content = "<img src='images/mshr_help.png' alt='mshr help' />";
      $(this).qtip({
        content : {
          text : content,
          title : {
            text : 'New Master Station History Record Features',
            button : 'Got it!'
          }
        },
        position : {
          my : 'center',
          at : 'center',
          target : $(window),
          viewport : $(window)
        },
        style : {
          classes : 'phr_qtip fuzzy_locations_help_container mshr_help',
          width : '718px',
          height : '635px'  
        },
        show : {
          event : 'click',
          modal : true
        },
        hide : {
          event : 'unfocus'
        }
      });
    }
  });
}

function addMshrSaveQtip(){
  $("#save_link").each(function (i) {
    if ('object' !== typeof $(this).data('qtip')) {
      var content = $("#mshr_img");
      $(this).qtip({
        content : {
          text : content,
          title : {
            text : 'Right click > save to save image',
            button : 'Got it!'
          }
        },
        position : { my : 'center', at : 'center', target : $(window), viewport : $(window) },
        style : {
          classes : 'phr_qtip'// fuzzy_locations_help_container mshr_help'//, width : '718px', height : '635px'  
        },
        show : { event : 'click', modal : true },
        hide : { event : 'unfocus' }
      });
    }
  });
}

// put all of the results from a search on an interactive map
function buildSearchResultMap(updateLatLonBounds) {
  var myOptions = {
    mapTypeId : google.maps.MapTypeId.TERRAIN,
    scaleControl : true,
    scrollwheel : false,
    zoomControl : true
  };
  var infoWindow = new google.maps.InfoWindow();
  var marker, position, url;
  $("#Searchresult").width(Math.floor($("#Searchresult").width()));
  var space = $("#homrSearchResultsContent").width()
    - $("#Searchresult").width() - 2;
  $("#homrSearchResultsMapContainer").css('width', space);
  if (updateLatLonBounds) {
    resultsLatLonBounds = new google.maps.LatLngBounds();
  }
  resultsGMapObject = new google.maps.Map(document.getElementById("homrSearchResultsMap"), myOptions);

  for (var i = 0; i < stationList.length; i++) {
    var station = stationList[i];
    position = new google.maps.LatLng(station.lat, station.lon);
    resultsLatLonBounds.extend(position);

    marker = new google.maps.Marker({
      position : position,
      map : resultsGMapObject
    });

    url = "images/markers/redblank.png";
    marker.setIcon(url);

    google.maps.event.addListener(
      marker, 
      'click', 
      (function (marker, station) {
        return function () {
          infoWindow
            .setContent("<div class='infoBoxText'><strong>"
              + station.preferredName
              + "</strong><br />"
              + station.beginDate
              + " to "
              + station.endDate
              + "<br />"
              + "<span id='load_station_link_"
              + i
              + "' onclick='loadOtherEntry("
              + station.ncdcStnId
              + "); selectOtherEntry("
              + station.ncdcStnId
              + ");' "
              + "style='cursor:pointer; text-decoration:underline;'>show station history</span></div>");
          infoWindow.open(resultsGMapObject, marker);
        };
      }(marker, station))
    );

    resultsMapMarkers[station.ncdcStnId] = marker;
  }
}

// build the text list of search results
function buildSearchResultListHtml() {
  // Iterate through a selection of the content and build an HTML string
  var html = "<div class='resultTable'>";
  for (var index = 0; index < stationList.length; index++) {
    var station = stationList[index];
    html += "<div class='resultRow homrResultsListItem" +
      "' ncdcStnId='" + station.ncdcStnId + 
      "'>" +
      "<div class='resultCellTitle'>" + station.preferredName + "</div>" +
      "<div class='resultCellDetails'>" + station.beginDate + " to " +
      station.endDate + "</div>" +
      "</div>";
  }
  html += "</div>";

  $('#Searchresult').html(html);

  addClickEvents();

  // Prevent click event propagation
  return false;
}

function buildCountiesList(st) {
  var html = "<option state='" + st
      + "' county='' selected='selected'>Any County</option>";
  var counties = HOMRcounties[st].split(",");
  for (var i = 0; i < counties.length; i++) {
      html += '<option state="' + st + '" county="' + counties[i].toUpperCase()
	      + '">' + counties[i] + '</option>';
  }
  return html;
}

function buildCdoLinks(idTypes) {
  var cdohtml = "";
  $.each(idTypes, function (idType, idList) {
    if ($.inArray(idType, ["GHCND", "NEXRAD"]) > -1) {
      if (cdohtml === "") {
        cdohtml += "<span>Get station data from NCEI</span> <br />(data may not be available for entire station history)";
      }
      var foundIds = [];
      $.each(idList.reverse(), function (idx, id) {
        if ($.inArray(id.id, foundIds) === -1) {
          foundIds.push(id.id);
          if (idx === 0) {
            cdohtml += "<br />" + idType + ": [";
          } else {
            cdohtml += ", ";
          }
          switch(idType){
          case "GHCND":
        	  cdohtml += "<a href='http://www.ncdc.noaa.gov/cdo-web/datasets/" +
              	idType + "/stations/" + idType + ":" + id.id +
              	"/detail' target='_blank'>" + id.id + "</a>";  
        	  break;
          case "NEXRAD":
        	  cdohtml += "<a href='https://www.ncdc.noaa.gov/nexradinv/chooseday.jsp?id=" +	
        	  	id.id + "' target='_blank'>" + id.id + "</a>"; 
        	  break;
          }
          
        }
      });
      cdohtml += "] ";
    }
  });
  return cdohtml;
}

function buildSearchResults(tab) {
  $("#homrMshrVizResults").show();

  var checked = $("#open_stations_checkbox").hasClass("homr_switch_selected");
  if (checked) {
    stationList = currentStationsList;
  } else {
    stationList = allStationsList;
  }

  var titleHtml = stationList.length + " STATIONS FOUND"
    + "<div id='open_stations_checkbox' class='homr_switch";
  if (checked) {
    titleHtml += " homr_switch_selected";
  }
  titleHtml += "'>Display Open Stations Only</div>";

  $("#homrMshrVizResultsTitle").html(titleHtml);

  $("#open_stations_checkbox").click(function () {
    $("#open_stations_checkbox").toggleClass("homr_switch_selected");
    buildSearchResults();
  });

  buildSearchResultListHtml();

  // load the first result into the viz, if a station in our results wasn't
  // already loaded
  var sPos = 'null';
  for (var tPos = 0; tPos < stationList.length; tPos++) {
    sPos = 0;
    if (stationList[tPos].ncdcStnId === selectedResultStationId) {
      sPos = tPos;
      break;
    }
  }
  
  if (sPos !== 'null') {
    //if (stationList[sPos].ncdcStnId !== selectedResultStationId) {
      loadOtherEntry(stationList[sPos].ncdcStnId.toString(), tab);
    //}
    
    selectedResultStationId = stationList[sPos].ncdcStnId;
    var resultRow = $(".resultRow[ncdcstnid='" + selectedResultStationId + "']");
    resultRow.addClass('homrResultsListSelectedItem');
    $(".resultTable").scrollTop((resultRow[0].scrollHeight + 1) * sPos);  
    buildSearchResultMap(true);
  } else {
    buildSearchResultMap(false);
    $("#homrMshrVizSpinner").hide();
    $("#station_title").hide();
    $("#homrVizTabs").hide();
    $("#homrLinksArea").hide();
    $("#homrMshrContainer").hide();
    $("#homrPhrContainer").hide();
    $("#homrLocationsContainer").hide();
    $("#homrMiscContainer").hide();
  }
  refreshGmap(resultsGMapObject, resultsLatLonBounds);
  
  // this brings up the info box for the initially selected station
  // not enabled for now because it feels disruptive to the map interface
  // google.maps.event.trigger(resultsMapMarkers[selected], "click");
}

function searchFromPage() {
  var qidType = '',
      qidMod = '',
      qidVal = $.trim($("#searchIdBox").val()),
      nameMod = '',
      nameVal = $.trim($("#searchNameBox").val()),
      stateVal = $("#searchLocations option:selected").attr("state"),
      countryVal = $("#searchLocations option:selected").attr("country"),
      countyVal = '',
      platformVal = $("#searchPlatform").val();

  if($("#searchIdMod").val() === 'exists'){
	  qidVal = $("#searchIdTypes").val();
	  qidMod = 'exists';
  } else if (qidVal !== '' && qidVal !== 'Any ID') {
    qidMod = $("#searchIdMod").val();
    if (qidVal.indexOf(":") === -1) { // no network specified in the qid field, assemble from "type:val"
      qidType = $("#searchIdTypes").val();
      qidVal = qidType + ":" + qidVal;
    }
  } else {
    qidVal = '';
  }

  if (nameVal !== '' && nameVal !== 'Any Name') {
    nameMod = $("#searchNameMod").val();
  } else {
    nameVal = '';
  }
  
  if (HOMRcounties[stateVal]) {
    countyVal = $("#searchCounties option:selected").attr("county");
  }
  
  searchSubmit(qidVal, qidMod, stateVal, countryVal, countyVal, nameVal, nameMod, platformVal);
}

function searchSubmit(qidVal, qidMod, stateVal, countryVal, countyVal, nameVal,
    nameMod, platformVal, tabVal) {
  
  /* remove any search results elements, and show our progress spinner */
  $("#homrMshrVizResults").hide();
  $("#homrErrorMessage").hide();
  $("#station_title").hide();
  $("#homrLinksArea").hide();
  $("#homrMshrContainer").hide();
  $("#homrPhrContainer").hide();
  $("#homrLocationsContainer").hide();
  $("#homrMiscContainer").hide();
  $("#homrVizTabs").hide();
  $("#homrMshrVizSpinner").show();
  $("#print_link").hide();
  $("#save_link").hide();

  //Set these global vals to be checked on search timeout
  gQidVal = qidVal;
  gQidMod = qidMod;
  
  var url = Homr.Load.getWsUrlForFields(),
    data = 'date=all&headersOnly=true',
    searchFields = {},
    searchErrors = [];

  selectedResultStationId = 0;

  // Check for search parameters entered into the text areas
  //
  // We have to check for the existence of placeholder text in the text areas
  // here because of how formalize.js supports IE: we don't ever actually 
  // submit the form, which is when formalize would normally strip out the text.
  if (qidVal !== '' && qidVal !== 'null') {
    var qid = '&qid=' + qidVal;
    if (qidMod === '' || qidMod === 'null') {
      qidMod = 'is';
    }
    qid += "&qidMod=" + qidMod;
    data += qid;
    searchFields.id = "id " + qidMod + " " + qidVal;
    
    var qidSplit = qidVal.split(":");
    if(qidSplit[0] === 'COOP' && qidSplit[1].length !== 6){
    	searchErrors.push("COOP Id must be 6 digits.");
    }
    if(qidSplit[0] === 'WBAN' && qidSplit[1].length !== 5){
    	searchErrors.push("WBAN Id must be 5 digits.");
    }
    if(qidSplit[0] === 'WMO' && qidSplit[1].length !== 5){
    	searchErrors.push("WMO Id must be 5 digits.");
    }
    
  }
  if (stateVal !== '' && stateVal !== 'null') {
    data += '&state=' + stateVal;
    searchFields.state = "Located in <b>" + stateVal + "</b>";
  }
  if (countryVal !== '' && countryVal !== 'null') {
    data += '&country=' + countryVal;
    searchFields.state = "Located in <b>" + countryVal + "</b>";
  }
  if (countyVal !== '' && countyVal !== 'null') {
    data += '&county=' + countyVal;
    searchFields.state += " and <b>" + countyVal + "</b> county";
  }
  if (nameVal !== '' && nameVal !== 'null') {
    if (nameMod === '' || nameMod === 'null') {
      nameMod = 'contains';
    }
    data += '&nameMod=' + nameMod;
    data += '&name=' + nameVal;
    searchFields.name = "Name " + nameMod + " '<b>" + nameVal + "</b>'";
  }
  if (platformVal !== '' && platformVal !== 'null') {
    data += '&platform=' + platformVal;
    searchFields.platform = "In platform <b>" + platformVal + "</b>";
  }

  for (var i = 0; i < mshr_requests.length; i++) {
    mshr_requests[i].abort();
  }
  trackSearch(data);

  mshr_requests.push($.ajax({
    url : url,
    data : data,
    timeout : 20000,
    success : function (json) {
      currentStationsList = [];
      allStationsList = [];

      $.each(json.stationCollection.stations, function (index, stationJson) {
        if (typeof stationJson.header !== 'undefined') {
          allStationsList.push({
            ncdcStnId : stationJson.ncdcStnId,
            preferredName : stationJson.header.preferredName,
            lat : stationJson.header.latitude_dec,
            lon : stationJson.header.longitude_dec,
            precision : stationJson.header.precision,
            beginDate : stationJson.header.por.beginDate.split("T")[0],
            endDate : stationJson.header.por.endDate.split("T")[0]
          });
        }
      });

      if (json.stationCollection.stations.length > 1) {
        // sort by: closed date desc ('present' first) > open date desc
        // ('unknown' first) > station name asc
        allStationsList = allStationsList.sort(function (a, b) {
          if (a.endDate < b.endDate) {
            return 1;
          } else if (a.endDate > b.endDate) {
            return -1;
          } else if (a.preferredName < b.preferredName) {
            return -1;
          } else if (a.preferredName > b.preferredName) {
            return 1;
          } else {
            return 0;
          }
        });

        currentStationsList = $.grep(allStationsList, function (s, i) {
          return s.endDate === 'Present';
        });
        stationList = allStationsList;
        buildSearchResults(tabVal);
      } else {
        stationList = allStationsList;
        // load the first result into the viz
        loadOtherEntry(stationList[0].ncdcStnId.toString(), tabVal);
      }
    },
    error : function (x, t, m) {
      var errorHtml = "";
      if (t === "abort") {
        // don't do anything, this is caused by a search submitted while another
        // one is waiting to return
      } else {
        if (t === "timeout") {
          if (gQidMod === "is" && gQidVal !== null) {
            errorHtml += "We are experiencing high system load right now.<br />" + 
              "Your query may be successful if you search again,<br />" +
              " or you can try at another time.";
            
          } else {
            errorHtml += "This query returned too many results.<br />";
            errorHtml += "Try narrowing your search with more specific terms.";
          }
        } else {
          errorHtml += "No stations found for these terms:<br />";
          $.each(searchFields, function (fieldName, fieldValue) {
            errorHtml += "&#8226; " + fieldValue + "<br />";
          });
          if(searchErrors.length !== 0){
        	  $.each(searchErrors, function (idx, searchError){
        		  errorHtml += searchError;
        	  });
          }
        }
        $("#homrErrorMessage").html(errorHtml);
        $("#homrErrorMessage").show();
        $("#homrMshrVizSpinner").hide();
        $("#homrMshrContainer").hide();
        $("#homrPhrContainer").hide();
        $("#station_title").hide();
        $("#homrVizTabs").hide();
      }
    }
  }));
}

$(document).ready(
  function () {
    $("#homr_mshr").attr("width", $("#homrmain").width() - 190);
    
    // let the enter key trigger search submission
    $("#searchIdBox").keyup(function (event) {
      if (event.keyCode === 13) {
        searchFromPage();
      }
    });
    $("#searchNameBox").keyup(function (event) {
      if (event.keyCode === 13) {
        searchFromPage();
      }
    });

    $("#searchbutton").click(function () {
      searchFromPage();
    });

    // generates a png of the mshr canvas for local saving
    $("#save_link").click(function (event) {
      var imgElem = $("#mshr_img");
      var svgElem = $("#homr_mshr .chart")[0];

      var pablo = Pablo(svgElem);
      var pabloImg;
      var ieVersion = Homr.Util.getIEVersion();
      var id = getHashParameter('ncdcstnid');
      
      // IE can't directly trigger downloads, so we write an image to a qtip element
      if(ieVersion >= 10){
        pabloImg = pablo.dataUrl();
        imgElem.html("<img src='"+ pabloImg +"' alt='downloadable mshr image' />");
      }else{
        pablo.download('png', id + '-mshr.png');
      }
      
    });

    // convoluted way to handle printout of the mshr canvas
    $("#print_link").click(
      function (event) {
        // generate a png of the canvas data and display it in a modal window
        var svgElem = $("#homr_mshr .chart")[0];
        var pablo = Pablo(svgElem);
        var imgData = pablo.dataUrl();
        var title = $("#station_title").html();
        
        // spawn a new browser window/tab
        var w = window.open();
        // write the header and png to the new window
        w.document.write("<div style='" + "font-size: 20px;"
          + "text-align:center;" + "background-color:#e5f2fb;"
          + "border-top:1px solid #ccc;"
          + "border-bottom: 1px solid #ccc;'>" + title + "</div>");
        w.document.write("<div style='text-align:center;'><img src='"
          + imgData + "' alt='downloadable mshr image' /></div>");
        // IE needs the stream closed
        w.document.close();
        // focus to the new window, send the print signal, and close the
        // window when the print job's been sent
        w.focus();
        w.print();
        w.close();
      }
    );

    // reset the page to it's initial state:
    // hide search results, hide any loaded station, reset default search
    // parameters,
    // restore hidden static page content, clear page hash
    $("#clear_link").click(
      function (event) {
        $("#homrMshrVizResults").hide();
        $("#homrMshrVizSpinner").hide();
        $("#homrErrorMessage").hide();
        $("#station_title").hide();
        $("#homrMshrContainer").hide();
        $("#homrPhrContainer").hide();
        $("#homrLocationsContainer").hide();
        $("#homrMiscContainer").hide();
        $("#homrLinksArea").hide();
        $("#homrVizTabs").hide();
        $("#print_link").hide();
        $("#save_link").hide();

        $("#open_stations_checkbox").removeClass("homr_switch_selected");

        $("#homrHoldingsArea").show();
        $("#homrAccessArea").show();

        $("#searchIdTypes option[default='true']").prop('selected', true);
        $("#searchIdMod option[default='true']").prop('selected', true);
        $("#searchIdBox").val($("#searchIdBox")[0].defaultValue);
        $("#searchLocations option[default='true']").prop('selected', true);
        $("#searchCounties").hide();
        $("#searchNameMod").val("contains");
        $("#searchNameBox").val($("#searchNameBox")[0].defaultValue);
        $("#searchPlatform option[default='true']").prop('selected', true);
        $("#searchIdBox").show();
        
        checkHash = false;
        location.hash = "";
      }
    );

    // show/hide the county options when a location that has counties is selected
    $("#searchLocations").on(
      "change",
      function () {
        $("#searchCounties").hide();
        var showCounties = $("#searchLocations option:selected").attr('counties');
        if (typeof showCounties !== 'undefined') {
          var st = $("#searchLocations option:selected").attr('state');
          if (HOMRcounties[st]) {
            $("#searchCounties").show();
            var countiesList = buildCountiesList(st);
            $("#searchCounties").html(countiesList);
          }
        }
      }
    );
    
    $("#searchIdMod").on(
    	"change",
    	function(){
	    	var searchIdMod = $("#searchIdMod option:selected").val();
	    	if(searchIdMod === "exists"){
	    		$("#searchIdBox").hide();
	    	}else{
	    		$("#searchIdBox").show();
	    	}
    	}
    );
    

    // show/hide the search results area
    $(".homrSearchResultsToggle").click(
      function () {
        $(this).toggleClass("homrSearchResultsToggle_selected");
        $("#homrSearchResultsContent").toggle();
        refreshGmap(resultsGMapObject, resultsLatLonBounds);
      }
    );

    // show or hide content when a tab is selected
    $("#homrNavlist li").click(
      function () {
        var linktab;
        
        if ($(this).hasClass("homrCurrentTab") === false) {
          $("#homrNavlist li").removeClass("homrCurrentTab");
          $(this).addClass("homrCurrentTab");
        }

        if ($("#MSHR_TAB").hasClass("homrCurrentTab") === true) {
          linktab = 'MSHR';
          $("#homrPhrContainer").hide();
          $("#homrLocationsContainer").hide();
          $("#homrMiscContainer").hide();
          $("#homrMshrContainer").show();
          var ieVersion = Homr.Util.getIEVersion();
          if (ieVersion < 0 || ieVersion >= 9) {
            Homr.gantt.updateLabels();
            if ($.cookie("homr_mshr_help") !== "set") {
              $.cookie("homr_mshr_help", "set", {expires: 365});
              $("#mshr_help").click();
            }
            if (ieVersion < 0 || ieVersion >= 10) {
              $("#print_link").show();
              $("#save_link").show();
            }
          } else {
            $("#homrMshrCanvas").hide();
            $("#homrNoCanvasSupportError").show();
          }
        } else if ($("#PHR_TAB").hasClass("homrCurrentTab") === true) {
          linktab = 'PHR';
          $("#print_link").hide();
          $("#save_link").hide();
          $("#homrMshrContainer").hide();
          $("#homrLocationsContainer").hide();
          $("#homrMiscContainer").hide();
          $("#homrPhrContainer").show();
          addPHRQtips();
        } else if ($("#LOCATIONS_TAB").hasClass("homrCurrentTab") === true) {
          linktab = 'LOCATIONS';
          $("#print_link").hide();
          $("#save_link").hide();
          $("#homrMshrContainer").hide();
          $("#homrPhrContainer").hide();
          $("#homrMiscContainer").hide();
          $("#homrLocationsContainer").show();
          refreshGmap(locationsGMapObject, locationsLatLonBounds);
          addLocationsQtips();
        } else if ($("#MISC_TAB").hasClass("homrCurrentTab") === true) {
          linktab = 'MISC';
          $("#print_link").hide();
          $("#save_link").hide();
          $("#homrMshrContainer").hide();
          $("#homrPhrContainer").hide();
          $("#homrLocationsContainer").hide();
          $("#homrMiscContainer").show();
          if ($("#remarks_table").height() > 550) {
            $("#remarks_table").scrollify(500);
          }
          if ($("#updates_table").height() > 550) {
            $("#updates_table").scrollify(500);
          }
        }

        var id = getHashParameter('ncdcstnid');
        var newHash = "#ncdcstnid=" + id + "&tab=" + linktab;
        if (location.hash.toUpperCase() !== newHash.toUpperCase()) {
          checkHash = false;
          location.hash = newHash;
        }

        var linkhtml = "<a href='" + window.location
          + "' target='_blank'>Open this station in a new window</a>";
        $("#homrNewWindowLink").html(linkhtml);

        trackPage();

      }
    );

    // allow for manual url tweaking
    $(window).on(
      'hashchange', 
      function () {
        if (checkHash === true) {
          runParamsSearch();
        }
        checkHash = true;
      }
    );

    // Override only if native toISOString is not defined
    if (!Date.prototype.toISOString) {
      // Here we rely on JSON serialization for dates because it matches
      // the ISO standard. However, we check if JSON serializer is present
      // on a page and define our own .toJSON method only if necessary
      if (!Date.prototype.toJSON) {
        Date.prototype.toJSON = function (key) {
          function f(n) {
            // Format integers to have at least two digits.
            return n < 10 ? '0' + n : n;
          }

          return this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1)
            + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours())
            + ':' + f(this.getUTCMinutes()) + ':'
            + f(this.getUTCSeconds()) + 'Z';
        };
      }

      Date.prototype.toISOString = Date.prototype.toJSON;
    }

    /*
     * Let all browsers handle ISO dates the same way
     */
    Date.fromISO = function (s) {
      var day, 
        tz, 
        rx = /^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):(\d\d))?$/, 
        p = rx.exec(s) || [];
      if (p[1]) {
        day = p[1].split(/\D/);
        for (var i = 0, L = day.length; i < L; i++) {
          day[i] = parseInt(day[i], 10) || 0;
        }
        day[1] -= 1;
        day = new Date(Date.UTC.apply(Date, day));
        if (!day.getDate()) {
          return NaN;
        }
        if (p[5]) {
          tz = (parseInt(p[5], 10) * 60);
          if (p[6]) {
            tz += parseInt(p[6], 10);
          }
          if (p[4] === '+') {
            tz *= -1;
          }
          if (tz) {
            day.setUTCMinutes(day.getUTCMinutes() + tz);
          }
        }
        return day;
      }
      return NaN;
    };

  }
);

$(window).on('load', function () {
  // This fixes an error with Google Maps in IE where the bounding rect can be null
  HTMLElement.prototype.getBoundingClientRect = (function () { 
    var oldGetBoundingClientRect = HTMLElement.prototype.getBoundingClientRect; 
    return function() { 
        try { 
            return oldGetBoundingClientRect.apply(this, arguments); 
        } catch (e) { 
            return { 
                left: '', 
                right: '', 
                top: '', 
                bottom: '' 
            }; 
        } 
    }; 
  })();
  
  runParamsSearch();
  
});
